diff '--exclude=.svn' -aurN cef.ori/cef_desura/ChromiumBrowser.cpp cef/cef_desura/ChromiumBrowser.cpp
--- cef_desura/ChromiumBrowser.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/ChromiumBrowser.cpp	2012-05-09 11:32:01.267658243 +0200
@@ -0,0 +1,553 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : minimal
+//   File        : ChromiumBrowser.cpp
+//   Description :
+//      [TODO: Write the purpose of ChromiumBrowser.cpp.]
+//
+//   Created On: 5/25/2010 5:40:26 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#if defined(_WIN32)
+#include "windows.h"
+#endif
+
+#include "ChromiumBrowser.h"
+#include "include/cef.h"
+#include "JavaScriptExtender.h"
+#include "SchemeExtender.h"
+
+#include "JavaScriptContext.h"
+#include "ChromiumBrowserEvents.h"
+
+#ifdef OS_LINUX
+#include <gtk/gtk.h>
+#endif
+
+#if defined __x86_64 || defined __amd64 || defined __x86_64__
+	#define NIX64 1
+#endif
+
+ChromiumDLL::LogMessageHandlerFn g_pLogHandler = NULL;
+
+bool logHandler(int level, const std::string& msg)
+{
+	if (g_pLogHandler)
+		return g_pLogHandler(level, msg.c_str());
+
+	return false;
+}
+
+#ifdef OS_LINUX
+static void gtkFocus(GtkWidget *widget, GdkEvent *event, ChromiumBrowser *data)
+{
+	if (data)
+		data->onFocus();
+}
+#endif
+
+extern "C"
+{
+	DLLINTERFACE void CEF_DoMsgLoop()
+	{
+		CefDoMessageLoopWork();
+	}
+
+	DLLINTERFACE bool CEF_Init(bool threaded, const char* cachePath, const char* logPath, const char* userAgent)
+	{
+		CefSettings settings;
+
+
+		cef_string_copy(cachePath, strlen(cachePath), &settings.cache_path);
+		cef_string_copy(userAgent, strlen(userAgent), &settings.user_agent);
+
+		settings.multi_threaded_message_loop = threaded;
+
+
+		if (!CefInitialize(settings))
+			return false;
+
+#if defined(_WIN32)
+		CefRegisterFlashPlugin("gcswf32.dll");
+#else
+	CefRegisterFlashPlugin("libdesura_flashwrapper.so");
+#endif
+
+		return true;
+	}
+
+	DLLINTERFACE void CEF_Stop()
+	{
+		CefShutdown();
+	}
+
+	DLLINTERFACE bool CEF_RegisterJSExtender(ChromiumDLL::JavaScriptExtenderI* extender)
+	{
+		return JavaScriptExtender::Register(extender);
+	}
+
+	DLLINTERFACE bool CEF_RegisterSchemeExtender(ChromiumDLL::SchemeExtenderI* extender)
+	{
+		return SchemeExtender::Register(extender);
+	}
+
+	DLLINTERFACE ChromiumDLL::ChromiumBrowserI* CEF_NewChromiumBrowser(int* formHandle, const char* name, const char* defaultUrl)
+	{
+		return new ChromiumBrowser((WIN_HANDLE)formHandle, defaultUrl);
+	}
+
+	DLLINTERFACE void CEF_SetLogHandler(ChromiumDLL::LogMessageHandlerFn logFn)
+	{
+		g_pLogHandler = logFn;
+	}
+
+	DLLINTERFACE void CEF_PostCallback(ChromiumDLL::CallbackI* callback)
+	{
+		CefPostTask(TID_UI, CefRefPtr<CefTask>(new TaskWrapper(callback)));
+	}
+}
+
+enum ACTION
+{
+	A_STOPLOAD,
+	A_REFRESH,
+	A_BACK,
+	A_FORWARD,
+	A_ZOOMIN,
+	A_ZOOMOUT,
+	A_ZOOMNORMAL,
+	A_PRINT,
+	A_VIEWSOURCE,
+	A_UNDO,
+	A_REDO,
+	A_CUT,
+	A_COPY,
+	A_PASTE,
+	A_DEL,
+	A_SELECTALL,
+};
+
+class BrowserTask : public CefTask
+{
+public:
+	BrowserTask(CefBrowser* browser, ACTION action)
+	{
+		m_pBrowser = browser;
+		m_iRef = 1;
+		m_Action = action;
+	}
+
+	virtual void Execute(CefThreadId threadId)
+	{
+		if (!m_pBrowser)
+			return;
+
+		bool handled = true;
+
+		switch (m_Action)
+		{
+			case A_STOPLOAD:	m_pBrowser->StopLoad();						break;
+			case A_REFRESH:		m_pBrowser->ReloadIgnoreCache();			break;
+			case A_BACK:		m_pBrowser->GoBack();						break;
+			case A_FORWARD:		m_pBrowser->GoForward();					break;
+			default:
+				handled = false;
+				break;
+		};
+
+		if (handled)
+			return;
+
+		CefRefPtr<CefFrame> frame = m_pBrowser->GetFocusedFrame();
+
+		if (!frame.get())
+			return;
+
+		switch (m_Action)
+		{
+			case A_ZOOMIN:		frame->ZoomIn();	break;
+			case A_ZOOMOUT:		frame->ZoomOut();	break;
+			case A_ZOOMNORMAL:	frame->ZoomNormal(); break;
+			case A_PRINT:		frame->Print();		break;
+			case A_VIEWSOURCE:	frame->ViewSource(); break;
+			case A_UNDO:		frame->Undo();		break;
+			case A_REDO:		frame->Redo();		break;
+			case A_CUT:			frame->Cut();		break;
+			case A_COPY:		frame->Copy();		break;
+			case A_PASTE:		frame->Paste();		break;
+			case A_DEL:			frame->Delete();	break;
+			case A_SELECTALL:	frame->SelectAll(); break;
+			default:
+				handled = false;
+				break;
+		};
+	}
+
+	virtual int AddRef()
+	{
+		m_iRef++;
+		return m_iRef;
+	}
+
+	virtual int Release()
+	{
+		m_iRef--;
+
+		if (m_iRef == 0)
+			delete this;
+
+		return m_iRef;
+	}
+
+	virtual int GetRefCt()
+	{
+		return m_iRef;
+	}
+
+	int m_iRef;
+	ACTION m_Action;
+	CefBrowser* m_pBrowser;
+};
+
+ChromiumBrowser::ChromiumBrowser(WIN_HANDLE handle, const char* defaultUrl)
+{
+	m_iLastTask = 0;
+	m_hFormHandle = handle;
+	m_pBrowser = NULL;
+
+	m_rEventHandler = (CefClient*)new ChromiumBrowserEvents(this);
+	init(defaultUrl);
+}
+
+ChromiumBrowser::~ChromiumBrowser()
+{
+	ChromiumBrowserEvents* cbe = (ChromiumBrowserEvents*)m_rEventHandler.get();
+
+	if (cbe)
+	{
+		cbe->setParent(NULL);
+		cbe->setCallBack(NULL);
+	}
+}
+
+CefBrowserSettings ChromiumBrowser::getBrowserDefaults()
+{
+	CefBrowserSettings browserDefaults;
+
+	browserDefaults.developer_tools_disabled = false;
+	browserDefaults.webgl_disabled = true;
+	browserDefaults.universal_access_from_file_urls_allowed = true;
+	browserDefaults.file_access_from_file_urls_allowed = true;
+	browserDefaults.java_disabled = true;
+	browserDefaults.javascript_close_windows_disallowed = true;
+	browserDefaults.javascript_open_windows_disallowed = true;
+	browserDefaults.drag_drop_disabled = true;
+
+	return browserDefaults;
+}
+
+#ifdef OS_WIN
+void ChromiumBrowser::init(const char *defaultUrl)
+{
+	CefWindowInfo winInfo;
+
+	winInfo.m_dwStyle =  WS_CHILD | WS_VISIBLE | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_TABSTOP;
+	winInfo.m_nHeight = 500;
+	winInfo.m_nWidth = 500;
+	winInfo.m_hWndParent = m_hFormHandle;
+
+	const char* name = "DesuraCEFBrowser";
+	cef_string_copy(name, strlen(name), &winInfo.m_windowName);
+
+	CefBrowser::CreateBrowser(winInfo, m_rEventHandler, defaultUrl, getBrowserDefaults());
+}
+
+#else
+
+class CreateTask : public CefTask
+{
+public:
+	CreateTask(ChromiumBrowser* browser, const std::string& defaultUrl)
+	{
+		m_pBrowser = browser;
+		m_szDefaultUrl = defaultUrl;
+	}
+
+	void Execute(CefThreadId threadId)
+	{
+		m_pBrowser->initCallback(m_szDefaultUrl);
+	}
+
+	virtual int AddRef(){return 1;}
+	virtual int Release(){return 1;}
+	virtual int GetRefCt(){return 1;}
+
+	ChromiumBrowser *m_pBrowser;
+	std::string m_szDefaultUrl;
+};
+
+void ChromiumBrowser::init(const char *defaultUrl)
+{
+	CefPostTask(TID_UI, new CreateTask(this, defaultUrl));
+}
+
+void ChromiumBrowser::initCallback(const std::string& defaultUrl)
+{
+	CefWindowInfo winInfo;
+	winInfo.SetAsChild(GTK_WIDGET(m_hFormHandle));
+
+	m_pBrowser = CefBrowser::CreateBrowserSync(winInfo, m_rEventHandler, defaultUrl.c_str(), getBrowserDefaults());
+	g_signal_connect(GTK_WIDGET(m_hFormHandle), "button-press-event", G_CALLBACK(gtkFocus), this);
+	gtk_widget_show_all(GTK_WIDGET(m_hFormHandle));
+}
+#endif
+
+
+
+
+
+
+void ChromiumBrowser::loadString(const char* string)
+{
+	if (m_pBrowser && m_pBrowser->GetMainFrame())
+	{
+		m_pBrowser->GetMainFrame()->LoadString(string, "http://local");
+	}
+	else
+	{
+		if (string)
+			m_szBuffer = string;
+		m_iLastTask = 1;
+	}
+}
+
+void ChromiumBrowser::loadUrl(const char* url)
+{
+	if (m_pBrowser)
+	{
+		m_pBrowser->GetMainFrame()->LoadURL(url);
+	}
+	else
+	{
+		m_szBuffer = url;
+		m_iLastTask = 2;
+	}
+}
+
+
+void ChromiumBrowser::stop()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_STOPLOAD));
+}
+
+void ChromiumBrowser::refresh(bool ignoreCache)
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_REFRESH));
+}
+
+void ChromiumBrowser::back()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_BACK));
+}
+
+void ChromiumBrowser::forward()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_FORWARD));
+}
+
+void ChromiumBrowser::zoomIn()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_ZOOMIN));
+}
+
+void ChromiumBrowser::zoomOut()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_ZOOMOUT));	
+}
+
+void ChromiumBrowser::zoomNormal()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_ZOOMNORMAL));
+}
+
+void ChromiumBrowser::print()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_PRINT));
+}
+
+void ChromiumBrowser::viewSource()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_VIEWSOURCE));	
+}
+
+void ChromiumBrowser::undo()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_UNDO));
+}
+
+void ChromiumBrowser::redo()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_REDO));
+}
+
+void ChromiumBrowser::cut()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_CUT));
+}
+
+
+void ChromiumBrowser::copy()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_COPY));	
+}
+
+void ChromiumBrowser::paste()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_PASTE));	
+}
+
+void ChromiumBrowser::del()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_DEL));
+}
+
+void ChromiumBrowser::selectall()
+{
+	CefPostTask(TID_UI, new BrowserTask(m_pBrowser, A_SELECTALL));
+}
+
+
+
+void ChromiumBrowser::setEventCallback(ChromiumDLL::ChromiumBrowserEventI* cbeI)
+{
+	ChromiumBrowserEvents* cbe = (ChromiumBrowserEvents*)m_rEventHandler.get();
+
+	if (cbe)
+		cbe->setCallBack(cbeI);
+}
+
+void ChromiumBrowser::executeJScript(const char* code, const char* scripturl, int startline)
+{
+	if (!m_pBrowser || !m_pBrowser->GetMainFrame() || !code)
+		return;
+
+	m_pBrowser->GetMainFrame()->ExecuteJavaScript(code, scripturl?scripturl:"", startline);
+}
+
+void ChromiumBrowser::onFocus()
+{
+	if (m_pBrowser)
+		m_pBrowser->SetFocus(true);
+}
+
+#if defined(_WIN32)
+void ChromiumBrowser::onPaintBg()
+{
+	// Dont erase the background if the browser window has been loaded
+	// (this avoids flashing)
+}
+
+
+void ChromiumBrowser::onPaint()
+{
+	PAINTSTRUCT ps;
+	HDC hdc = BeginPaint(m_hFormHandle, &ps);
+	EndPaint(m_hFormHandle, &ps);
+}
+
+void ChromiumBrowser::onResize()
+{
+	HWND hWnd = m_hFormHandle;
+
+	if(m_pBrowser && m_pBrowser->GetWindowHandle())
+	{
+		// Resize the browser window and address bar to match the new frame
+		// window size
+		RECT rect;
+		::GetClientRect(hWnd, &rect);
+
+		HDWP hdwp = BeginDeferWindowPos(1);
+		hdwp = DeferWindowPos(hdwp, m_pBrowser->GetWindowHandle(), NULL,rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top,SWP_NOZORDER);
+		EndDeferWindowPos(hdwp);
+	}
+}
+
+#else
+void ChromiumBrowser::onResize(int x, int y, int width, int height)
+{
+	GtkAllocation a;
+	a.x = x;
+	a.y = y;
+	a.width = width;
+	a.height = height;
+
+	gtk_widget_size_allocate(GTK_WIDGET(m_hFormHandle), &a);
+	gtk_widget_set_size_request(GTK_WIDGET(m_hFormHandle), width, height);
+}
+#endif
+
+void ChromiumBrowser::setBrowser(CefBrowser* browser)
+{
+	m_pBrowser = browser;
+
+	if (m_iLastTask == 1)
+	{
+		loadString(m_szBuffer.c_str());
+	}
+	else if (m_iLastTask == 2)
+	{
+		loadUrl(m_szBuffer.c_str());
+	}
+
+	m_szBuffer = "";
+
+#ifdef WIN32
+	onResize();
+#endif
+}
+
+void ChromiumBrowser::showInspector()
+{
+	if (m_pBrowser)
+		m_pBrowser->ShowDevTools();
+}
+
+void ChromiumBrowser::hideInspector()
+{
+	if (m_pBrowser)
+		m_pBrowser->CloseDevTools();
+}
+
+void ChromiumBrowser::inspectElement(int x, int y)
+{
+	if (m_pBrowser)
+		m_pBrowser->InspectElement(x, y);
+}
+
+void ChromiumBrowser::scroll(int x, int y, int delta, unsigned int flags)
+{
+	if (m_pBrowser)
+		m_pBrowser->MouseWheelEvent(x, y, delta, flags);
+}
+
+int* ChromiumBrowser::getBrowserHandle()
+{
+	if (m_pBrowser)
+		return (int*)m_pBrowser->GetWindowHandle();
+
+	return 0;
+}
+
+ChromiumDLL::JavaScriptContextI* ChromiumBrowser::getJSContext()
+{
+	if (m_pBrowser)
+		return new JavaScriptContext(m_rContext);
+
+	return NULL;
+}
+
+void ChromiumBrowser::setContext(CefRefPtr<CefV8Context> context)
+{
+	m_rContext = context;
+}
diff '--exclude=.svn' -aurN cef.ori/cef_desura/ChromiumBrowserEvents.cpp cef/cef_desura/ChromiumBrowserEvents.cpp
--- cef_desura/ChromiumBrowserEvents.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/ChromiumBrowserEvents.cpp	2012-05-09 11:32:01.267658243 +0200
@@ -0,0 +1,340 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : ChromiumBrowserEvents.cpp
+//   Description :
+//      [TODO: Write the purpose of ChromiumBrowserEvents.cpp.]
+//
+//   Created On: 7/1/2010 11:36:15 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+
+#include "ChromiumBrowserEvents.h"
+#include "ChromiumBrowser.h"
+#include "MenuInfo.h"
+
+#include <sstream>
+#include "JavaScriptObject.h"
+#include "JavaScriptFactory.h"
+
+std::map<int, std::string> g_mErrorMsgMap;
+
+class FillMap
+{
+public:
+	FillMap()
+	{
+		g_mErrorMsgMap[ERR_FAILED] = "A generic failure occured";
+		g_mErrorMsgMap[ERR_ABORTED] = "An operation was aborted (due to user action)";
+		g_mErrorMsgMap[ERR_INVALID_ARGUMENT] = "An argument to the function is incorrect";
+		g_mErrorMsgMap[ERR_INVALID_HANDLE] = "The handle or file descriptor is invalid";
+		g_mErrorMsgMap[ERR_FILE_NOT_FOUND] = "The file or directory cannot be found";
+		g_mErrorMsgMap[ERR_TIMED_OUT] = "An operation timed out";
+		g_mErrorMsgMap[ERR_FILE_TOO_BIG] = "The file is too large";
+		g_mErrorMsgMap[ERR_UNEXPECTED] = "An unexpected error.  This may be caused by a programming mistake or an invalid assumption";
+		g_mErrorMsgMap[ERR_ACCESS_DENIED] = "Permission to access a resource was denied";
+		g_mErrorMsgMap[ERR_NOT_IMPLEMENTED] = "The operation failed because of unimplemented functionality";
+		g_mErrorMsgMap[ERR_CONNECTION_CLOSED] = "A connection was closed (corresponding to a TCP FIN)";
+		g_mErrorMsgMap[ERR_CONNECTION_RESET] = "A connection was reset (corresponding to a TCP RST)";
+		g_mErrorMsgMap[ERR_CONNECTION_REFUSED] = "A connection attempt was refused";
+		g_mErrorMsgMap[ERR_CONNECTION_ABORTED] = "A connection timed out as a result of not receiving an ACK for data sent";
+		g_mErrorMsgMap[ERR_CONNECTION_FAILED] = "A connection attempt failed";
+		g_mErrorMsgMap[ERR_NAME_NOT_RESOLVED] = "The host name could not be resolved";
+		g_mErrorMsgMap[ERR_INTERNET_DISCONNECTED] = "The Internet connection has been lost";
+		g_mErrorMsgMap[ERR_SSL_PROTOCOL_ERROR] = "An SSL protocol error occurred";
+		g_mErrorMsgMap[ERR_ADDRESS_INVALID] = "The IP address or port number is invalid";
+		g_mErrorMsgMap[ERR_ADDRESS_UNREACHABLE] = "The IP address is unreachable";
+		g_mErrorMsgMap[ERR_SSL_CLIENT_AUTH_CERT_NEEDED] = "The server requested a client certificate for SSL client authentication";
+		g_mErrorMsgMap[ERR_TUNNEL_CONNECTION_FAILED] = "A tunnel connection through the proxy could not be established";
+		g_mErrorMsgMap[ERR_NO_SSL_VERSIONS_ENABLED] = "No SSL protocol versions are enabled";
+		g_mErrorMsgMap[ERR_SSL_VERSION_OR_CIPHER_MISMATCH] = "The client and server don't support a common SSL protocol version or cipher suite";
+		g_mErrorMsgMap[ERR_SSL_RENEGOTIATION_REQUESTED] = "The server requested a renegotiation (rehandshake)";
+		g_mErrorMsgMap[ERR_CERT_COMMON_NAME_INVALID] = "The server responded with a certificate whose common name did not match the host name";
+		g_mErrorMsgMap[ERR_CERT_DATE_INVALID] = "The server responded with a certificate that, by our clock, appears to either not yet be valid or to have expired";
+		g_mErrorMsgMap[ERR_CERT_AUTHORITY_INVALID] = "The server responded with a certificate that is signed by an authority we don't trust";
+		g_mErrorMsgMap[ERR_CERT_CONTAINS_ERRORS] = "The server responded with a certificate that contains errors";
+		g_mErrorMsgMap[ERR_CERT_NO_REVOCATION_MECHANISM] = "The certificate has no mechanism for determining if it is revoked";
+		g_mErrorMsgMap[ERR_CERT_UNABLE_TO_CHECK_REVOCATION] = "Revocation information for the security certificate for this site is not avaliable";
+		g_mErrorMsgMap[ERR_CERT_REVOKED] = "The server responded with a certificate has been revoked";
+		g_mErrorMsgMap[ERR_CERT_INVALID] = "The server responded with a certificate that is invalid";
+		g_mErrorMsgMap[ERR_CERT_END] = "The value immediately past the last certificate error code";
+		g_mErrorMsgMap[ERR_INVALID_URL] = "The URL is invalid";
+		g_mErrorMsgMap[ERR_DISALLOWED_URL_SCHEME] = "The scheme of the URL is disallowed";
+		g_mErrorMsgMap[ERR_UNKNOWN_URL_SCHEME] = "The scheme of the URL is unknown";
+		g_mErrorMsgMap[ERR_TOO_MANY_REDIRECTS] = "Attempting to load an URL resulted in too many redirects";
+		g_mErrorMsgMap[ERR_UNSAFE_REDIRECT] = "Attempting to load an URL resulted in an unsafe redirect";
+		g_mErrorMsgMap[ERR_UNSAFE_PORT] = "Attempting to load an URL with an unsafe port number";
+		g_mErrorMsgMap[ERR_INVALID_RESPONSE] = "The server's response was invalid";
+		g_mErrorMsgMap[ERR_INVALID_CHUNKED_ENCODING] = "Error in chunked transfer encoding";
+		g_mErrorMsgMap[ERR_METHOD_NOT_SUPPORTED] = "The server did not support the request method";
+		g_mErrorMsgMap[ERR_UNEXPECTED_PROXY_AUTH] = "The response was 407 (Proxy Authentication Required), yet we did not send the request to a proxy";
+		g_mErrorMsgMap[ERR_EMPTY_RESPONSE] = "The server closed the connection without sending any data";
+		g_mErrorMsgMap[ERR_RESPONSE_HEADERS_TOO_BIG] = "The headers section of the response is too large";
+		g_mErrorMsgMap[ERR_CACHE_MISS] = "The cache does not have the requested entry";
+		g_mErrorMsgMap[ERR_INSECURE_RESPONSE] = "The server's response was insecure (e.g. there was a cert error)";
+	}
+};
+
+FillMap fm;
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// LifeSpanHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+void LifeSpanHandler::OnAfterCreated(CefRefPtr<CefBrowser> browser)
+{
+	if (browser->IsPopup())
+		return;
+
+	SetBrowser(browser);
+}
+
+void LifeSpanHandler::OnBeforeClose(CefRefPtr<CefBrowser> browser)
+{
+	if (GetBrowser() && GetBrowser()->GetWindowHandle() == browser->GetWindowHandle())
+		SetBrowser(NULL);
+}
+
+bool LifeSpanHandler::OnBeforePopup(CefRefPtr<CefBrowser> parentBrowser, const CefPopupFeatures& popupFeatures, CefWindowInfo& windowInfo, const CefString& url, CefRefPtr<CefClient>& client, CefBrowserSettings& settings)
+{
+	//dont show popups unless its the inspector
+	const char* u = url.c_str();
+	return (!u || std::string(u).find("resources/inspector/devtools.") == std::string::npos);
+}
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// LifeSpanHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+void LoadHandler::OnLoadStart(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame)
+{
+	if (GetCallback() && frame->IsMain())
+		GetCallback()->onPageLoadStart();
+}
+
+void LoadHandler::OnLoadEnd(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, int httpStatusCode)
+{
+	if (GetCallback() && frame->IsMain())
+		GetCallback()->onPageLoadEnd();
+}
+
+bool LoadHandler::OnLoadError(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, ErrorCode errorCode, const CefString& failedUrl, CefString& errorText)
+{
+	//if no frame its the whole page
+	if (GetCallback())
+	{
+		const size_t size = 100*1024;
+		char buff[size];
+		buff[0] = 0;
+
+		std::string errorMsg;
+		std::map<int,std::string>::iterator it = g_mErrorMsgMap.find(errorCode);
+
+		if (it != g_mErrorMsgMap.end())
+		{
+			std::stringstream stream;
+			stream << g_mErrorMsgMap[errorCode] << " [" << errorCode << "]";
+			errorMsg = stream.str();
+		}
+		else
+		{
+			std::stringstream stream;
+			stream << "Error Code " << errorCode;
+			errorMsg = stream.str();
+		}
+
+		if (GetCallback()->onLoadError(errorMsg.c_str(), failedUrl.c_str(), buff, size))
+		{
+			errorText = buff;
+			return true;
+		}
+	}
+		
+	// All other messages.
+	std::stringstream ss;
+	ss <<       "<html><head><title>Load Failed</title></head>"
+				"<body><h1>Load Failed</h1>"
+				"<h2>Load of URL " << failedUrl.c_str() <<
+				" failed with error code " << static_cast<int>(errorCode) <<
+				".</h2></body>"
+				"</html>";
+	errorText = ss.str();
+	return true;
+}
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// RequestHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+bool RequestHandler::OnBeforeBrowse(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, NavType navType, bool isRedirect)
+{
+	if (!GetCallback())
+		return false;
+
+	std::string url = request->GetURL();
+
+	if (url.find("resources/inspector/devtools.") != std::string::npos)
+		return false;
+
+	return !GetCallback()->onNavigateUrl(url.c_str(), frame->IsMain());
+}
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// DisplayHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+bool DisplayHandler::OnConsoleMessage(CefRefPtr<CefBrowser> browser, const CefString& message, const CefString& source, int line)
+{
+	if (GetCallback())
+		GetCallback()->onLogConsoleMsg(message.c_str(), source.c_str(), line);
+
+	return true;
+}
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// KeyboardHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+bool KeyboardHandler::OnKeyEvent(CefRefPtr<CefBrowser> browser, KeyEventType type, int code, int modifiers, bool isSystemKey)
+{
+	if (!GetCallback())
+		return false;
+
+	return GetCallback()->onKeyEvent((ChromiumDLL::KeyEventType)type, code, modifiers, isSystemKey);
+}
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// MenuHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+bool MenuHandler::OnBeforeMenu(CefRefPtr<CefBrowser> browser, const MenuInfo& menuInfo)
+{
+	if (!GetCallback())
+		return false;
+
+	ChromiumMenuInfo cmi(menuInfo, GetBrowser()->GetWindowHandle());
+	return GetCallback()->HandlePopupMenu(&cmi);
+}
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// JSDialogHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+bool JSDialogHandler::OnJSAlert(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& message)
+{
+	if (!GetCallback())
+		return false;
+
+	return GetCallback()->onJScriptAlert(message.c_str());
+}
+
+bool JSDialogHandler::OnJSConfirm(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& message, bool& retval)
+{
+	if (!GetCallback())
+		return false;
+
+	return (GetCallback()->onJScriptConfirm(message.c_str(), &retval));
+}
+
+bool JSDialogHandler::OnJSPrompt(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& message, const CefString& defaultValue, bool& retval, CefString& result)
+{
+	if (!GetCallback())
+		return false;
+
+	char resultBuff[255] = {0};
+	bool res = GetCallback()->onJScriptPrompt(message.c_str(), defaultValue.c_str(), &retval, resultBuff);
+
+	if (res)
+		result = resultBuff;
+
+	return res;
+}
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// JSBindingHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+void JSBindingHandler::OnJSBinding(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefV8Value> object)
+{
+	setContext(CefV8Context::GetCurrentContext());
+
+	JavaScriptObject obj(object);
+
+	if (GetCallback())
+		GetCallback()->HandleJSBinding(&obj, GetJSFactory());
+}
+
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// WinEventHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+void WinEventHandler::OnWndProc(CefRefPtr<CefBrowser> browser, int message, int wparam, int lparam)
+{
+#ifdef OS_WIN
+	if (GetCallback())
+		GetCallback()->HandleWndProc(message, wparam, lparam);
+
+	if (message != WM_XBUTTONDOWN)
+		return;
+
+	int fwButton = GET_XBUTTON_WPARAM(wparam);
+
+	if (fwButton == XBUTTON1)
+		browser->GoBack();
+	else if (fwButton == XBUTTON2)
+		browser->GoForward();
+#endif
+}
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// ChromiumBrowserEvents
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+ChromiumBrowserEvents::ChromiumBrowserEvents(ChromiumBrowser* pParent)
+{
+	m_pParent = pParent;
+	m_pEventCallBack = NULL;
+}
+
+void ChromiumBrowserEvents::setCallBack(ChromiumDLL::ChromiumBrowserEventI* cbe)
+{
+	m_pEventCallBack = cbe;
+}
+
+void ChromiumBrowserEvents::setParent(ChromiumBrowser* parent)
+{
+	m_pParent = parent;
+}
+
+ChromiumDLL::ChromiumBrowserEventI* ChromiumBrowserEvents::GetCallback()
+{
+	return m_pEventCallBack;
+}
+
+void ChromiumBrowserEvents::SetBrowser(CefRefPtr<CefBrowser> browser)
+{
+	m_Browser = browser;
+
+	if (m_pParent)
+		m_pParent->setBrowser(browser);
+}
+
+CefRefPtr<CefBrowser> ChromiumBrowserEvents::GetBrowser()
+{
+	return m_Browser;
+}
+
+void ChromiumBrowserEvents::setContext(CefRefPtr<CefV8Context> context)
+{
+	m_pParent->setContext(context);
+}
+
+
diff '--exclude=.svn' -aurN cef.ori/cef_desura/ChromiumBrowserEvents.h cef/cef_desura/ChromiumBrowserEvents.h
--- cef_desura/ChromiumBrowserEvents.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/ChromiumBrowserEvents.h	2012-05-09 11:32:01.267658243 +0200
@@ -0,0 +1,182 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : ChromiumBrowserEvents.h
+//   Description :
+//      [TODO: Write the purpose of ChromiumBrowserEvents.h.]
+//
+//   Created On: 7/1/2010 11:35:47 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_CHROMIUMBROWSEREVENTS_H
+#define DESURA_CHROMIUMBROWSEREVENTS_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "include/cef.h"
+#include "ChromiumBrowserI.h"
+
+class ChromiumBrowser;
+
+
+class ChromiumEventInfoI
+{
+public:
+	virtual ChromiumDLL::ChromiumBrowserEventI* GetCallback()=0;
+	virtual void SetBrowser(CefRefPtr<CefBrowser> browser)=0;
+	virtual CefRefPtr<CefBrowser> GetBrowser()=0;
+	virtual void setContext(CefRefPtr<CefV8Context> context)=0;
+};
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// LifeSpanHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class LifeSpanHandler : public CefLifeSpanHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual void OnAfterCreated(CefRefPtr<CefBrowser> browser);
+	virtual void OnBeforeClose(CefRefPtr<CefBrowser> browser);
+	virtual bool OnBeforePopup(CefRefPtr<CefBrowser> parentBrowser, const CefPopupFeatures& popupFeatures, CefWindowInfo& windowInfo, const CefString& url, CefRefPtr<CefClient>& client, CefBrowserSettings& settings);
+};
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// LifeSpanHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class LoadHandler : public CefLoadHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual void OnLoadStart(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame);
+	virtual void OnLoadEnd(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, int httpStatusCode);
+	virtual bool OnLoadError(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, ErrorCode errorCode, const CefString& failedUrl, CefString& errorText);
+};
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// RequestHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class RequestHandler : public CefRequestHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual bool OnBeforeBrowse(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, NavType navType, bool isRedirect);
+};
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// DisplayHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class DisplayHandler : public CefDisplayHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual bool OnConsoleMessage(CefRefPtr<CefBrowser> browser, const CefString& message, const CefString& source, int line);
+};
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// KeyboardHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class KeyboardHandler : public CefKeyboardHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual bool OnKeyEvent(CefRefPtr<CefBrowser> browser, KeyEventType type, int code, int modifiers, bool isSystemKey);
+};
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// MenuHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class MenuHandler : public CefMenuHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual bool OnBeforeMenu(CefRefPtr<CefBrowser> browser, const MenuInfo& menuInfo);
+};
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// JSDialogHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class JSDialogHandler : public CefJSDialogHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual bool OnJSAlert(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& message);
+	virtual bool OnJSConfirm(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& message, bool& retval);
+	virtual bool OnJSPrompt(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, const CefString& message, const CefString& defaultValue, bool& retval, CefString& result);
+};
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// JSBindingHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class JSBindingHandler : public CefJSBindingHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual void OnJSBinding(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefV8Value> object);
+};
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// WinEventHandler
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class WinEventHandler : public CefWinEventHandler, public virtual ChromiumEventInfoI
+{
+public:
+	virtual void OnWndProc(CefRefPtr<CefBrowser> browser, int message, int wparam, int lparam);
+};
+
+
+/////////////////////////////////////////////////////////////////////////////////////////////
+/// ChromiumBrowserEvents
+/////////////////////////////////////////////////////////////////////////////////////////////
+
+class ChromiumBrowserEvents : 
+	public CefClient
+	, public virtual ChromiumEventInfoI
+	, public LifeSpanHandler
+	, public LoadHandler
+	, public RequestHandler
+	, public DisplayHandler
+	, public KeyboardHandler
+	, public MenuHandler
+	, public JSDialogHandler
+	, public JSBindingHandler
+	, public WinEventHandler
+{
+public:
+	ChromiumBrowserEvents(ChromiumBrowser* pParent);
+
+	void setCallBack(ChromiumDLL::ChromiumBrowserEventI* cbe);
+	void setParent(ChromiumBrowser* parent);
+
+	virtual ChromiumDLL::ChromiumBrowserEventI* GetCallback();
+	virtual void SetBrowser(CefRefPtr<CefBrowser> browser);
+	virtual CefRefPtr<CefBrowser> GetBrowser();
+	virtual void setContext(CefRefPtr<CefV8Context> context);
+
+	virtual CefRefPtr<CefLifeSpanHandler>	GetLifeSpanHandler()	{ return (CefLifeSpanHandler*)this; }
+	virtual CefRefPtr<CefLoadHandler>		GetLoadHandler()		{ return (CefLoadHandler*)this; }
+	virtual CefRefPtr<CefRequestHandler>	GetRequestHandler()		{ return (CefRequestHandler*)this; }
+	virtual CefRefPtr<CefDisplayHandler>	GetDisplayHandler()		{ return (CefDisplayHandler*)this; }
+	virtual CefRefPtr<CefKeyboardHandler>	GetKeyboardHandler()	{ return (CefKeyboardHandler*)this; }
+	virtual CefRefPtr<CefMenuHandler>		GetMenuHandler()		{ return (CefMenuHandler*)this; }
+	virtual CefRefPtr<CefJSDialogHandler>	GetJSDialogHandler()	{ return (CefJSDialogHandler*)this; }
+	virtual CefRefPtr<CefJSBindingHandler>	GetJSBindingHandler()	{ return (CefJSBindingHandler*)this; }
+	virtual CefRefPtr<CefWinEventHandler>	GetWinEventHandler()	{ return (CefWinEventHandler*)this; }
+
+private:
+	CefRefPtr<CefBrowser> m_Browser;
+	ChromiumBrowser* m_pParent;
+	ChromiumDLL::ChromiumBrowserEventI *m_pEventCallBack;
+
+	IMPLEMENT_REFCOUNTING(ChromiumBrowserEvents);
+};
+
+
+#endif //DESURA_CHROMIUMBROWSEREVENTS_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/ChromiumBrowser.h cef/cef_desura/ChromiumBrowser.h
--- cef_desura/ChromiumBrowser.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/ChromiumBrowser.h	2012-05-09 11:32:01.267658243 +0200
@@ -0,0 +1,140 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : ChromiumBrowserDll
+//   File        : ChromiumBrowser.h
+//   Description :
+//      [TODO: Write the purpose of ChromiumBrowser.h.]
+//
+//   Created On: 5/27/2010 1:52:56 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_CHROMIUMBROWSER_H
+#define DESURA_CHROMIUMBROWSER_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class ChromiumBrowserEvents;
+
+
+#ifdef OS_WIN
+	typedef HWND WIN_HANDLE;
+#else
+	typedef void* WIN_HANDLE;
+#endif
+
+class ChromiumBrowser : public ChromiumDLL::ChromiumBrowserI
+{
+public:
+	ChromiumBrowser(WIN_HANDLE handle, const char* defaultUrl);
+	~ChromiumBrowser();
+
+	void init(const char *defaultUrl);
+	virtual void onFocus();
+
+#ifdef OS_WIN
+	virtual void onPaintBg();
+	virtual void onPaint();
+	virtual void onResize();
+#else
+	void initCallback(const std::string& defaultUrl);
+	virtual void onResize(int x, int y, int width, int height);
+#endif
+
+
+	virtual void loadUrl(const char* url);
+	virtual void loadString(const char* string);
+
+	virtual void stop();
+	virtual void refresh(bool ignoreCache = false);
+	virtual void back();
+	virtual void forward();
+
+	virtual void zoomIn();
+	virtual void zoomOut();
+	virtual void zoomNormal();
+
+	virtual void print();
+	virtual void viewSource();
+
+	virtual void undo();
+	virtual void redo();
+	virtual void cut();
+	virtual void copy();
+	virtual void paste();
+	virtual void del();
+	virtual void selectall();
+
+	virtual void setEventCallback(ChromiumDLL::ChromiumBrowserEventI* cbe);
+	virtual void executeJScript(const char* code, const char* scripturl = 0, int startline = 0);
+
+	virtual void showInspector();
+	virtual void hideInspector();
+	virtual void inspectElement(int x, int y);
+
+	virtual void scroll(int x, int y, int delta, unsigned int flags);
+
+	virtual int* getBrowserHandle();
+
+	virtual void destroy()
+	{
+		delete this;
+	}
+
+	virtual ChromiumDLL::JavaScriptContextI* getJSContext();
+
+	void setBrowser(CefBrowser* browser);
+	
+	void setContext(CefRefPtr<CefV8Context> context);
+
+protected:
+	CefBrowserSettings getBrowserDefaults();
+
+private:
+	CefRefPtr<CefV8Context> m_rContext;
+	CefRefPtr<CefClient> m_rEventHandler;
+	CefBrowser* m_pBrowser;
+
+
+	WIN_HANDLE m_hFormHandle;
+	std::string m_szBuffer;
+	int m_iLastTask;
+};
+
+class TaskWrapper : public CefRefCountWrapper<CefTask>
+{
+public:
+	TaskWrapper(ChromiumDLL::CallbackI* callback)
+	{
+		m_pCallback = callback;
+	}
+
+	~TaskWrapper()
+	{
+		if (m_pCallback)
+			m_pCallback->destroy();
+	}
+
+	virtual void Execute(CefThreadId threadId)
+	{
+		if (m_pCallback)
+			m_pCallback->run();
+	}
+
+private:
+	ChromiumDLL::CallbackI* m_pCallback;
+};
+
+
+
+
+#endif //DESURA_CHROMIUMBROWSER_H
+
+
+
+
+
diff '--exclude=.svn' -aurN cef.ori/cef_desura/Cookie.cpp cef/cef_desura/Cookie.cpp
--- cef_desura/Cookie.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/Cookie.cpp	2012-05-09 11:32:01.267658243 +0200
@@ -0,0 +1,113 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : Cookie.cpp
+//   Description :
+//      [TODO: Write the purpose of Cookie.cpp.]
+//
+//   Created On: 6/7/2010 2:16:43 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class Cookie : public ChromiumDLL::CookieI
+{
+public:
+	Cookie()
+	{
+		m_rCookie.secure = false;
+		m_rCookie.httponly = false;
+	}
+
+	virtual void destroy()
+	{
+		delete this;
+	}
+
+	virtual void SetDomain(const char* domain)
+	{
+		cef_string_copy(domain, strlen(domain), &m_rCookie.domain);
+	}
+
+	virtual void SetName(const char* name)
+	{
+		cef_string_copy(name, strlen(name), &m_rCookie.name);
+	}
+
+	virtual void SetData(const char* data)
+	{
+		cef_string_copy(data, strlen(data), &m_rCookie.value);
+	}
+
+	virtual void SetPath(const char* path)
+	{
+		cef_string_copy(path, strlen(path), &m_rCookie.path);
+	}
+
+	CefCookie m_rCookie;
+};
+
+class CookieTask : public CefRefCountWrapper<CefTask>
+{
+public:
+	CookieTask(const char* url, CefCookie &cookie)
+	{
+		m_szCookie = cookie;
+
+		if (url)
+			m_szUrl = url;
+
+		m_bDel = false;
+	}
+
+	CookieTask(const char* url, const char* name)
+	{
+		if (url)
+			m_szUrl = url;
+
+		if (name)
+			m_szName = name;
+	
+		m_bDel = true;
+	}
+
+	virtual void Execute(CefThreadId threadId)
+	{
+		if (m_szName.size())
+			CefDeleteCookies(m_szUrl.c_str(), m_szName.c_str());
+		else
+			CefSetCookie(m_szUrl.c_str(), m_szCookie);
+	}
+
+	bool m_bDel;
+
+	std::string m_szUrl;
+	std::string m_szName;
+
+	CefCookie m_szCookie;
+};
+
+extern "C"
+{
+	DLLINTERFACE void CEF_DeleteCookie(const char* url, const char* name)
+	{
+		CefPostTask(TID_IO, new CookieTask(url, name));
+	}
+
+	DLLINTERFACE ChromiumDLL::CookieI* CEF_CreateCookie()
+	{
+		return new Cookie();
+	}
+
+	DLLINTERFACE void CEF_SetCookie(const char* url, ChromiumDLL::CookieI* cookie)
+	{
+		Cookie* c = (Cookie*)cookie;
+
+		if (!c)
+			return;
+
+		CefPostTask(TID_IO, new CookieTask(url, c->m_rCookie));
+	}
+}
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptContext.cpp cef/cef_desura/JavaScriptContext.cpp
--- cef_desura/JavaScriptContext.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptContext.cpp	2012-05-09 11:32:01.267658243 +0200
@@ -0,0 +1,75 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : Miscellaneous Files
+//   File        : JavaScriptContext.cpp
+//   Description :
+//      [TODO: Write the purpose of JavaScriptContext.cpp.]
+//
+//   Created On: 6/29/2011 11:48:35 AM
+//   Created By:  <mailto:>
+////////////////////////////////////////////////////////////////////////////
+
+#include "JavaScriptContext.h"
+#include "JavaScriptFactory.h"
+#include "JavaScriptObject.h"
+
+JavaScriptContext::JavaScriptContext()
+{
+	m_pContext = CefV8Context::GetCurrentContext();
+	m_uiCount = 0;
+}
+
+JavaScriptContext::JavaScriptContext(CefRefPtr<CefV8Context> context)
+{
+	m_pContext = context;
+	m_uiCount = 0;
+}
+
+void JavaScriptContext::destroy()
+{
+	delete this;
+}
+
+ChromiumDLL::JavaScriptContextI* JavaScriptContext::clone()
+{
+	return new JavaScriptContext(m_pContext);
+}
+
+void JavaScriptContext::enter()
+{
+	if (m_pContext.get())
+	{
+		m_pContext->Enter();
+		m_uiCount++;
+	}
+}
+
+void JavaScriptContext::exit()
+{
+	if (m_pContext.get())
+	{
+		m_pContext->Exit();
+		m_uiCount--;
+	}
+}
+
+ChromiumDLL::JavaScriptFactoryI* JavaScriptContext::getFactory()
+{
+	if (!m_pContext.get() || m_uiCount == 0)
+		return NULL;
+
+	return GetJSFactory();
+}
+
+CefRefPtr<CefV8Context> JavaScriptContext::getCefV8()
+{
+	return m_pContext;
+}
+
+ChromiumDLL::JSObjHandle JavaScriptContext::getGlobalObject()
+{
+	if (m_pContext.get())
+		return new JavaScriptObject(m_pContext->GetGlobal());
+
+	return NULL;
+}
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptContext.h cef/cef_desura/JavaScriptContext.h
--- cef_desura/JavaScriptContext.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptContext.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,46 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : Miscellaneous Files
+//   File        : JavaScriptContext.h
+//   Description :
+//      [TODO: Write the purpose of JavaScriptContext.h.]
+//
+//   Created On: 6/29/2011 11:48:30 AM
+//   Created By:  <mailto:>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_JAVASCRIPTCONTEXT_H
+#define DESURA_JAVASCRIPTCONTEXT_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class JavaScriptContext : public ChromiumDLL::JavaScriptContextI
+{
+public:
+	JavaScriptContext();
+	JavaScriptContext(CefRefPtr<CefV8Context> context);
+
+	virtual void destroy();
+	virtual ChromiumDLL::JavaScriptContextI* clone();
+
+	virtual void enter();
+	virtual void exit();
+
+	virtual ChromiumDLL::JavaScriptFactoryI* getFactory();
+	virtual ChromiumDLL::JSObjHandle getGlobalObject();
+
+	CefRefPtr<CefV8Context> getCefV8();
+
+private:
+	uint32 m_uiCount;
+	CefRefPtr<CefV8Context> m_pContext;
+};
+
+
+
+
+#endif //DESURA_JAVASCRIPTCONTEXT_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptExtender.cpp cef/cef_desura/JavaScriptExtender.cpp
--- cef_desura/JavaScriptExtender.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptExtender.cpp	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,179 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : JavaScriptExtender.cpp
+//   Description :
+//      [TODO: Write the purpose of JavaScriptExtender.cpp.]
+//
+//   Created On: 5/28/2010 12:36:21 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#include "JavaScriptExtender.h"
+#include "JavaScriptFactory.h"
+#include "JavaScriptObject.h"
+#include "JavaScriptContext.h"
+
+bool JavaScriptExtender::Register(ChromiumDLL::JavaScriptExtenderI* jse)
+{
+	return CefRegisterExtension(jse->getName(), jse->getRegistrationCode(), new JavaScriptExtender(jse));
+}
+
+JavaScriptExtender::JavaScriptExtender(ChromiumDLL::JavaScriptExtenderI* jse)
+{
+	m_pJSExtender = jse;
+}
+
+JavaScriptExtender::~JavaScriptExtender()
+{
+	if (m_pJSExtender)
+		m_pJSExtender->destroy();
+}
+
+bool JavaScriptExtender::Execute(const CefString& name, CefRefPtr<CefV8Value> object, const CefV8ValueList& arguments, CefRefPtr<CefV8Value>& retval, CefString& exception)
+{
+	if (!m_pJSExtender)
+		return false;
+
+	size_t argc = arguments.size();
+	ChromiumDLL::JSObjHandle *argv = new ChromiumDLL::JSObjHandle[argc];
+
+	for (size_t x=0; x<argc; x++)
+		argv[x] = new JavaScriptObject(arguments[x]);
+
+	ChromiumDLL::JavaScriptFunctionArgs args;
+
+	args.function = name.c_str();
+	args.argc = argc;
+	args.argv = argv;
+	args.object = new JavaScriptObject(object);
+	args.factory = GetJSFactory();
+	args.context = new JavaScriptContext();
+
+	ChromiumDLL::JSObjHandle jsoRes = m_pJSExtender->execute(&args);
+
+	delete [] argv;
+	args.context->destroy();
+
+	if (jsoRes.get() == NULL)
+		return false;
+
+	if (jsoRes->isException())
+	{
+		char except[255] = {0};
+		jsoRes->getStringValue(except, 255);
+
+		exception.FromASCII(except);
+		return true;
+	}
+
+	if (!jsoRes->isUndefined())
+	{
+		JavaScriptObject* jsoRetProper = (JavaScriptObject*)jsoRes.get();
+
+		if (jsoRetProper)
+			retval = jsoRetProper->getCefV8();
+	}
+
+	return true;
+}
+
+
+
+
+JavaScriptWrapper::JavaScriptWrapper()
+{
+}
+
+JavaScriptWrapper::JavaScriptWrapper(CefRefPtr<CefV8Handler> obj)
+{
+	m_pObject = obj;
+}
+
+
+void JavaScriptWrapper::destroy()
+{
+	delete this;
+}
+
+ChromiumDLL::JavaScriptExtenderI* JavaScriptWrapper::clone()
+{
+	return new JavaScriptWrapper(m_pObject);
+}
+
+ChromiumDLL::JSObjHandle JavaScriptWrapper::execute(ChromiumDLL::JavaScriptFunctionArgs *args)
+{
+	int argc = args->argc;
+	const char* function = args->function;
+
+	ChromiumDLL::JSObjHandle *argv = args->argv;
+	ChromiumDLL::JavaScriptFactoryI *factory = args->factory;
+	ChromiumDLL::JavaScriptObjectI* jso = args->object.get();
+	
+	CefRefPtr<CefV8Value> object;
+	CefRefPtr<CefV8Value> ret;
+	CefString exception;
+	CefV8ValueList arguments;
+
+	JavaScriptObject* jsoRetProper = (JavaScriptObject*)jso;
+
+	if (jsoRetProper)
+		object = jsoRetProper->getCefV8();
+
+	for (int x=0; x<argc; x++)
+	{
+		JavaScriptObject* jsoProper = (JavaScriptObject*)argv[x].get();
+
+		if (jsoProper)
+			arguments.push_back(jsoRetProper->getCefV8());
+		else
+			arguments.push_back(CefV8Value::CreateUndefined());
+	}
+
+	m_pObject->Execute(function, object, arguments, ret, exception);
+
+	std::string e(exception.c_str());
+
+	if (e.size() > 0)
+		return factory->CreateException(e.c_str());
+
+	return ChromiumDLL::JSObjHandle(new JavaScriptObject(ret));
+}
+
+
+
+const char* JavaScriptWrapper::getName()
+{
+	return NULL;
+}
+
+const char* JavaScriptWrapper::getRegistrationCode()
+{
+	return NULL;
+}
+
+CefRefPtr<CefV8Handler> JavaScriptWrapper::getCefV8Handler()
+{
+	return m_pObject;
+}
+
+CefRefPtr<CefBase> JavaScriptWrapper::getCefBase()
+{
+	CefRefPtr<CefBase> base(new V8HandleBaseWrapper(m_pObject));
+	return base;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptExtender.h cef/cef_desura/JavaScriptExtender.h
--- cef_desura/JavaScriptExtender.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptExtender.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,92 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : JavaScriptExtender.h
+//   Description :
+//      [TODO: Write the purpose of JavaScriptExtender.h.]
+//
+//   Created On: 5/28/2010 2:01:13 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_JAVASCRIPTEXTENDER_H
+#define DESURA_JAVASCRIPTEXTENDER_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class V8HandleBaseWrapper : public CefBase
+{
+public:
+	V8HandleBaseWrapper(CefRefPtr<CefV8Handler> object)
+	{
+		m_pObject = object;
+		m_iNumRef = 1;
+	}
+
+	virtual int AddRef()
+	{
+		m_iNumRef++;
+		return m_iNumRef;
+	}
+
+	virtual int Release()
+	{
+		m_iNumRef--;
+
+		if (m_iNumRef == 0)
+			delete this;
+
+		return m_iNumRef;
+	}
+
+	virtual int GetRefCt()
+	{
+		return m_iNumRef;
+	}
+
+	int m_iNumRef;
+	CefRefPtr<CefV8Handler> m_pObject;
+};
+
+
+class JavaScriptExtender : public CefRefCountWrapper<CefV8Handler>
+{
+public:
+	static bool Register(ChromiumDLL::JavaScriptExtenderI* jse);
+
+	JavaScriptExtender(ChromiumDLL::JavaScriptExtenderI* jse);
+	~JavaScriptExtender();
+
+	virtual bool Execute(const CefString& name, CefRefPtr<CefV8Value> object, const CefV8ValueList& arguments, CefRefPtr<CefV8Value>& retval, CefString& exception);
+
+private:
+	ChromiumDLL::JavaScriptExtenderI* m_pJSExtender;
+};
+
+
+
+class JavaScriptWrapper : public ChromiumDLL::JavaScriptExtenderI
+{
+public:
+	JavaScriptWrapper();
+	JavaScriptWrapper(CefRefPtr<CefV8Handler> obj);
+
+	virtual void destroy();
+	virtual ChromiumDLL::JavaScriptExtenderI* clone();
+	virtual ChromiumDLL::JSObjHandle execute(ChromiumDLL::JavaScriptFunctionArgs *args);
+
+	virtual const char* getName();
+	virtual const char* getRegistrationCode();
+
+	CefRefPtr<CefV8Handler> getCefV8Handler();
+	CefRefPtr<CefBase> getCefBase();
+
+private:
+	CefRefPtr<CefV8Handler> m_pObject;
+};
+
+#endif //DESURA_JAVASCRIPTEXTENDER_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptFactory.cpp cef/cef_desura/JavaScriptFactory.cpp
--- cef_desura/JavaScriptFactory.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptFactory.cpp	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,111 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : JavaScriptFactory.cpp
+//   Description :
+//      [TODO: Write the purpose of JavaScriptFactory.cpp.]
+//
+//   Created On: 5/28/2010 2:01:05 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#include "JavaScriptFactory.h"
+#include "include/cef.h"
+
+#include "JavaScriptExtender.h"
+#include "JavaScriptObject.h"
+
+JavaScriptFactory* g_pJavaScriptFactory = NULL;
+
+ChromiumDLL::JavaScriptFactoryI* GetJSFactory()
+{
+	if (!g_pJavaScriptFactory)
+		g_pJavaScriptFactory = new JavaScriptFactory();
+
+	return g_pJavaScriptFactory;
+}
+
+class AutoDelete
+{
+public:
+	~AutoDelete()
+	{
+		if (g_pJavaScriptFactory)
+		{
+			delete g_pJavaScriptFactory;
+			g_pJavaScriptFactory = NULL;
+		}
+	}
+};
+
+AutoDelete ad;
+
+
+
+JavaScriptFactory::JavaScriptFactory()
+{
+}
+
+JavaScriptFactory::~JavaScriptFactory()
+{
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateUndefined()
+{
+	return new JavaScriptObject(CefV8Value::CreateUndefined());
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateNull()
+{
+	return new JavaScriptObject(CefV8Value::CreateNull());
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateBool(bool value)
+{
+	return new JavaScriptObject(CefV8Value::CreateBool(value));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateInt(int value)
+{
+	return new JavaScriptObject(CefV8Value::CreateInt(value));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateDouble(double value)
+{
+	return new JavaScriptObject(CefV8Value::CreateDouble(value));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateString(const char* value)
+{
+	return new JavaScriptObject(CefV8Value::CreateString(value));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateArray()
+{
+	return new JavaScriptObject(CefV8Value::CreateArray());
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateObject()
+{
+	return new JavaScriptObject(CefV8Value::CreateObject(NULL));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateObject(void* userData)
+{
+	CefBase* base = new ObjectWrapper(userData);
+	return new JavaScriptObject(CefV8Value::CreateObject(CefRefPtr<CefBase>(base)));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateFunction(const char* name, ChromiumDLL::JavaScriptExtenderI* handler)
+{
+	CefRefPtr<CefV8Handler> e = new JavaScriptExtender(handler);
+	return new JavaScriptObject(CefV8Value::CreateFunction(name, e));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptFactory::CreateException(const char* value)
+{
+	JavaScriptObject *ret = new JavaScriptObject(CefV8Value::CreateString(value));
+	ret->setException();
+
+	return ret;
+}
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptFactory.h cef/cef_desura/JavaScriptFactory.h
--- cef_desura/JavaScriptFactory.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptFactory.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,59 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : JavaScriptFactory.h
+//   Description :
+//      [TODO: Write the purpose of JavaScriptFactory.h.]
+//
+//   Created On: 5/28/2010 2:01:09 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_JAVASCRIPTFACTORY_H
+#define DESURA_JAVASCRIPTFACTORY_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class ObjectWrapper : public CefRefCountWrapper<CefBase>
+{
+public:
+	ObjectWrapper(void* data)
+	{
+		m_pData = data;
+	}
+
+	void* getData()
+	{
+		return m_pData;
+	}
+
+private:
+	void* m_pData;
+};
+
+class JavaScriptFactory : public ChromiumDLL::JavaScriptFactoryI
+{
+public:
+	JavaScriptFactory();
+	~JavaScriptFactory();
+
+	virtual ChromiumDLL::JSObjHandle CreateUndefined();
+	virtual ChromiumDLL::JSObjHandle CreateNull();
+	virtual ChromiumDLL::JSObjHandle CreateBool(bool value);
+	virtual ChromiumDLL::JSObjHandle CreateInt(int value);
+	virtual ChromiumDLL::JSObjHandle CreateDouble(double value);
+	virtual ChromiumDLL::JSObjHandle CreateString(const char* value);
+	virtual ChromiumDLL::JSObjHandle CreateArray();
+	virtual ChromiumDLL::JSObjHandle CreateObject();
+	virtual ChromiumDLL::JSObjHandle CreateObject(void* userData);
+	virtual ChromiumDLL::JSObjHandle CreateException(const char* value);
+	virtual ChromiumDLL::JSObjHandle CreateFunction(const char* name, ChromiumDLL::JavaScriptExtenderI* handler);
+};
+
+ChromiumDLL::JavaScriptFactoryI* GetJSFactory();
+
+#endif //DESURA_JAVASCRIPTFACTORY_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptObject.cpp cef/cef_desura/JavaScriptObject.cpp
--- cef_desura/JavaScriptObject.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptObject.cpp	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,314 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : JavaScriptObject.cpp
+//   Description :
+//      [TODO: Write the purpose of JavaScriptObject.cpp.]
+//
+//   Created On: 5/28/2010 2:01:01 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#include "JavaScriptObject.h"
+#include "JavaScriptExtender.h"
+#include "JavaScriptFactory.h"
+#include "JavaScriptContext.h"
+
+int mystrncpy_s(char* dest, size_t destSize, const char* src, size_t srcSize)
+{
+	size_t size = srcSize;
+
+	if (size > destSize-1)
+		size = destSize-1;
+
+	if (!dest)
+		return 0;
+
+	strncpy(dest, src, size);
+	dest[size]=0;
+
+	return size;
+}
+
+JavaScriptObject::JavaScriptObject()
+{
+	m_iRefCount = 0;
+	m_bIsException = false;
+}
+
+JavaScriptObject::JavaScriptObject(CefRefPtr<CefV8Value> obj)
+{
+	m_pObject = obj;
+	m_iRefCount = 0;
+	m_bIsException = false;
+}
+
+JavaScriptObject::~JavaScriptObject()
+{
+}
+
+void JavaScriptObject::addRef()
+{
+	m_iRefCount++;
+}
+
+void JavaScriptObject::delRef()
+{
+	m_iRefCount--;
+
+	if (!m_iRefCount)
+		delete this;
+}
+
+void JavaScriptObject::destory()
+{
+	delete this;
+}
+
+ChromiumDLL::JavaScriptObjectI* JavaScriptObject::clone()
+{
+	return new JavaScriptObject(m_pObject);
+}
+
+bool JavaScriptObject::isUndefined()
+{
+	return m_pObject->IsUndefined();
+}
+
+bool JavaScriptObject::isNull()
+{
+	if (!m_pObject)
+		return true;
+
+	return m_pObject->IsNull();
+}
+
+bool JavaScriptObject::isBool()
+{
+	return m_pObject->IsBool();
+}
+
+bool JavaScriptObject::isInt()
+{
+	return m_pObject->IsInt();
+}
+
+bool JavaScriptObject::isDouble()
+{
+	return m_pObject->IsDouble();
+}
+
+bool JavaScriptObject::isString()
+{
+	return m_pObject->IsString();
+}
+
+bool JavaScriptObject::isObject()
+{
+	return m_pObject->IsObject();
+}
+
+bool JavaScriptObject::isArray()
+{
+	return m_pObject->IsArray();
+}
+
+bool JavaScriptObject::isFunction()
+{
+	return m_pObject->IsFunction();
+}
+
+bool JavaScriptObject::isException()
+{
+	return m_bIsException;
+}
+
+bool JavaScriptObject::getBoolValue()
+{
+	return m_pObject->GetBoolValue();
+}
+
+int JavaScriptObject::getIntValue()
+{
+	return m_pObject->GetIntValue();
+}
+
+double JavaScriptObject::getDoubleValue()
+{
+	return m_pObject->GetDoubleValue();
+}
+
+int JavaScriptObject::getStringValue(char* buff, size_t buffsize)
+{
+	std::string str = m_pObject->GetStringValue();
+
+	if (buff)
+		mystrncpy_s(buff, buffsize, str.c_str(), str.size());
+
+	return str.size();
+}
+
+bool JavaScriptObject::hasValue(const char* key)
+{
+	return m_pObject->HasValue(key);
+}
+
+bool JavaScriptObject::hasValue(int index)
+{
+	return m_pObject->HasValue(index);
+}
+
+bool JavaScriptObject::deleteValue(const char* key)
+{
+	return m_pObject->DeleteValue(key);
+}
+
+bool JavaScriptObject::deleteValue(int index)
+{
+	return m_pObject->DeleteValue(index);
+}
+
+ChromiumDLL::JSObjHandle JavaScriptObject::getValue(const char* key)
+{
+	CefRefPtr<CefV8Value> val = m_pObject->GetValue(key);
+
+	if (!val)
+		return NULL;
+
+	return ChromiumDLL::JSObjHandle(new JavaScriptObject(val));
+}
+
+ChromiumDLL::JSObjHandle JavaScriptObject::getValue(int index)
+{
+	CefRefPtr<CefV8Value> val = m_pObject->GetValue(index);
+
+	if (!val)
+		return NULL;
+
+	return ChromiumDLL::JSObjHandle(new JavaScriptObject(val));
+}
+
+bool JavaScriptObject::setValue(const char* key, ChromiumDLL::JSObjHandle value)
+{
+	JavaScriptObject* jso = (JavaScriptObject*)value.get();
+
+	if (!jso)
+		return false;
+
+	return m_pObject->SetValue(key, jso->getCefV8());
+}
+
+bool JavaScriptObject::setValue(int index, ChromiumDLL::JSObjHandle value)
+{
+	JavaScriptObject* jso = (JavaScriptObject*)value.get();
+
+	if (!jso)
+		return false;
+
+	return m_pObject->SetValue(index, jso->getCefV8());
+}
+
+int JavaScriptObject::getNumberOfKeys()
+{
+	std::vector<CefString> keys;
+	m_pObject->GetKeys(keys);
+
+	return keys.size();
+}
+
+void JavaScriptObject::getKey(int index, char* buff, size_t buffsize)
+{
+	std::vector<CefString> keys;
+	m_pObject->GetKeys(keys);
+
+	if (index >= 0 && index < (int)keys.size())
+		mystrncpy_s(buff, buffsize, keys[index].c_str(), keys[index].size());
+}
+
+int JavaScriptObject::getArrayLength()
+{
+	return m_pObject->GetArrayLength();
+}
+
+void JavaScriptObject::getFunctionName(char* buff, size_t buffsize)
+{
+	std::string name = m_pObject->GetFunctionName();
+	mystrncpy_s(buff, buffsize, name.c_str(), name.size());
+}
+
+ChromiumDLL::JavaScriptExtenderI* JavaScriptObject::getFunctionHandler()
+{
+	return new JavaScriptWrapper(m_pObject->GetFunctionHandler());
+}
+
+ChromiumDLL::JSObjHandle JavaScriptObject::executeFunction(ChromiumDLL::JavaScriptFunctionArgs *args)
+{
+	if (!isFunction())
+		return GetJSFactory()->CreateException("Not a function!");
+
+	if (!args)
+		return GetJSFactory()->CreateException("Args are null for function call");
+
+	JavaScriptContext* context = (JavaScriptContext*)args->context;
+	JavaScriptObject* jso = (JavaScriptObject*)args->object.get();
+
+	CefV8ValueList argList;
+
+	for (int x=0; x<args->argc; x++)
+	{
+		JavaScriptObject* jsoa = (JavaScriptObject*)args->argv[x].get();
+
+		if (jsoa)
+			argList.push_back(jsoa->getCefV8());
+		else
+			argList.push_back(NULL);
+	}
+
+	CefRefPtr<CefV8Value> retval;
+	CefString exception;
+
+	bool res = m_pObject->ExecuteFunctionWithContext(context->getCefV8(), jso?jso->getCefV8():NULL, argList, retval, exception);
+
+	if (!res)
+	{
+		if (exception.c_str())
+			return GetJSFactory()->CreateException(exception.c_str());
+
+		return GetJSFactory()->CreateException("failed to run function");
+	}
+
+	if (!retval)
+		return NULL;
+
+	return new JavaScriptObject(retval);
+}
+
+void* JavaScriptObject::getUserObject()
+{
+	CefRefPtr<CefBase> data = m_pObject->GetUserData();
+
+	ObjectWrapper* ow = (ObjectWrapper*)data.get();
+	
+	if (ow)
+		return ow->getData();
+
+	return NULL;
+}
+
+CefRefPtr<CefV8Value> JavaScriptObject::getCefV8()
+{
+	return m_pObject;
+}
+
+CefRefPtr<CefBase> JavaScriptObject::getCefBase()
+{
+	CefRefPtr<CefBase> base(new V8ValueBaseWrapper(m_pObject));
+	return base;
+}
+
+void JavaScriptObject::setException()
+{
+	m_bIsException = true;
+}
+
+
diff '--exclude=.svn' -aurN cef.ori/cef_desura/JavaScriptObject.h cef/cef_desura/JavaScriptObject.h
--- cef_desura/JavaScriptObject.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/JavaScriptObject.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,101 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : JavaScriptObject.h
+//   Description :
+//      [TODO: Write the purpose of JavaScriptObject.h.]
+//
+//   Created On: 5/28/2010 2:00:56 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_JAVASCRIPTOBJECT_H
+#define DESURA_JAVASCRIPTOBJECT_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class V8ValueBaseWrapper : public CefRefCountWrapper<CefBase>
+{
+public:
+	V8ValueBaseWrapper(CefRefPtr<CefV8Value> object)
+	{
+		m_pObject = object;
+	}
+
+	CefRefPtr<CefV8Value> m_pObject;
+};
+
+
+class JavaScriptObject : public ChromiumDLL::JavaScriptObjectI
+{
+public:
+	JavaScriptObject();
+	JavaScriptObject(CefRefPtr<CefV8Value> obj);
+	~JavaScriptObject();
+
+	virtual void destory();
+	virtual ChromiumDLL::JavaScriptObjectI* clone();
+
+
+	virtual bool isUndefined();
+	virtual bool isNull();
+	virtual bool isBool();
+	virtual bool isInt();
+	virtual bool isDouble();
+	virtual bool isString();
+	virtual bool isObject();
+	virtual bool isArray();
+	virtual bool isFunction();
+	virtual bool isException();
+
+	virtual bool getBoolValue();
+	virtual int getIntValue();
+	virtual double getDoubleValue();
+	virtual int getStringValue(char* buff, size_t buffsize);
+
+	virtual bool hasValue(const char* key);
+	virtual bool hasValue(int index);
+
+	virtual bool deleteValue(const char* key);
+	virtual bool deleteValue(int index);
+
+	virtual ChromiumDLL::JSObjHandle getValue(const char* key);
+	virtual ChromiumDLL::JSObjHandle getValue(int index);
+
+	virtual bool setValue(const char* key, ChromiumDLL::JSObjHandle value);
+	virtual bool setValue(int index, ChromiumDLL::JSObjHandle value);
+
+	virtual int getNumberOfKeys();
+	virtual void getKey(int index, char* buff, size_t buffsize);
+
+	virtual int getArrayLength();
+	virtual void getFunctionName(char* buff, size_t buffsize);
+
+	virtual ChromiumDLL::JavaScriptExtenderI* getFunctionHandler();
+	virtual ChromiumDLL::JSObjHandle executeFunction(ChromiumDLL::JavaScriptFunctionArgs *args);
+
+	virtual void* getUserObject();
+
+	virtual void addRef();
+	virtual void delRef();
+
+	CefRefPtr<CefV8Value> getCefV8();
+	CefRefPtr<CefBase> getCefBase();
+
+	void setException();
+
+private:
+	int m_iRefCount;
+	bool m_bIsException;
+	CefRefPtr<CefV8Value> m_pObject;
+};
+
+
+
+
+
+#endif //DESURA_JAVASCRIPTOBJECT_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/MenuInfo.cpp cef/cef_desura/MenuInfo.cpp
--- cef_desura/MenuInfo.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/MenuInfo.cpp	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,125 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : MenuInfo.cpp
+//   Description :
+//      [TODO: Write the purpose of MenuInfo.cpp.]
+//
+//   Created On: 9/18/2010 10:01:52 AM
+//   Created By:  <mailto:>
+////////////////////////////////////////////////////////////////////////////
+
+#include "MenuInfo.h"
+
+ChromiumMenuItem::ChromiumMenuItem(CefMenuHandler::MenuItem item)
+{
+	m_MenuItem = item;
+}
+
+int ChromiumMenuItem::getAction()
+{
+	return m_MenuItem.action;
+}
+
+int ChromiumMenuItem::getType()
+{
+	return m_MenuItem.type;
+}
+
+const char* ChromiumMenuItem::getLabel()
+{
+	return m_MenuItem.label.str;
+}
+
+bool ChromiumMenuItem::isEnabled()
+{
+	return m_MenuItem.enabled?true:false;
+}
+
+bool ChromiumMenuItem::isChecked()
+{
+	return m_MenuItem.checked?true:false;
+}
+
+
+
+
+ChromiumMenuInfo::ChromiumMenuInfo(CefMenuHandler::MenuInfo info, MenuHandle_t hwnd)
+{
+	m_MenuInfo = info;
+	m_Hwnd = hwnd;
+
+	for (int x=0; x<info.customSize; x++)
+	{
+		m_vMenuItems.push_back( ChromiumMenuItem(info.customItems[x]) );
+	}
+}
+
+ChromiumDLL::ChromiumMenuInfoI::TypeFlags ChromiumMenuInfo::getTypeFlags()
+{
+	return (ChromiumDLL::ChromiumMenuInfoI::TypeFlags)m_MenuInfo.typeFlags;
+}
+
+ChromiumDLL::ChromiumMenuInfoI::EditFlags ChromiumMenuInfo::getEditFlags()
+{
+	return (ChromiumDLL::ChromiumMenuInfoI::EditFlags)m_MenuInfo.editFlags;
+}
+
+void ChromiumMenuInfo::getMousePos(int* x, int* y)
+{
+	*x = m_MenuInfo.x;
+	*y = m_MenuInfo.y;
+}
+
+const char* ChromiumMenuInfo::getLinkUrl()
+{
+	return (const char*)m_MenuInfo.linkUrl.str;
+}
+
+const char* ChromiumMenuInfo::getImageUrl()
+{
+	return (const char*)m_MenuInfo.imageUrl.str;
+}
+
+const char* ChromiumMenuInfo::getPageUrl()
+{
+	return (const char*)m_MenuInfo.pageUrl.str;
+}
+
+const char* ChromiumMenuInfo::getFrameUrl()
+{
+	return (const char*)m_MenuInfo.frameUrl.str;
+}
+
+const char* ChromiumMenuInfo::getSelectionText()
+{
+	return (const char*)m_MenuInfo.selectionText.str;
+}
+
+const char* ChromiumMenuInfo::getMisSpelledWord()
+{
+	return (const char*)m_MenuInfo.misspelledWord.str;
+}
+
+const char* ChromiumMenuInfo::getSecurityInfo()
+{
+	return (const char*)m_MenuInfo.securityInfo.str;
+}
+
+int* ChromiumMenuInfo::getHWND()
+{
+	return (int*)m_Hwnd;
+}
+
+int ChromiumMenuInfo::getCustomCount()
+{
+	return m_MenuInfo.customSize;
+}
+
+ChromiumDLL::ChromiumMenuItemI* ChromiumMenuInfo::getCustomItem(size_t index)
+{
+	if (index >= m_vMenuItems.size())
+		return NULL;
+
+	return &m_vMenuItems[index];
+}
diff '--exclude=.svn' -aurN cef.ori/cef_desura/MenuInfo.h cef/cef_desura/MenuInfo.h
--- cef_desura/MenuInfo.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/MenuInfo.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,76 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : MenuInfo.h
+//   Description :
+//      [TODO: Write the purpose of MenuInfo.h.]
+//
+//   Created On: 9/18/2010 10:01:48 AM
+//   Created By:  <mailto:>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_MENUINFO_H
+#define DESURA_MENUINFO_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class ChromiumMenuItem : public ChromiumDLL::ChromiumMenuItemI
+{
+public:
+	ChromiumMenuItem(CefMenuHandler::MenuItem item);
+
+	virtual int getAction();
+	virtual int getType();
+	virtual const char* getLabel();
+
+	virtual bool isEnabled();
+	virtual bool isChecked();
+
+private:
+	CefMenuHandler::MenuItem m_MenuItem;
+};
+
+
+
+
+
+#ifdef OS_WIN
+	typedef HWND MenuHandle_t;
+#else
+	typedef void* MenuHandle_t;
+#endif
+
+class ChromiumMenuInfo : public ChromiumDLL::ChromiumMenuInfoI
+{
+public:
+	ChromiumMenuInfo(CefMenuHandler::MenuInfo info, MenuHandle_t hwnd);
+
+	virtual ChromiumDLL::ChromiumMenuInfoI::TypeFlags getTypeFlags();
+	virtual ChromiumDLL::ChromiumMenuInfoI::EditFlags getEditFlags();
+
+	virtual void getMousePos(int* x, int* y);
+
+	virtual const char* getLinkUrl();
+	virtual const char* getImageUrl();
+	virtual const char* getPageUrl();
+	virtual const char* getFrameUrl();
+	virtual const char* getSelectionText();
+	virtual const char* getMisSpelledWord();
+	virtual const char* getSecurityInfo();
+
+	virtual int getCustomCount();
+	virtual ChromiumDLL::ChromiumMenuItemI* getCustomItem(size_t index);
+
+	virtual int* getHWND();
+
+private:
+	std::vector<ChromiumMenuItem> m_vMenuItems;
+	CefMenuHandler::MenuInfo m_MenuInfo;
+	MenuHandle_t m_Hwnd;
+};
+
+#endif //DESURA_MENUINFO_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/SchemeExtender.cpp cef/cef_desura/SchemeExtender.cpp
--- cef_desura/SchemeExtender.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/SchemeExtender.cpp	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,184 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : SchemeExtender.cpp
+//   Description :
+//      [TODO: Write the purpose of SchemeExtender.cpp.]
+//
+//   Created On: 6/17/2010 4:32:23 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#include "SchemeExtender.h"
+#include "SchemeRequest.h"
+#include "SchemePost.h"
+
+#include <map>
+#include <algorithm>
+
+class SchemeHandlerFactory;
+
+std::map<std::string, SchemeHandlerFactory* > g_mSchemeExtenders;
+
+class SchemeHandlerFactory : public CefRefCountWrapper<CefSchemeHandlerFactory>
+{
+public:
+	SchemeHandlerFactory()
+	{
+	}
+
+	~SchemeHandlerFactory()
+	{
+		if (m_mSchemeMap.size() > 0)
+			g_mSchemeExtenders[m_mSchemeMap.begin()->second->getSchemeName()] = 0;
+
+		std::for_each(m_mSchemeMap.begin(), m_mSchemeMap.end(), for_each_del);
+		m_mSchemeMap.clear();
+	}
+
+	static void for_each_del(std::pair<std::string, ChromiumDLL::SchemeExtenderI*> p)
+	{
+		p.second->destroy();
+	}
+
+	CefRefPtr<CefSchemeHandler> Create(const CefString& scheme_name, CefRefPtr<CefRequest> request)
+	{
+		std::string url = request->GetURL();
+		std::vector<size_t> slashes;
+
+		for (size_t x=0; x<url.size(); x++)
+		{
+			if (url[x] == '/')
+				slashes.push_back(x);
+		}
+
+		if (slashes.size() < 3)
+			return NULL;
+
+		std::string host = url.substr(slashes[1]+1, slashes[2]-slashes[1]-1);
+		std::map<std::string, ChromiumDLL::SchemeExtenderI*>::iterator it = m_mSchemeMap.find(host);
+
+		if (it == m_mSchemeMap.end())
+			return NULL;
+
+		return new SchemeExtender(it->second->clone(scheme_name.c_str()));
+	}
+
+	bool registerScheme(ChromiumDLL::SchemeExtenderI* se)
+	{
+		if (m_mSchemeMap[se->getHostName()])
+			m_mSchemeMap[se->getHostName()]->destroy();
+
+		m_mSchemeMap[se->getHostName()] = se;
+
+		return CefRegisterSchemeHandlerFactory(se->getSchemeName(), se->getHostName(), this);
+	}
+
+private:
+	std::map<std::string, ChromiumDLL::SchemeExtenderI*> m_mSchemeMap;
+};
+
+
+
+bool SchemeExtender::Register(ChromiumDLL::SchemeExtenderI* se)
+{
+	if (!se)
+		return false;
+
+	if (!g_mSchemeExtenders[se->getSchemeName()])
+		g_mSchemeExtenders[se->getSchemeName()] = new SchemeHandlerFactory();
+
+	return g_mSchemeExtenders[se->getSchemeName()]->registerScheme(se);
+}
+
+
+
+
+
+
+
+
+SchemeExtender::SchemeExtender(ChromiumDLL::SchemeExtenderI* se)
+{
+	m_pSchemeExtender = se;
+
+	if (m_pSchemeExtender)
+		se->registerCallback(this);
+}
+
+SchemeExtender::~SchemeExtender()
+{
+	if (m_pSchemeExtender)
+		m_pSchemeExtender->destroy();
+}
+
+
+bool SchemeExtender::ProcessRequest(CefRefPtr<CefRequest> request, CefString& redirectUrl, CefRefPtr<CefSchemeHandlerCallback> callback)
+{
+	if (!m_pSchemeExtender)
+		return false;
+
+	m_Callback = callback;
+
+	SchemeRequest r(request);
+
+	bool redirect = false;
+	bool res = m_pSchemeExtender->processRequest(&r, &redirect);
+
+	if (redirect)
+	{
+		const char *szRUrl = m_pSchemeExtender->getRedirectUrl();
+
+		if (szRUrl)
+			redirectUrl.FromASCII(szRUrl);
+	}
+
+	return res;
+}
+
+void SchemeExtender::Cancel()
+{
+	if (!m_pSchemeExtender)
+		return;
+
+	m_pSchemeExtender->cancel();
+}
+
+void SchemeExtender::GetResponseHeaders(CefRefPtr<CefResponse> response, int64& response_length)
+{
+	if (!m_pSchemeExtender)
+		return;
+
+	response_length = m_pSchemeExtender->getResponseSize();
+	const char* mime = m_pSchemeExtender->getResponseMimeType();
+
+	if (mime)
+		response->SetMimeType(mime);
+}
+
+bool SchemeExtender::ReadResponse(void* data_out, int bytes_to_read, int& bytes_read, CefRefPtr<CefSchemeHandlerCallback> callback)
+{
+	if (!m_pSchemeExtender)
+		return false;
+
+	m_Callback = callback;
+	return m_pSchemeExtender->read((char*)data_out, bytes_to_read, &bytes_read);
+}
+
+void SchemeExtender::responseReady()
+{
+	if (m_Callback.get())
+		m_Callback->HeadersAvailable();
+}
+
+void SchemeExtender::dataReady()
+{
+	if (m_Callback.get())
+		m_Callback->BytesAvailable();
+}
+
+void SchemeExtender::cancel()
+{
+	if (m_Callback.get())
+		m_Callback->Cancel();
+}
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/cef_desura/SchemeExtender.h cef/cef_desura/SchemeExtender.h
--- cef_desura/SchemeExtender.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/SchemeExtender.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,47 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : SchemeExtender.h
+//   Description :
+//      [TODO: Write the purpose of SchemeExtender.h.]
+//
+//   Created On: 6/17/2010 4:32:18 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_SCHEMEEXTENDER_H
+#define DESURA_SCHEMEEXTENDER_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+
+class SchemeExtender : public CefRefCountWrapper<CefSchemeHandler>, public ChromiumDLL::SchemeCallbackI
+{
+public:
+	static bool Register(ChromiumDLL::SchemeExtenderI* se);
+
+	SchemeExtender(ChromiumDLL::SchemeExtenderI* se);
+	~SchemeExtender();
+
+
+	virtual bool ProcessRequest(CefRefPtr<CefRequest> request, CefString& redirectUrl, CefRefPtr<CefSchemeHandlerCallback> callback);
+	virtual void Cancel();
+
+	virtual void GetResponseHeaders(CefRefPtr<CefResponse> response, int64& response_length);
+	virtual bool ReadResponse(void* data_out, int bytes_to_read, int& bytes_read, CefRefPtr<CefSchemeHandlerCallback> callback);
+
+	virtual void responseReady();
+	virtual void dataReady();
+	virtual void cancel();
+
+private:
+	ChromiumDLL::SchemeExtenderI* m_pSchemeExtender;
+	CefRefPtr<CefSchemeHandlerCallback> m_Callback;
+};
+
+
+#endif //DESURA_SCHEMEEXTENDER_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/SchemePost.cpp cef/cef_desura/SchemePost.cpp
--- cef_desura/SchemePost.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/SchemePost.cpp	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,133 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : SchemePost.cpp
+//   Description :
+//      [TODO: Write the purpose of SchemePost.cpp.]
+//
+//   Created On: 6/17/2010 5:04:54 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#include "SchemePost.h"
+#include <string>
+
+#define _CRT_SECURE_NO_WARNINGS
+
+int mystrncpy_s(char* dest, size_t destSize, const char* src, size_t srcSize);
+
+PostElement::PostElement()
+{
+}
+
+PostElement::PostElement(CefRefPtr<CefPostDataElement> element)
+{
+	m_rPostElement = element;
+}
+
+bool PostElement::isFile()
+{
+	return m_rPostElement->GetType() == PDE_TYPE_BYTES;
+}
+
+bool PostElement::isBytes()
+{
+	return m_rPostElement->GetType() == PDE_TYPE_FILE;
+}
+
+void PostElement::setToEmpty()
+{
+	m_rPostElement->SetToEmpty();
+}
+
+void PostElement::setToFile(const char* fileName)
+{
+	m_rPostElement->SetToFile(fileName);
+}
+
+void PostElement::setToBytes(size_t size, const void* bytes)
+{
+	m_rPostElement->SetToBytes(size, bytes);
+}
+
+void PostElement::getFile(char *buff, size_t buffsize)
+{
+	std::string file = m_rPostElement->GetFile();
+
+	if (buff)
+		mystrncpy_s(buff, buffsize, file.c_str(), file.size());
+}
+
+size_t PostElement::getBytesCount()
+{
+	return m_rPostElement->GetBytesCount();
+}
+
+size_t PostElement::getBytes(size_t size, void* bytes)
+{
+	return m_rPostElement->GetBytes(size, bytes);
+}
+
+
+
+
+
+
+PostData::PostData()
+{
+
+}
+
+PostData::PostData(CefRefPtr<CefPostData> data)
+{
+	m_rPostData = data;
+}
+
+size_t PostData::getElementCount()
+{
+	return m_rPostData->GetElementCount();
+}
+
+ChromiumDLL::PostElementI* PostData::getElement(size_t index)
+{
+	CefPostData::ElementVector eles;
+	m_rPostData->GetElements(eles);
+
+	if (index >= eles.size())
+		return NULL;
+
+	return new PostElement(eles[index]);
+}
+
+bool PostData::removeElement(ChromiumDLL::PostElementI* element)
+{
+	PostElement *pe = (PostElement*)element;
+
+	bool res = false;
+
+	if (pe)
+		res = m_rPostData->RemoveElement(pe->getHandle());
+
+	element->destroy();
+
+	return res;
+}
+
+bool PostData::addElement(ChromiumDLL::PostElementI* element)
+{
+	PostElement *pe = (PostElement*)element;
+
+	bool res = false;
+
+	if (pe)
+		res = m_rPostData->AddElement(pe->getHandle());
+
+	element->destroy();
+
+	return res;
+}
+
+void PostData::removeElements()
+{
+	m_rPostData->RemoveElements();
+}
diff '--exclude=.svn' -aurN cef.ori/cef_desura/SchemePost.h cef/cef_desura/SchemePost.h
--- cef_desura/SchemePost.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/SchemePost.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,91 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : SchemePost.h
+//   Description :
+//      [TODO: Write the purpose of SchemePost.h.]
+//
+//   Created On: 6/17/2010 5:04:50 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_SCHEMEPOST_H
+#define DESURA_SCHEMEPOST_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class PostElement : public ChromiumDLL::PostElementI
+{
+public:
+	PostElement();
+	PostElement(CefRefPtr<CefPostDataElement> element);
+
+	//! Deletes the object. Should never be called by user code!
+	//!
+	virtual void destroy()
+	{
+		delete this;
+	}
+
+	virtual bool isFile();
+	virtual bool isBytes();
+
+	virtual void setToEmpty();
+	virtual void setToFile(const char* fileName);
+	virtual void setToBytes(size_t size, const void* bytes);
+
+	virtual void getFile(char *buff, size_t buffsize);
+
+	virtual size_t getBytesCount();
+	virtual size_t getBytes(size_t size, void* bytes);
+
+	CefRefPtr<CefPostDataElement> getHandle()
+	{
+		return m_rPostElement;
+	}
+
+private:
+	CefRefPtr<CefPostDataElement> m_rPostElement;
+};
+
+
+class PostData : public ChromiumDLL::PostDataI
+{
+public:
+	PostData();
+	PostData(CefRefPtr<CefPostData> data);
+
+
+	//! Deletes the object. Should never be called by user code!
+	//!
+	virtual void destroy()
+	{
+		delete this;
+	}
+
+	virtual size_t getElementCount();
+	virtual ChromiumDLL::PostElementI* getElement(size_t index);
+
+	virtual bool removeElement(ChromiumDLL::PostElementI* element);
+	virtual bool addElement(ChromiumDLL::PostElementI* element);
+
+	virtual void removeElements();
+
+	CefRefPtr<CefPostData> getHandle()
+	{
+		return m_rPostData;
+	}
+
+private:
+	CefRefPtr<CefPostData> m_rPostData;
+};
+
+
+
+
+
+#endif //DESURA_SCHEMEPOST_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura/SchemeRequest.cpp cef/cef_desura/SchemeRequest.cpp
--- cef_desura/SchemeRequest.cpp	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/SchemeRequest.cpp	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,124 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : SchemeRequest.cpp
+//   Description :
+//      [TODO: Write the purpose of SchemeRequest.cpp.]
+//
+//   Created On: 6/17/2010 4:48:42 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#include "SchemeRequest.h"
+#include "SchemePost.h"
+
+#define _CRT_SECURE_NO_WARNINGS
+
+int mystrncpy_s(char* dest, size_t destSize, const char* src, size_t srcSize);
+
+SchemeRequest::SchemeRequest()
+{
+
+}
+
+SchemeRequest::SchemeRequest(CefRefPtr<CefRequest> request)
+{
+	m_rRequest = request;
+}
+
+
+void SchemeRequest::getURL(char *buff, size_t buffsize)
+{
+	std::string url = m_rRequest->GetURL();
+
+	if (buff)
+		mystrncpy_s(buff, buffsize, url.c_str(), url.size());
+}
+
+void SchemeRequest::setURL(const char* url)
+{
+	m_rRequest->SetURL(url);
+}
+
+
+void SchemeRequest::getMethod(char *buff, size_t buffsize)
+{
+	std::string method = m_rRequest->GetMethod();
+
+	if (buff)
+		mystrncpy_s(buff, buffsize, method.c_str(), method.size());
+}
+
+void SchemeRequest::setMethod(const char* method)
+{
+	m_rRequest->SetMethod(method);
+}
+
+
+ChromiumDLL::PostDataI* SchemeRequest::getPostData()
+{
+	return new PostData(m_rRequest->GetPostData());
+}
+
+void SchemeRequest::setPostData(ChromiumDLL::PostDataI* postData)
+{
+	if (postData)
+	{
+		PostData* pd = (PostData*)postData;
+
+		if (pd)
+			m_rRequest->SetPostData(pd->getHandle());
+
+		postData->destroy();
+	}
+}
+
+size_t SchemeRequest::getHeaderCount()
+{
+	CefRequest::HeaderMap map;
+	m_rRequest->GetHeaderMap(map);
+
+	return map.size();
+}
+
+
+void SchemeRequest::getHeaderItem(size_t index, char *key, size_t keysize, char* data, size_t datasize)
+{
+	CefRequest::HeaderMap map;
+	m_rRequest->GetHeaderMap(map);
+
+	if (map.size() >= index)
+		return;
+
+
+	CefRequest::HeaderMap::iterator it = map.begin();
+
+	for (size_t x=0; x<index; x++)
+		;
+
+	if (it == map.end())
+		return;
+
+	if (key)
+		mystrncpy_s(key, keysize, (*it).first.c_str(), (*it).first.size());
+
+	if (data)
+		mystrncpy_s(data, datasize, (*it).second.c_str(), (*it).second.size());
+}
+
+void SchemeRequest::setHeaderItem(const char* key, const char* data)
+{
+	CefRequest::HeaderMap map;
+	m_rRequest->GetHeaderMap(map);
+
+	map[key] = data;
+
+	m_rRequest->SetHeaderMap(map);
+}
+
+void SchemeRequest::set(const char* url, const char* method, ChromiumDLL::PostDataI* postData)
+{
+	setURL(url);
+	setMethod(method);
+	setPostData(postData);
+}
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/cef_desura/SchemeRequest.h cef/cef_desura/SchemeRequest.h
--- cef_desura/SchemeRequest.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura/SchemeRequest.h	2012-05-09 11:32:01.268658243 +0200
@@ -0,0 +1,58 @@
+///////////// Copyright © 2010 Desura Pty Ltd. All rights reserved.  /////////////
+//
+//   Project     : desura_libcef_dll_wrapper
+//   File        : SchemeRequest.h
+//   Description :
+//      [TODO: Write the purpose of SchemeRequest.h.]
+//
+//   Created On: 6/17/2010 4:46:02 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_SCHEMEREQUEST_H
+#define DESURA_SCHEMEREQUEST_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include "ChromiumBrowserI.h"
+#include "include/cef.h"
+
+class SchemeRequest : public ChromiumDLL::SchemeRequestI
+{
+public:
+	SchemeRequest();
+	SchemeRequest(CefRefPtr<CefRequest> request);
+
+	virtual void destroy()
+	{
+		delete this;
+	}
+
+	virtual void getURL(char *buff, size_t buffsize);
+	virtual void setURL(const char* url);
+
+	virtual void getMethod(char *buff, size_t buffsize);
+	virtual void setMethod(const char* method);
+
+	virtual ChromiumDLL::PostDataI* getPostData();
+	virtual void setPostData(ChromiumDLL::PostDataI* postData);
+
+	virtual size_t getHeaderCount();
+
+	virtual void getHeaderItem(size_t index, char *key, size_t keysize, char* data, size_t datasize);
+	virtual void setHeaderItem(const char* key, const char* data);
+
+	virtual void set(const char* url, const char* method, ChromiumDLL::PostDataI* postData);
+
+	CefRefPtr<CefRequest> getHandle()
+	{
+		return m_rRequest;
+	}
+
+private:
+	CefRefPtr<CefRequest> m_rRequest;
+};
+
+
+#endif //DESURA_SCHEMEREQUEST_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura_includes/ChromiumBrowserI.h cef/cef_desura_includes/ChromiumBrowserI.h
--- cef_desura_includes/ChromiumBrowserI.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura_includes/ChromiumBrowserI.h	2012-05-09 11:32:01.269658243 +0200
@@ -0,0 +1,815 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : wxChromiumDll
+//   File        : wxChromiumI.h
+//   Description :
+//      [TODO: Write the purpose of wxChromiumI.h.]
+//
+//   Created On: 5/25/2010 6:12:05 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_WXCHROMIUMI_H
+#define DESURA_WXCHROMIUMI_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#include <stdlib.h>
+
+#if defined(_WIN32)
+	#ifdef BUILDING_CEF_SHARED 
+		#define DLLINTERFACE __declspec(dllexport)
+	#else
+		#define DLLINTERFACE __declspec(dllimport)
+	#endif
+#else
+	#define DLLINTERFACE __attribute__ ((visibility("default")))
+#endif
+
+namespace ChromiumDLL
+{
+	enum KeyEventType
+	{
+		KEYEVENT_RAWKEYDOWN = 0,
+		KEYEVENT_KEYDOWN,
+		KEYEVENT_KEYUP,
+		KEYEVENT_CHAR
+	};
+
+	class JSObjHandle;
+	class ChromiumBrowserI;
+	class JavaScriptExtenderI;
+	class JavaScriptFunctionArgs;
+
+	class JavaScriptFactoryI
+	{
+	public:
+		virtual JSObjHandle CreateUndefined()=0;
+		virtual JSObjHandle CreateNull()=0;
+		virtual JSObjHandle CreateBool(bool value)=0;
+		virtual JSObjHandle CreateInt(int value)=0;
+		virtual JSObjHandle CreateDouble(double value)=0;
+		virtual JSObjHandle CreateString(const char* value)=0;
+		virtual JSObjHandle CreateObject()=0;
+		virtual JSObjHandle CreateObject(void* userData)=0;
+		virtual JSObjHandle CreateException(const char* value)=0;
+		virtual JSObjHandle CreateArray()=0;
+		virtual JSObjHandle CreateFunction(const char* name, ChromiumDLL::JavaScriptExtenderI* handler)=0;
+	};
+
+	class JavaScriptContextI
+	{
+	public:
+		//! Destroy the context
+		//!
+		virtual void destroy()=0;
+
+		//! Clone the context
+		//!
+		virtual ChromiumDLL::JavaScriptContextI* clone()=0;
+
+		//! Enter context. Must be called on CEF UI thread
+		//!
+		virtual void enter()=0;
+
+		//! Exit context. Must be called on CEF UI thread after enter
+		//!
+		virtual void exit()=0;
+
+		//! only valid after enter has been called
+		//!
+		virtual ChromiumDLL::JavaScriptFactoryI* getFactory()=0;
+
+		//! Gets the current global object for this context. Only valid after enter has been called
+		//!
+		virtual JSObjHandle getGlobalObject()=0;
+	};
+
+	class JavaScriptObjectI
+	{
+	public:
+		//! Clones this object. Must call destroy once done.
+		//!
+		//! @return JSObject Clone
+		//!
+		virtual ChromiumDLL::JavaScriptObjectI* clone()=0;
+
+		//! Undefined JSObject
+		//!
+		virtual bool isUndefined() =0;
+
+		//! Null JSObject
+		//!
+		virtual bool isNull() =0;
+
+		//! Bool JSObject
+		//!
+		virtual bool isBool() =0;
+
+		//! Int JSObject
+		//!
+		virtual bool isInt() =0;
+
+		//! Double JSObject
+		//!
+		virtual bool isDouble() =0;
+
+		//! String JSObject
+		//!
+		virtual bool isString() =0;
+
+		//! Object JSObject
+		//!
+		virtual bool isObject() =0;
+
+		//! Array JSObject
+		//!
+		virtual bool isArray() =0;
+
+		//! Function JSObject
+		//!
+		virtual bool isFunction() =0;
+
+		//! Is this an exception
+		//!
+		virtual bool isException() =0;
+
+		virtual bool getBoolValue() =0;
+		virtual int getIntValue() =0;
+		virtual double getDoubleValue() =0;
+
+		//! @return String proper size
+		virtual int getStringValue(char* buff, size_t buffsize) =0;
+
+		// OBJECT METHODS - These methods are only available on objects. Arrays and
+		// functions are also objects. String- and integer-based keys can be used
+		// interchangably with the framework converting between them as necessary.
+		// Keys beginning with "Cef::" and "v8::" are reserved by the system.
+
+		// Returns true if the object has a value with the specified identifier.
+		virtual bool hasValue(const char* key) =0;
+		virtual bool hasValue(int index) =0;
+
+		// Delete the value with the specified identifier.
+		virtual bool deleteValue(const char* key) =0;
+		virtual bool deleteValue(int index) =0;
+
+		//! Returns the value with the specified identifier. 
+		virtual JSObjHandle getValue(const char* key) =0;
+		virtual JSObjHandle getValue(int index) =0;
+
+		//! Associate value with the specified identifier.
+		virtual bool setValue(const char* key, JSObjHandle value) =0;
+		virtual bool setValue(int index, JSObjHandle value) =0;
+
+		// Returns the user data, if any, specified when the object was created.
+		//virtual CefRefPtr<CefBase> GetUserData() =0;
+
+		virtual int getNumberOfKeys()=0;
+		virtual void getKey(int index, char* buff, size_t buffsize)=0;
+
+		// ARRAY METHODS - These methods are only available on arrays.
+		// Returns the number of elements in the array.
+		virtual int getArrayLength() =0;
+
+
+		// FUNCTION METHODS - These methods are only available on functions.
+		// Returns the function name.
+		virtual void getFunctionName(char* buff, size_t buffsize) =0;
+
+		//! Returns the function handler or NULL if not a CEF-created function. 
+		//! Must call destroy once done!
+		virtual ChromiumDLL::JavaScriptExtenderI* getFunctionHandler() =0;
+
+		//! executes a function.
+		//! Must call destroy once done!
+		//! args doesnt use function name, or factory
+		virtual JSObjHandle executeFunction(ChromiumDLL::JavaScriptFunctionArgs* args) =0;
+
+		virtual void addRef() =0;
+		virtual void delRef() =0;
+
+		virtual void* getUserObject() =0;
+
+		template <typename T>
+		T* getUserObject()
+		{
+			return (T*)getUserObject();
+		}
+	};
+
+	class JSObjHandle
+	{
+	public:
+		explicit JSObjHandle()
+		{
+			m_pObj = NULL;
+		}
+
+		JSObjHandle(ChromiumDLL::JavaScriptObjectI* obj)
+		{
+			m_pObj = obj;
+
+			if (m_pObj)
+				m_pObj->addRef();
+		}
+
+		JSObjHandle(const JSObjHandle& obj)
+		{
+			m_pObj = obj.m_pObj;
+			
+			if (m_pObj)
+				m_pObj->addRef();
+		}
+
+		~JSObjHandle()
+		{
+			if (m_pObj)
+				m_pObj->delRef();
+		}
+
+		ChromiumDLL::JavaScriptObjectI* operator ->() const
+		{
+			return m_pObj;
+		}
+
+		operator ChromiumDLL::JavaScriptObjectI*() const 
+		{ 
+			return m_pObj; 
+		}
+
+		JSObjHandle& operator=(const JSObjHandle& r) 
+		{
+			if (m_pObj)
+				m_pObj->delRef();
+
+			m_pObj = r.m_pObj;
+
+			if (m_pObj)
+				m_pObj->addRef();
+
+			return *this;
+		}
+
+		ChromiumDLL::JavaScriptObjectI* get()
+		{
+			return m_pObj; 
+		}
+
+	private:
+		ChromiumDLL::JavaScriptObjectI* m_pObj;
+	};
+
+	class JavaScriptFunctionArgs
+	{
+	public:
+		const char* function;
+		int argc;
+
+		ChromiumDLL::JSObjHandle object;
+		ChromiumDLL::JSObjHandle* argv;	//<< array
+		ChromiumDLL::JavaScriptFactoryI* factory;
+		ChromiumDLL::JavaScriptContextI* context;
+	};
+
+
+	class JavaScriptExtenderI
+	{
+	public:
+		//! Deletes the object. Should never be called by user code!
+		//!
+		virtual void destroy()=0;
+
+		//! Clones this Extender. Must call destroy once done.
+		//!
+		//! @return JSExtender Clone
+		//!
+		virtual ChromiumDLL::JavaScriptExtenderI* clone()=0;
+
+
+		//! Called when a javascript function is called
+		//! Can chuck std::exception
+		//!
+		//! @param factory Javascript object factory
+		//! @parma function Function name
+		//! @param object Javascript object that function was called on. Can be NULL
+		//! @param argc Number of args
+		//! @param argv Args
+		//! @return Null if not handled, JavaScriptObjectI Undefined if no return or a JavaScriptObjectI
+		//!
+		virtual JSObjHandle execute(ChromiumDLL::JavaScriptFunctionArgs* args)=0;
+
+		//! Gets the name to register the extension. i.e. "v8/test"
+		//!
+		//! @return Extension name
+		//!
+		virtual const char* getName()=0;
+
+
+		// Gets the registration javascript
+		// Functions implemented by the handler are prototyped using the
+		// keyword 'native'. The calling of a native function is restricted to the scope
+		// in which the prototype of the native function is defined.
+		//
+		// Example JavaScript extension code:
+		//
+		//   // create the 'example' global object if it doesn't already exist.
+		//   if (!example)
+		//     example = {};
+		//   // create the 'example.test' global object if it doesn't already exist.
+		//   if (!example.test)
+		//     example.test = {};
+		//   (function() {
+		//     // Define the function 'example.test.myfunction'.
+		//     example.test.myfunction = function() {
+		//       // Call CefV8Handler::Execute() with the function name 'MyFunction'
+		//       // and no arguments.
+		//       native function MyFunction();
+		//       return MyFunction();
+		//     };
+		//     // Define the getter function for parameter 'example.test.myparam'.
+		//     example.test.__defineGetter__('myparam', function() {
+		//       // Call CefV8Handler::Execute() with the function name 'GetMyParam'
+		//       // and no arguments.
+		//       native function GetMyParam();
+		//       return GetMyParam();
+		//     });
+		//     // Define the setter function for parameter 'example.test.myparam'.
+		//     example.test.__defineSetter__('myparam', function(b) {
+		//       // Call CefV8Handler::Execute() with the function name 'SetMyParam'
+		//       // and a single argument.
+		//       native function SetMyParam();
+		//       if(b) SetMyParam(b);
+		//     });
+		//
+		//     // Extension definitions can also contain normal JavaScript variables
+		//     // and functions.
+		//     var myint = 0;
+		//     example.test.increment = function() {
+		//       myint += 1;
+		//       return myint;
+		//     };
+		//   })();
+		//
+		// Example usage in the page:
+		//
+		//   // Call the function.
+		//   example.test.myfunction();
+		//   // Set the parameter.
+		//   example.test.myparam = value;
+		//   // Get the parameter.
+		//   value = example.test.myparam;
+		//   // Call another function.
+		//   example.test.increment();
+		//
+		virtual const char* getRegistrationCode()=0;
+	};
+
+	class CookieI
+	{
+	public:
+		virtual void destroy()=0;
+
+		virtual void SetDomain(const char* domain) =0;
+		virtual void SetName(const char* name) =0;
+		virtual void SetData(const char* data) =0;
+		virtual void SetPath(const char* path) =0;
+	};
+
+	class PostElementI
+	{
+	public:
+		//! Deletes the object. Should never be called by user code!
+		//!
+		virtual void destroy()=0;
+
+		virtual bool isFile()=0;
+		virtual bool isBytes()=0;
+
+		virtual void setToEmpty() =0;
+		virtual void setToFile(const char* fileName) =0;
+		virtual void setToBytes(size_t size, const void* bytes) =0;
+
+		virtual void getFile(char *buff, size_t buffsize) =0;
+
+		virtual size_t getBytesCount() =0;
+		virtual size_t getBytes(size_t size, void* bytes) =0;
+	};
+
+	class PostDataI
+	{
+	public:
+		//! Deletes the object. Should never be called by user code!
+		//!
+		virtual void destroy()=0;
+
+		virtual size_t getElementCount() =0;
+		virtual PostElementI* getElement(size_t index)=0;
+
+		virtual bool removeElement(PostElementI* element) =0;
+		virtual bool addElement(PostElementI* element) =0;
+
+		virtual void removeElements() =0;
+	};
+
+	class SchemeRequestI
+	{
+	public:
+		//! Deletes the object. Should never be called by user code!
+		//!
+		virtual void destroy()=0;
+
+		virtual void getURL(char *buff, size_t buffsize) =0;
+		virtual void setURL(const char* url) =0;
+
+		virtual void getMethod(char *buff, size_t buffsize) =0;
+		virtual void setMethod(const char* method) =0;
+
+		virtual PostDataI* getPostData() =0;
+		virtual void setPostData(PostDataI* postData) =0;
+
+		virtual size_t getHeaderCount()=0;
+
+		virtual void getHeaderItem(size_t index, char *key, size_t keysize, char* data, size_t datasize) =0;
+		virtual void setHeaderItem(const char* key, const char* data) =0;
+
+		virtual void set(const char* url, const char* method, PostDataI* postData) =0;
+	};
+
+	class SchemeCallbackI
+	{
+	public:
+		virtual void responseReady()=0;
+		virtual void dataReady()=0;
+		virtual void cancel()=0;
+	};
+
+	class SchemeExtenderI
+	{
+	public:
+		virtual void destroy()=0;
+		virtual SchemeExtenderI* clone(const char* schemeName)=0;
+
+		virtual const char* getSchemeName()=0;
+		virtual const char* getHostName()=0;
+
+		//! Processes the request. Call response ready when ready to reply
+		//! Set redirect to true to redirect to another url (read from getRedirectUrl)
+		//! 
+		virtual bool processRequest(SchemeRequestI* request, bool* redirect)=0;
+
+		//! Called when response is ready
+		//!
+		virtual size_t getResponseSize()=0;
+
+		//! Return NULL to use default
+		virtual const char* getResponseMimeType()=0;
+
+		//! Return NULL to cancel redirect
+		virtual const char* getRedirectUrl()=0;
+
+		//! Return false to cancel read
+		//! Set readSize to zero and return true to wait for callback
+		//! 
+		virtual bool read(char* buffer, int size, int* readSize)=0;
+
+		//! Cancel request
+		//!
+		virtual void cancel()=0;
+
+		//! Called so the class can save an instance to the SchemeCallback
+		//!
+		//! @param callback
+		//!
+		virtual void registerCallback(SchemeCallbackI* callback)=0;
+	};
+
+
+	class FunctionArgI
+	{
+	public:
+		virtual void setBool(bool value)=0;
+		virtual void setInt(int value)=0;
+		virtual void setDouble(double value)=0;
+		virtual void setString(const char* value)=0;
+		virtual void setNull()=0;
+		virtual void setVoid()=0;
+
+		virtual bool getBool()=0;
+		virtual int getInt()=0;
+		virtual double getDouble()=0;
+		virtual void getString(char* buff, size_t buffsize)=0;
+
+		virtual bool isBool()=0;
+		virtual bool isInt()=0;
+		virtual bool isDouble()=0;
+		virtual bool isString()=0;
+		virtual bool isNull()=0;
+		virtual bool isVoid()=0;
+	};
+
+
+	class FunctionArgsI
+	{
+	public:
+		virtual size_t getCount()=0;
+		virtual FunctionArgI* getArg(size_t index)=0;
+	};
+
+
+
+	class FunctionDelegateI
+	{
+	public:
+		virtual void destroy()=0;
+		virtual void operator()(ChromiumDLL::FunctionArgsI* args, ChromiumDLL::FunctionArgI* result)=0;
+	};
+
+	template <class T>
+	class FunctionDelegate : public FunctionDelegateI
+	{
+	public:
+		typedef void (T::*JSItemFunction)(ChromiumDLL::FunctionArgsI*, ChromiumDLL::FunctionArgI*);
+
+		FunctionDelegate(T *t, JSItemFunction function)
+		{
+			m_pItem = t;
+			m_pFunction = function;
+		}
+
+		void operator()(ChromiumDLL::FunctionArgsI* args, ChromiumDLL::FunctionArgI* result)
+		{
+			return (*m_pItem.*m_pFunction)(args, result);
+		}
+
+		virtual void destroy()
+		{
+			delete this;
+		}
+
+	private:
+		T* m_pItem;
+		JSItemFunction m_pFunction;
+	};
+
+	template <class TObj>
+	FunctionDelegateI* newFunctionDelegate(TObj* pObj, void (TObj::*function)(ChromiumDLL::FunctionArgsI*, ChromiumDLL::FunctionArgI*))
+	{
+		return new FunctionDelegate<TObj>(pObj, function);
+	}
+
+
+	class FunctionRegisterI
+	{
+	public:
+		virtual void registerFunction(const char* name, FunctionDelegateI* delegate)=0;
+	};
+
+	class ChromiumMenuItemI
+	{
+	public:
+		enum TypeFlags
+		{
+			MENUITEM_SEPERATOR = 1,
+			MENUITEM_OPTION,
+			MENUITEM_CHECKABLEOPTION,
+			MENUITEM_GROUP,
+		};
+
+		virtual int getAction()=0;
+		virtual int getType()=0;
+		virtual const char* getLabel()=0;
+
+		virtual bool isEnabled()=0;
+		virtual bool isChecked()=0;
+	};
+
+	class ChromiumMenuInfoI
+	{
+	public:
+		enum TypeFlags
+		{
+		  // No node is selected
+		  MENUTYPE_NONE = 0x0,
+		  // The top page is selected
+		  MENUTYPE_PAGE = 0x1,
+		  // A subframe page is selected
+		  MENUTYPE_FRAME = 0x2,
+		  // A link is selected
+		  MENUTYPE_LINK = 0x4,
+		  // An image is selected
+		  MENUTYPE_IMAGE = 0x8,
+		  // There is a textual or mixed selection that is selected
+		  MENUTYPE_SELECTION = 0x10,
+		  // An editable element is selected
+		  MENUTYPE_EDITABLE = 0x20,
+		  // A misspelled word is selected
+		  MENUTYPE_MISSPELLED_WORD = 0x40,
+		  // A video node is selected
+		  MENUTYPE_VIDEO = 0x80,
+		  // A video node is selected
+		  MENUTYPE_AUDIO = 0x100,
+		};
+
+		enum EditFlags
+		{
+		  MENU_CAN_DO_NONE = 0x0,
+		  MENU_CAN_UNDO = 0x1,
+		  MENU_CAN_REDO = 0x2,
+		  MENU_CAN_CUT = 0x4,
+		  MENU_CAN_COPY = 0x8,
+		  MENU_CAN_PASTE = 0x10,
+		  MENU_CAN_DELETE = 0x20,
+		  MENU_CAN_SELECT_ALL = 0x40,
+		  MENU_CAN_TRANSLATE = 0x80,
+		  MENU_CAN_GO_FORWARD = 0x10000000,
+		  MENU_CAN_GO_BACK = 0x20000000,
+		};
+
+		virtual TypeFlags getTypeFlags()=0;
+		virtual EditFlags getEditFlags()=0;
+
+		virtual void getMousePos(int* x, int* y)=0;
+
+		virtual const char* getLinkUrl()=0;
+		virtual const char* getImageUrl()=0;
+		virtual const char* getPageUrl()=0;
+		virtual const char* getFrameUrl()=0;
+		virtual const char* getSelectionText()=0;
+		virtual const char* getMisSpelledWord()=0;
+		virtual const char* getSecurityInfo()=0;
+
+		virtual int getCustomCount()=0;
+		virtual ChromiumMenuItemI* getCustomItem(size_t index)=0;
+
+		virtual int* getHWND()=0;
+	};
+
+	class ChromiumBrowserEventI
+	{
+	public:
+		//! Before browser loads a new url. Return false to stop
+		//!
+		//! @param url Url of new page 
+		//! @param isMain Is this loading on the main page or loading in an iframe/resource
+		//! @return true to continue, false to stop
+		//!
+		virtual bool onNavigateUrl(const char* url, bool isMain)=0;
+
+		//! When a page starts loading
+		//!
+		virtual void onPageLoadStart()=0;
+
+		//! When a page finishes loading
+		//!
+		virtual void onPageLoadEnd()=0;
+
+		//! Show a javascript Alert Box
+		//!
+		//! @param msg Message to show
+		//! @return True if handled, false to show default
+		//!
+		virtual bool onJScriptAlert(const char* msg)=0;
+
+		//! Show a javascript Confirm Box
+		//!
+		//! @param msg Message to show
+		//! @param result Result of confirm
+		//! @return True if handled, false to show default
+		//!
+		virtual bool onJScriptConfirm(const char* msg, bool* result)=0;
+
+		//! Show a javascript Alert
+		//!
+		//! @param msg Message to show
+		//! @return True if handled, false to show default
+		//!
+		virtual bool onJScriptPrompt(const char* msg, const char* defualtVal, bool* handled, char result[255])=0;
+
+		//! When a key is pressed
+		//!
+		//! @param type is the type of keyboard event.
+		//! @param code is the windows scan-code for the event.
+		//! @param modifiers is a set of bit-flags describing any pressed modifier keys.
+		//! @param isSystemKey is set if Windows considers this a 'system key' message;
+		//   (see http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx)
+		//! @return True if handled, false for default handling
+		//!
+		virtual bool onKeyEvent(KeyEventType type, int code, int modifiers, bool isSystemKey)=0;
+
+
+		//Logs a console message
+		virtual void onLogConsoleMsg(const char* message, const char* source, int line)=0;
+
+		virtual void launchLink(const char* url)=0;
+
+		//! When a page fails to load you can return a custom error page into buff with max size size
+		//! 
+		//! @param errorCode Code of error
+		//! @param url Url error happened on
+		//! @param buff Buff to save response into
+		//! @param size Max buffer size
+		//! 
+		//! @return true if handled, false if not
+		//!
+		virtual bool onLoadError(const char* errorMsg, const char* url, char* buff, size_t size)=0;
+
+
+		virtual void HandleWndProc(int message, int wparam, int lparam)=0;
+		virtual bool HandlePopupMenu(ChromiumMenuInfoI* menuInfo)=0;
+
+
+		virtual void HandleJSBinding(JavaScriptObjectI* jsObject, JavaScriptFactoryI* factory)=0;
+	};
+
+	class ChromiumBrowserI
+	{
+	public:
+		virtual void destroy()=0;
+
+		virtual void onFocus()=0;
+
+#ifdef _WIN32
+		virtual void onPaintBg()=0;
+		virtual void onPaint()=0;
+		virtual void onResize()=0;
+#else
+		virtual void onResize(int x, int y, int width, int height)=0;
+#endif
+
+		virtual void loadUrl(const char* url)=0;
+		virtual void loadString(const char* string)=0;
+
+		virtual void stop()=0;
+		virtual void refresh(bool ignoreCache = false)=0;
+		virtual void back()=0;
+		virtual void forward()=0;
+
+		virtual void zoomIn()=0;
+		virtual void zoomOut()=0;
+		virtual void zoomNormal()=0;
+
+		virtual void print()=0;
+		virtual void viewSource()=0;
+
+		virtual void undo()=0;
+		virtual void redo()=0;
+		virtual void cut()=0;
+		virtual void copy()=0;
+		virtual void paste()=0;
+		virtual void del()=0;
+		virtual void selectall()=0;
+
+		virtual void setEventCallback(ChromiumBrowserEventI* cbe)=0;
+		virtual void executeJScript(const char* code, const char* scripturl = 0, int startline = 0)=0;
+
+		virtual void showInspector()=0;
+		virtual void hideInspector()=0;
+		virtual void inspectElement(int x, int y)=0;
+
+		virtual void scroll(int x, int y, int delta, unsigned int flags)=0;
+
+		virtual int* getBrowserHandle()=0;
+		virtual ChromiumDLL::JavaScriptContextI* getJSContext()=0;
+	};
+
+
+	typedef bool (*LogMessageHandlerFn)(int severity, const char* str);
+
+	class CallbackI
+	{
+	public:
+		virtual void destroy()=0;
+		virtual void run()=0;
+	};
+}
+
+
+#ifndef CEF_IGNORE_FUNCTIONS 
+#ifdef WIN32
+extern "C"
+{
+	DLLINTERFACE void CEF_DoMsgLoop();
+	DLLINTERFACE bool CEF_Init(bool threaded, const char* cachePath, const char* logPath, const char* userAgent);
+	DLLINTERFACE void CEF_Stop();
+
+	DLLINTERFACE bool CEF_RegisterJSExtender(ChromiumDLL::JavaScriptExtenderI* extender);
+	DLLINTERFACE bool CEF_RegisterSchemeExtender(ChromiumDLL::SchemeExtenderI* extender);
+
+	DLLINTERFACE void CEF_DeleteCookie(const char* url, const char* name);
+	DLLINTERFACE ChromiumDLL::CookieI* CEF_CreateCookie();
+	DLLINTERFACE void CEF_SetCookie(const char* ulr, ChromiumDLL::CookieI* cookie);
+
+	// Form handle as HWND
+	DLLINTERFACE ChromiumDLL::ChromiumBrowserI* CEF_NewChromiumBrowser(int* formHandle, const char *name,  const char* defaultUrl);
+
+	// Return true to handle msg
+	DLLINTERFACE void CEF_SetLogHandler(ChromiumDLL::LogMessageHandlerFn logFn);
+
+	DLLINTERFACE void CEF_PostCallback(ChromiumDLL::CallbackI* callback);
+}
+#endif // TODO LINUX
+#endif
+
+#endif //DESURA_WXCHROMIUMI_H
diff '--exclude=.svn' -aurN cef.ori/cef_desura_includes/SharedObjectLoader.h cef/cef_desura_includes/SharedObjectLoader.h
--- cef_desura_includes/SharedObjectLoader.h	1970-01-01 01:00:00.000000000 +0100
+++ cef_desura_includes/SharedObjectLoader.h	2012-05-09 11:32:01.269658243 +0200
@@ -0,0 +1,122 @@
+///////////// Copyright © 2010 DesuraNet. All rights reserved. /////////////
+//
+//   Project     : mcf_util
+//   File        : SharedObjectLoader.h
+//   Description :
+//      [TODO: Write the purpose of SharedObjectLoader.h.]
+//
+//   Created On: 7/18/2010 5:49:15 PM
+//   Created By: Mark Chandler <mailto:mark@moddb.com>
+////////////////////////////////////////////////////////////////////////////
+
+#ifndef DESURA_SHAREDOBJECTLOADER_H
+#define DESURA_SHAREDOBJECTLOADER_H
+#ifdef _WIN32
+#pragma once
+#endif
+
+#ifdef WIN32
+	#include <Windows.h>
+#else
+    #include <dlfcn.h>
+#endif
+
+#ifdef NIX
+#define OS_LINUX
+#endif
+
+class SharedObjectLoader
+{
+public:
+#ifdef OS_LINUX
+    typedef void* SOHANDLE;
+#else
+	typedef HINSTANCE SOHANDLE;
+#endif
+
+	SharedObjectLoader()
+	{
+		m_hHandle = NULL;
+		m_bHasFailed = false;
+	}
+
+	SharedObjectLoader(const SharedObjectLoader& sol)
+	{
+		m_hHandle = sol.m_hHandle;
+		m_bHasFailed = sol.m_bHasFailed;
+
+		sol.m_hHandle = NULL;
+		sol.m_bHasFailed = false;
+	}
+
+	~SharedObjectLoader()
+	{
+		unload();
+	}
+
+	bool load(const char* module)
+	{
+		if (m_hHandle)
+			unload();
+
+		m_bHasFailed = false;
+
+#ifdef OS_LINUX
+		m_hHandle = dlopen(module, RTLD_LAZY);
+#else
+		m_hHandle = LoadLibraryA(module);
+#endif
+		return m_hHandle?true:false;
+	}
+
+	void unload()
+	{
+		if (!m_hHandle)
+			return;
+
+#ifdef NIX
+		dlclose(m_hHandle);
+#else
+		FreeLibrary(m_hHandle);
+#endif
+
+		m_hHandle = NULL;
+	}
+
+	template <typename T>
+	T getFunction(const char* functionName)
+	{
+		if (!m_hHandle)
+			return NULL;
+#ifdef NIX
+		T fun = (T)dlsym(m_hHandle, functionName);
+#else
+		T fun = (T)GetProcAddress(m_hHandle, functionName);
+#endif
+
+		if (!fun)
+			m_bHasFailed = true;
+
+		return fun;
+	}
+
+	bool hasFailed()
+	{
+		return m_bHasFailed;
+	}
+
+	SOHANDLE handle()
+	{
+		return m_hHandle;
+	}
+
+private:
+	mutable bool m_bHasFailed;
+#ifdef WIN32
+	mutable SOHANDLE m_hHandle;
+#else
+	mutable void* m_hHandle;
+#endif
+};
+
+#endif //DESURA_SHAREDOBJECTLOADER_H
diff '--exclude=.svn' -aurN cef.ori/cef.gypi cef/cef.gypi
--- cef.gypi	2012-05-09 11:27:19.093674201 +0200
+++ cef.gypi	2012-05-09 11:32:01.267658243 +0200
@@ -11,6 +11,7 @@
       }, { # OS!="win"
         'cef_directory' : '<!(echo $CEF_DIRECTORY)',
       }],
-    ]
+    ],
+	'use_system_zlib':0,
   },
 }
diff '--exclude=.svn' -aurN cef.ori/cef_resources.grd cef/cef_resources.grd
--- cef_resources.grd	1970-01-01 01:00:00.000000000 +0100
+++ cef_resources.grd	2012-05-09 11:32:01.269658243 +0200
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<grit latest_public_release="0" current_release="1">
+  <outputs>
+    <output filename="grit/cef_resources.h" type="rc_header">
+      <emit emit_type='prepend'></emit>
+    </output>
+    <output filename="cef_resources.pak" type="data_package" />
+  </outputs>
+  <release seq="1">
+    <includes>
+      <include name="IDR_AHEM_FONT" file="resources\AHEM____.TTF" type="BINDATA" />
+      <include name="IDR_BROKENIMAGE" file="resources\missingImage.gif" type="BINDATA" />
+      <include name="IDR_TEXTAREA_RESIZER" file="resources\textAreaResizeCorner.png" type="BINDATA" />
+    </includes>
+  </release>
+</grit>
diff '--exclude=.svn' -aurN cef.ori/include/cef_capi.h cef/include/cef_capi.h
--- include/cef_capi.h	2012-05-09 11:27:17.734674278 +0200
+++ include/cef_capi.h	2012-05-09 11:32:01.270658243 +0200
@@ -41,6 +41,8 @@
 extern "C" {
 #endif
 
+#include <inttypes.h>
+
 #include "internal/cef_export.h"
 #include "internal/cef_string.h"
 #include "internal/cef_string_list.h"
@@ -344,7 +346,7 @@
 // Check that the structure |s|, which is defined with a cef_base_t member named
 // |base|, is large enough to contain the specified member |f|.
 #define CEF_MEMBER_EXISTS(s, f)   \
-  ((int)&((s)->f) - (int)(s) + sizeof((s)->f) <= (s)->base.size)
+  ((uintptr_t)&((s)->f) - (uintptr_t)(s) + sizeof((s)->f) <= (s)->base.size)
 
 #define CEF_MEMBER_MISSING(s, f)  (!CEF_MEMBER_EXISTS(s, f) || !((s)->f))
 
diff '--exclude=.svn' -aurN cef.ori/include/cef.h cef/include/cef.h
--- include/cef.h	2012-05-09 11:27:17.735674278 +0200
+++ include/cef.h	2012-05-09 11:32:01.269658243 +0200
@@ -119,6 +121,10 @@
 /*--cef()--*/
 void CefRunMessageLoop();
 
+// Registers chrome flash plugin
+/*--cef()--*/ 
+void CefRegisterFlashPlugin(const std::string& dllName);
+
 ///
 // Register a new V8 extension with the specified JavaScript extension code and
 // handler. Functions implemented by the handler are prototyped using the
@@ -430,21 +436,50 @@
   ///
   // Atomic reference increment.
   ///
-  int AddRef() {
+  virtual int AddRef() {
+    return CefAtomicIncrement(&refct_);
+  }
+
+  ///
+  // Atomic reference decrement. Delete the object when no references remain.
+  ///
+  virtual int Release() {
+    return CefAtomicDecrement(&refct_);
+  }
+
+  ///
+  // Return the current number of references.
+  ///
+  virtual int GetRefCt() { return refct_; }
+
+private:
+  long refct_;
+};
+
+template <typename T>
+class CefRefCountWrapper : public T
+{
+public:
+  CefRefCountWrapper() : refct_(0) {}
+
+  ///
+  // Atomic reference increment.
+  ///
+  virtual int AddRef() {
     return CefAtomicIncrement(&refct_);
   }
 
   ///
   // Atomic reference decrement. Delete the object when no references remain.
   ///
-  int Release() {
+  virtual int Release() {
     return CefAtomicDecrement(&refct_);
   }
 
   ///
   // Return the current number of references.
   ///
-  int GetRefCt() { return refct_; }
+  virtual int GetRefCt() { return refct_; }
 
 private:
   long refct_;
@@ -701,6 +736,16 @@
   /*--cef()--*/
   virtual void SetZoomLevel(double zoomLevel) =0;
 
+#ifndef IGNORE_DESURA
+  // Inspect a element. Parse -1, -1 for any
+  /*--cef()--*/
+  virtual void InspectElement(int x, int y) =0; 
+
+  // Handle mouse rotation
+  /*--cef()--*/
+  virtual void MouseWheelEvent(int x, int y, int delta, unsigned int flags) =0;
+#endif
+
   ///
   // Open developer tools in its own window.
   ///
@@ -951,6 +996,20 @@
   /*--cef()--*/
   virtual CefRefPtr<CefBrowser> GetBrowser() =0;
 
+#ifndef IGNORE_DESURA
+  // zoom in
+  /*--cef()--*/
+  virtual void ZoomIn() =0;
+
+  // Zoom out
+  /*--cef()--*/
+  virtual void ZoomOut() =0;
+
+  // Set zoom to default
+  /*--cef()--*/
+  virtual void ZoomNormal() =0;
+#endif
+
   ///
   // Visit the DOM document.
   ///
@@ -1304,6 +1363,7 @@
 public:
   typedef cef_handler_menuid_t MenuId;
   typedef cef_handler_menuinfo_t MenuInfo;
+  typedef cef_handler_menuitem_t MenuItem;
 
   ///
   // Called before a context menu is displayed. Return false to display the
@@ -1581,6 +1641,20 @@
 
 
 ///
+// Implement this interface to handle window proc events. The methods of
+// this class will be called on the UI thread.
+///
+/*--cef(source=client)--*/
+class CefWinEventHandler : public virtual CefBase
+{
+public:
+  ///
+  /*--cef()--*/
+  virtual void OnWndProc(CefRefPtr<CefBrowser> browser, int message, int wparam, int lparam){}
+};
+
+
+///
 // Implement this interface to provide handler implementations.
 ///
 /*--cef(source=client)--*/
@@ -1664,6 +1738,12 @@
   ///
   /*--cef()--*/
   virtual CefRefPtr<CefDragHandler> GetDragHandler() { return NULL; }
+
+  ///
+  // Return the handler for windows events.
+  ///
+  /*--cef()--*/
+  virtual CefRefPtr<CefWinEventHandler>	GetWinEventHandler() { return NULL; }
 };
 
 
diff '--exclude=.svn' -aurN cef.ori/include/internal/cef_string.h cef/include/internal/cef_string.h
--- include/internal/cef_string.h	2012-05-09 11:27:17.743674277 +0200
+++ include/internal/cef_string.h	2012-05-09 11:32:01.271658243 +0200
@@ -35,10 +35,10 @@
 // If you change the default you MUST recompile all of CEF.
 
 // Build with the UTF8 string type as default.
-//#define CEF_STRING_TYPE_UTF8 1
+#define CEF_STRING_TYPE_UTF8 1
 
 // Build with the UTF16 string type as default.
-#define CEF_STRING_TYPE_UTF16 1
+//#define CEF_STRING_TYPE_UTF16 1
 
 // Build with the wide string type as default.
 //#define CEF_STRING_TYPE_WIDE 1
diff '--exclude=.svn' -aurN cef.ori/include/internal/cef_types.h cef/include/internal/cef_types.h
--- include/internal/cef_types.h	2012-05-09 11:27:17.742674276 +0200
+++ include/internal/cef_types.h	2012-05-09 11:32:01.610658223 +0200
@@ -590,6 +591,26 @@
   V8_PROPERTY_ATTRIBUTE_DONTDELETE = 1 << 2   // Not configurable
 };
 
+typedef struct _cef_handler_menuitem_t
+{
+  int action;
+  int type;
+  int enabled;
+  int checked;
+
+  cef_string_t label;
+} cef_handler_menuitem_t;
+
+// The cef_handler_menuinfo_t typeFlags value will be a combination of the
+// following values.
+enum cef_handler_menuitemtype_t
+{
+  MENUITEMTYPE_SEPERATOR = 1,
+  MENUITEMTYPE_OPTION,
+  MENUITEMTYPE_CHECKABLEOPTION,
+  MENUITEMTYPE_GROUP,
+};
+
 ///
 // Structure representing menu information.
 ///
@@ -620,6 +641,10 @@
   int editFlags;
 
   cef_string_t securityInfo;
+
+  int customSize;
+  cef_handler_menuitem_t* customItems;
+
 } cef_handler_menuinfo_t;
 
 ///
@@ -710,6 +735,10 @@
   MENU_ID_SELECTALL = 26,
   MENU_ID_PRINT = 30,
   MENU_ID_VIEWSOURCE = 31,
+  MENU_ID_ZOOM_IN  = 33,
+  MENU_ID_ZOOM_OUT = 34,
+  MENU_ID_ZOOM_NORMAL = 35,
+  MENU_ID_CUSTOM = 100, //used for custom menu items from js. Needs to be last
 };
 
 enum cef_paint_element_type_t
diff '--exclude=.svn' -aurN cef.ori/include/internal/cef_types_linux.h cef/include/internal/cef_types_linux.h
--- include/internal/cef_types_linux.h	2012-05-09 11:27:17.737674277 +0200
+++ include/internal/cef_types_linux.h	2012-05-09 11:32:01.618658223 +0200
@@ -50,6 +50,11 @@
 {
   // Pointer for the parent GtkBox widget.
   cef_window_handle_t m_ParentWidget;
+
+  int m_x;
+  int m_y;
+  int m_nWidth;
+  int m_nHeight;
   
   // Pointer for the new browser widget.
   cef_window_handle_t m_Widget;
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_impl.cc cef/libcef/browser_impl.cc
--- libcef/browser_impl.cc	2012-05-09 11:27:19.075674202 +0200
+++ libcef/browser_impl.cc	2012-05-09 11:32:01.624658223 +0200
@@ -33,6 +33,10 @@
 #include "webkit/plugins/npapi/webplugin_impl.h"
 #include "webkit/glue/webkit_glue.h"
 
+#if defined(OS_WIN)
+#include "third_party/WebKit/Source/WebKit/chromium/public/win/WebInputEventFactory.h"
+#endif
+
 using WebKit::WebDocument;
 using WebKit::WebFrame;
 using WebKit::WebHTTPBody;
@@ -519,6 +523,46 @@
   return CefString();
 }
 
+void CefBrowserImpl::ZoomOut(CefRefPtr<CefFrame> frame)
+{
+  frame->AddRef();
+  CefThread::PostTask(CefThread::UI, FROM_HERE, NewRunnableMethod(this,
+      &CefBrowserImpl::UIT_HandleAction, MENU_ID_ZOOM_OUT, frame.get()));
+}
+
+void CefBrowserImpl::ZoomIn(CefRefPtr<CefFrame> frame)
+{
+  frame->AddRef();
+  CefThread::PostTask(CefThread::UI, FROM_HERE, NewRunnableMethod(this,
+      &CefBrowserImpl::UIT_HandleAction, MENU_ID_ZOOM_IN, frame.get()));
+}
+
+void CefBrowserImpl::ZoomNormal(CefRefPtr<CefFrame> frame)
+{
+  frame->AddRef();
+  CefThread::PostTask(CefThread::UI, FROM_HERE, NewRunnableMethod(this,
+      &CefBrowserImpl::UIT_HandleAction, MENU_ID_ZOOM_NORMAL, frame.get()));
+}
+ 
+ void CefBrowserImpl::CustomContextMenuAction(int action)
+ {
+  CefThread::PostTask(CefThread::UI, FROM_HERE, NewRunnableMethod(this,
+      &CefBrowserImpl::UIT_CustomContextMenuAction, action));
+ }
+ 
+ void CefBrowserImpl::InspectElement(int x, int y)
+ {
+  CefThread::PostTask(CefThread::UI, FROM_HERE, NewRunnableMethod(this,
+      &CefBrowserImpl::UIT_InspectElement, x, y));
+ }
+
+ void CefBrowserImpl::MouseWheelEvent(int x, int y, int delta, unsigned int flags)
+ {
+  CefThread::PostTask(CefThread::UI, FROM_HERE, NewRunnableMethod(this,
+      &CefBrowserImpl::UIT_MouseWheelEvent, x, y, delta, flags));
+ }
+
+
 CefString CefBrowserImpl::GetText(CefRefPtr<CefFrame> frame)
 {
   // Verify that this method is being called on the UI thread.
@@ -666,6 +710,9 @@
 
 WebFrame* CefBrowserImpl::UIT_GetWebFrame(CefRefPtr<CefFrame> frame)
 {
+  if (!frame)
+  	return NULL;
+  	
   REQUIRE_UIT();
 
   WebView* view = UIT_GetWebView();
@@ -719,8 +766,20 @@
     dev_tools_agent_.reset();
   }
 
+  //this happens when webviewhost gets reset on linux
+#ifndef OS_LINUX
   // Clean up anything associated with the WebViewHost widget.
-  UIT_GetWebViewHost()->webwidget()->close();
+  WebViewHost* webViewHost = UIT_GetWebViewHost();
+  
+  if (webViewHost)
+  {
+    WebKit::WebWidget* webWidget = webViewHost->webwidget();
+    
+    if (webWidget)
+      webWidget->close();
+  }
+#endif
+
   webviewhost_.reset();
 
   // Remove the reference added in UIT_CreateBrowser().
@@ -1155,14 +1214,27 @@
   delegate_->show(policy);
 }
 
-void CefBrowserImpl::UIT_HandleActionView(cef_handler_menuid_t menuId)
+bool CefBrowserImpl::UIT_HandleActionView(cef_handler_menuid_t menuId)
 {
   return UIT_HandleAction(menuId, NULL);
 }
 
-void CefBrowserImpl::UIT_HandleAction(cef_handler_menuid_t menuId,
+void CefBrowserImpl::UIT_MouseWheelEvent(int x, int y, int delta, unsigned int flags)
+{
+#if defined(OS_WIN)
+  if (UIT_GetWebViewHost())
+  {
+    const WebKit::WebMouseWheelEvent& event = WebKit::WebInputEventFactory::mouseWheelEvent(UIT_GetWebViewWndHandle(), WM_MOUSEWHEEL, MAKEWPARAM(flags, delta), MAKELPARAM(x, y));
+	UIT_GetWebViewHost()->webwidget()->handleInputEvent(event); 
+  }
+#endif
+}
+
+bool CefBrowserImpl::UIT_HandleAction(CefMenuHandler::MenuId menuId,
                                       CefRefPtr<CefFrame> frame)
 {
+  bool res = true;
+
   REQUIRE_UIT();
 
   WebFrame* web_frame = NULL;
@@ -1223,7 +1295,23 @@
       if(web_frame)
         UIT_ViewDocumentString(web_frame);
       break;
+    case MENU_ID_ZOOM_IN:
+      if(web_frame)
+        web_frame->view()->setZoomLevel(false, web_frame->view()->zoomLevel()+1);
+      break;
+    case MENU_ID_ZOOM_OUT:
+      if(web_frame)
+        web_frame->view()->setZoomLevel(false, web_frame->view()->zoomLevel()-1);
+      break;
+    case MENU_ID_ZOOM_NORMAL:
+      if(web_frame)
+        web_frame->view()->setZoomLevel(false, 0);
+      break;
+	default:
+		res = false;
   }
+
+  return res;
 }
 
 void CefBrowserImpl::UIT_Find(int identifier, const CefString& search_text,
@@ -1559,6 +1647,19 @@
   }
 }
 
+void CefBrowserImpl::UIT_CustomContextMenuAction(int action)
+{
+  if (UIT_GetWebViewHost() && UIT_GetWebViewHost()->webview())
+    UIT_GetWebViewHost()->webview()->performCustomContextMenuAction(action);
+}
+
+ void CefBrowserImpl::UIT_InspectElement(int x, int y)
+ {
+  if (UIT_GetWebViewHost() && UIT_GetWebViewHost()->webview())
+	  UIT_GetWebViewHost()->webview()->inspectElementAt(WebKit::WebPoint(x,y));
+ }
+
+
 
 // CefFrameImpl
 
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_impl_gtk.cc cef/libcef/browser_impl_gtk.cc
--- libcef/browser_impl_gtk.cc	2012-05-09 11:27:19.070674202 +0200
+++ libcef/browser_impl_gtk.cc	2012-05-09 11:32:01.625658223 +0200
@@ -18,6 +18,12 @@
 using WebKit::WebRect;
 using WebKit::WebSize;
 
+void BrowserParentDestroyed(GtkWidget *window, CefBrowserImpl* browser)
+{	
+  // Destroy the browser.
+  browser->UIT_DestroyBrowser();
+}
+
 void CefBrowserImpl::ParentWindowWillClose()
 {
   // TODO(port): Implement this method if necessary.
@@ -35,17 +41,20 @@
   return false;
 }
 
-gfx::NativeWindow CefBrowserImpl::UIT_GetMainWndHandle() {
+gfx::NativeView CefBrowserImpl::UIT_GetMainWndHandle() {
   REQUIRE_UIT();
-  GtkWidget* toplevel = gtk_widget_get_ancestor(window_info_.m_Widget,
+  GtkWidget* toplevel = gtk_widget_get_ancestor((GtkWidget*)window_info_.m_Widget,
       GTK_TYPE_WINDOW);
-  return GTK_IS_WINDOW(toplevel) ? GTK_WINDOW(toplevel) : NULL;
+  return GTK_IS_WIDGET(toplevel) ? GTK_WIDGET(toplevel) : NULL;
 }
 
 void CefBrowserImpl::UIT_CreateBrowser(const CefString& url)
 {
   REQUIRE_UIT();
   Lock();
+  
+  if (!settings_.developer_tools_disabled)
+    dev_tools_agent_.reset(new BrowserDevToolsAgent());
 
   // Add a reference that will be released in UIT_DestroyBrowser().
   AddRef();
@@ -53,18 +62,14 @@
   // Add the new browser to the list maintained by the context
   _Context->AddBrowser(this);
 
-  if (!settings_.developer_tools_disabled)
-    dev_tools_agent_.reset(new BrowserDevToolsAgent());
-
   WebPreferences prefs;
   BrowserToWebSettings(settings_, prefs);
 
   // Create the webview host object
   webviewhost_.reset(
-      WebViewHost::Create(window_info_.m_ParentWidget, gfx::Rect(),
-                          delegate_.get(), NULL, dev_tools_agent_.get(),
-                          prefs));
-
+      WebViewHost::Create((GtkWidget*)window_info_.m_ParentWidget, delegate_.get(), dev_tools_agent_.get(), prefs)
+  );
+  
   if (!settings_.developer_tools_disabled)
     dev_tools_agent_->SetWebView(webviewhost_->webview());
 
@@ -72,12 +77,18 @@
 
   Unlock();
 
-  if(handler_.get()) {
-    // Notify the handler that we're done creating the new window
-    handler_->HandleAfterCreated(this);
+  g_signal_connect(GTK_WIDGET(window_info_.m_ParentWidget), "destroy", 
+		   G_CALLBACK(BrowserParentDestroyed), this);
+
+  if (client_.get()) {
+    CefRefPtr<CefLifeSpanHandler> handler = client_->GetLifeSpanHandler();
+    if(handler.get()) {
+      // Notify the handler that we're done creating the new window
+      handler->OnAfterCreated(this);
+    }
   }
 
-  if(url.size() > 0)
+  if(url.length() > 0)
     UIT_LoadURL(GetMainFrame(), url);
 }
 
@@ -95,9 +106,38 @@
 {
   REQUIRE_UIT();
 
-  // TODO(port): Add implementation.
-  NOTIMPLEMENTED();
-  return false;
+  char buff[] = "/tmp/CEFSourceXXXXXX";
+  int fd = mkstemp(buff);
+
+  if (fd == -1)
+    return false;
+
+  FILE* srcOutput;
+  srcOutput = fdopen(fd, "w+");
+
+  if (!srcOutput)
+    return false;
+ 
+  std::string markup = frame->contentAsMarkup().utf8();
+  if (fputs(markup.c_str(), srcOutput) < 0)
+  {
+    fclose(srcOutput);
+	return false;
+  }
+
+  fclose(srcOutput);
+  std::string newName(buff);
+  newName.append(".txt");
+  if (rename(buff, newName.c_str()) != 0)
+    return false;
+
+  std::string openCommand("xdg-open ");
+  openCommand += newName;
+
+  if (system(openCommand.c_str()) != 0)
+    return false;
+
+  return true;
 }
 
 void CefBrowserImpl::UIT_PrintPage(int page_number, int total_pages,
@@ -128,6 +168,26 @@
 // static
 void CefBrowserImpl::UIT_CloseView(gfx::NativeView view)
 {
+  if (!view)
+    return;
+    
+  GtkWidget* window = gtk_widget_get_parent(gtk_widget_get_parent(GTK_WIDGET(view)));
+  
+  if (!window)
+    return;
+    
   MessageLoop::current()->PostTask(FROM_HERE, NewRunnableFunction(
-      &gtk_widget_destroy, GTK_WIDGET(view)));
+      &gtk_widget_destroy, GTK_WIDGET(window)));
+}
+
+// static
+bool CefBrowserImpl::UIT_IsViewVisible(gfx::NativeView view)
+{
+  if (!view)
+    return false;
+    
+  if (view->window)
+    return (bool)gdk_window_is_visible(view->window);
+  else
+    return false;
 }
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_impl.h cef/libcef/browser_impl.h
--- libcef/browser_impl.h	2012-05-09 11:27:19.070674202 +0200
+++ libcef/browser_impl.h	2012-05-09 11:32:01.625658223 +0200
@@ -107,6 +107,14 @@
   virtual void SendFocusEvent(bool setFocus) OVERRIDE;
   virtual void SendCaptureLostEvent() OVERRIDE;
 
+  virtual void CustomContextMenuAction(int action);
+  virtual void ZoomIn(CefRefPtr<CefFrame> frame);
+  virtual void ZoomOut(CefRefPtr<CefFrame> frame);
+  virtual void ZoomNormal(CefRefPtr<CefFrame> frame); 
+  virtual void InspectElement(int x, int y);
+  virtual void MouseWheelEvent(int x, int y, int delta, unsigned int flags);
+  
+  
   // Frame-related methods
   void Undo(CefRefPtr<CefFrame> frame);
   void Redo(CefRefPtr<CefFrame> frame);
@@ -274,8 +282,8 @@
   void UIT_Show(WebKit::WebNavigationPolicy policy);
   
   // Handles most simple browser actions
-  void UIT_HandleActionView(cef_handler_menuid_t menuId);
-  void UIT_HandleAction(cef_handler_menuid_t menuId, CefRefPtr<CefFrame> frame);
+  bool UIT_HandleActionView(cef_handler_menuid_t menuId);
+  bool UIT_HandleAction(cef_handler_menuid_t menuId, CefRefPtr<CefFrame> frame);
 
   // Save the document HTML to a temporary file and open in the default viewing
   // application
@@ -303,6 +311,10 @@
   void UIT_ShowDevTools();
   void UIT_CloseDevTools();
 
+  void UIT_CustomContextMenuAction(int action);
+  void UIT_InspectElement(int x, int y);
+  void UIT_MouseWheelEvent(int x, int y, int delta, unsigned int flags);
+
   void UIT_VisitDOM(CefRefPtr<CefFrame> frame,
                     CefRefPtr<CefDOMVisitor> visitor);
 
@@ -441,6 +453,9 @@
   virtual CefRefPtr<CefBrowser> GetBrowser() OVERRIDE { return browser_.get(); }
   virtual void VisitDOM(CefRefPtr<CefDOMVisitor> visitor) OVERRIDE;
 
+  virtual void ZoomIn(){ browser_->ZoomIn(this); }
+  virtual void ZoomOut(){ browser_->ZoomOut(this); }
+  virtual void ZoomNormal(){ browser_->ZoomNormal(this); }
 private:
   CefRefPtr<CefBrowserImpl> browser_;
   CefString name_;
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_request_context.cc cef/libcef/browser_request_context.cc
--- libcef/browser_request_context.cc	2012-05-09 11:27:19.049674201 +0200
+++ libcef/browser_request_context.cc	2012-05-09 11:32:01.625658223 +0200
@@ -73,6 +73,7 @@
     const FilePath& cache_path,
     net::HttpCache::Mode cache_mode,
     bool no_proxy) {
+#ifdef OS_WIN // leaving old code here for now as new code is slower in windows
   // Create the |cache_path| directory if necessary.
   bool cache_path_valid = false;
   if (!cache_path.empty()) {
@@ -183,6 +184,92 @@
           file_system_context_.get(),
           CefThread::GetMessageLoopProxyForThread(CefThread::FILE)));
   storage_.set_job_factory(job_factory);
+#else // newer proxy code below here. Not used for Windows yet. 
+  // Create the |cache_path| directory if necessary.
+  bool cache_path_valid = false;
+  if (!cache_path.empty()) {
+    if (file_util::CreateDirectory(cache_path))
+      cache_path_valid = true;
+    else
+      NOTREACHED() << "The cache_path directory could not be created";
+  }
+
+  scoped_refptr<BrowserPersistentCookieStore> persistent_store;
+  if (cache_path_valid) {
+    const FilePath& cookie_path = cache_path.AppendASCII("Cookies");
+    persistent_store = new BrowserPersistentCookieStore(cookie_path);
+  }
+
+  storage_.set_cookie_store(
+      new net::CookieMonster(persistent_store.get(), NULL));
+
+  // hard-code A-L and A-C for test shells
+  set_accept_language("en-us,en");
+  set_accept_charset("iso-8859-1,*,utf-8");
+
+#if defined(OS_POSIX) && !defined(OS_MACOSX)
+  // Use no proxy to avoid ProxyConfigServiceLinux.
+  // Enabling use of the ProxyConfigServiceLinux requires:
+  // -Calling from a thread with a TYPE_UI MessageLoop,
+  // -If at all possible, passing in a pointer to the IO thread's MessageLoop,
+  // -Keep in mind that proxy auto configuration is also
+  //  non-functional on linux in this context because of v8 threading
+  //  issues.
+  // TODO(port): rename "linux" to some nonspecific unix.
+  scoped_ptr<net::ProxyConfigService> proxy_config_service(
+      new net::ProxyConfigServiceFixed(net::ProxyConfig()));
+#else // This is not used for now as it causes significant slowness
+  // Use the system proxy settings.
+  scoped_ptr<net::ProxyConfigService> proxy_config_service(
+      net::ProxyService::CreateSystemProxyConfigService(
+          MessageLoop::current(), NULL));
+#endif
+  storage_.set_host_resolver(
+      net::CreateSystemHostResolver(net::HostResolver::kDefaultParallelism,
+                                    net::HostResolver::kDefaultRetryAttempts,
+                                    NULL));
+  storage_.set_cert_verifier(new net::CertVerifier);
+  storage_.set_proxy_service(net::ProxyService::CreateUsingSystemProxyResolver(
+      proxy_config_service.release(), 0, NULL));
+  storage_.set_ssl_config_service(
+      new net::SSLConfigServiceDefaults);
+
+  storage_.set_http_auth_handler_factory(
+      net::HttpAuthHandlerFactory::CreateDefault(host_resolver()));
+
+  net::HttpCache::DefaultBackend* backend = new net::HttpCache::DefaultBackend(
+      cache_path.empty() ? net::MEMORY_CACHE : net::DISK_CACHE,
+      cache_path, 0, BrowserResourceLoaderBridge::GetCacheThread());
+
+  net::HttpCache* cache =
+      new net::HttpCache(host_resolver(), cert_verifier(),
+                         origin_bound_cert_service(), NULL, NULL,
+                         proxy_service(), ssl_config_service(),
+                         http_auth_handler_factory(), NULL, NULL, backend);
+
+  cache->set_mode(cache_mode);
+  storage_.set_http_transaction_factory(cache);
+
+  storage_.set_ftp_transaction_factory(
+      new net::FtpNetworkLayer(host_resolver()));
+
+  blob_storage_controller_.reset(new webkit_blob::BlobStorageController());
+  file_system_context_ = static_cast<BrowserFileSystem*>(
+      WebKit::webKitPlatformSupport()->fileSystem())->file_system_context();
+
+  net::URLRequestJobFactory* job_factory = new net::URLRequestJobFactory;
+  job_factory->SetProtocolHandler(
+      "blob",
+      new webkit_blob::BlobProtocolHandler(
+          blob_storage_controller_.get(),
+          CefThread::GetMessageLoopProxyForThread(CefThread::FILE)));
+  job_factory->SetProtocolHandler(
+      "filesystem",
+      fileapi::CreateFileSystemProtocolHandler(
+          file_system_context_.get(),
+          CefThread::GetMessageLoopProxyForThread(CefThread::FILE)));
+  storage_.set_job_factory(job_factory);
+#endif
 }
 
 BrowserRequestContext::~BrowserRequestContext() {
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_webkit_glue_gtk.cc cef/libcef/browser_webkit_glue_gtk.cc
--- libcef/browser_webkit_glue_gtk.cc	1970-01-01 01:00:00.000000000 +0100
+++ libcef/browser_webkit_glue_gtk.cc	2012-05-09 11:32:01.627658222 +0200
@@ -0,0 +1,105 @@
+// Copyright (c) 2010 The Chromium Embedded Framework Authors.
+// Portions copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/compiler_specific.h"
+
+#include "third_party/WebKit/Source/WebCore/config.h"
+
+#include "browser_webkit_glue.h"
+
+#undef LOG
+#include "base/file_util.h"
+#include "base/logging.h"
+#include "base/path_service.h"
+#include "grit/webkit_resources.h"
+#include "ui/base/resource/data_pack.h"
+#include "ui/base/resource/resource_bundle.h"
+#include "webkit/glue/webkit_glue.h"
+
+namespace webkit_glue {
+  
+// Data pack resource. This is a pointer to the mmapped resources file.
+static ui::DataPack* g_resource_data_pack = NULL;
+
+
+const char* PATH_ENV = "CEF_DATA_PATH";
+
+// Helper method for getting the path to the CEF resources directory.
+FilePath GetResourcesFilePath() {
+  return FilePath(getenv(PATH_ENV));
+}
+  
+void InitializeDataPak() {
+  g_resource_data_pack = new ui::DataPack;
+  FilePath data_path;
+  data_path = data_path.Append(GetResourcesFilePath());
+  data_path = data_path.Append("cef_data.pak");
+
+  if (!g_resource_data_pack->Load(data_path)) {
+    LOG(FATAL) << "failed to load cef_data.pak";
+  }
+  ResourceBundle::InitSharedInstanceForTest(data_path); // resources
+}
+  
+string16 GetLocalizedString(int message_id) {
+  base::StringPiece res;
+  if (!g_resource_data_pack->GetStringPiece(message_id, &res)) {
+    LOG(FATAL) << "failed to load webkit string with id " << message_id;
+  }
+  
+  return string16(reinterpret_cast<const char16*>(res.data()),
+                  res.length() / 2);
+}
+  
+  
+base::StringPiece NetResourceProvider(int key) {
+  base::StringPiece res;
+  g_resource_data_pack->GetStringPiece(key, &res);
+  return res;
+}  
+
+base::StringPiece GfxResourceProvider(int key) {
+  base::StringPiece res;
+  g_resource_data_pack->GetStringPiece(key, &res);
+  return res;
+}  
+
+base::StringPiece GetDataResource(int resource_id) {
+
+
+  switch (resource_id) {
+	case IDR_BROKENIMAGE:
+	case IDR_TEXTAREA_RESIZER:
+    case IDR_SEARCH_CANCEL:
+    case IDR_SEARCH_CANCEL_PRESSED:
+    case IDR_SEARCH_MAGNIFIER:
+    case IDR_SEARCH_MAGNIFIER_RESULTS:
+    case IDR_MEDIA_PAUSE_BUTTON:
+    case IDR_MEDIA_PLAY_BUTTON:
+    case IDR_MEDIA_PLAY_BUTTON_DISABLED:
+    case IDR_MEDIA_SOUND_FULL_BUTTON:
+    case IDR_MEDIA_SOUND_NONE_BUTTON:
+    case IDR_MEDIA_SOUND_DISABLED:
+    case IDR_MEDIA_SLIDER_THUMB:
+    case IDR_MEDIA_VOLUME_SLIDER_THUMB:
+    case IDR_INPUT_SPEECH:
+    case IDR_INPUT_SPEECH_RECORDING:
+    case IDR_INPUT_SPEECH_WAITING:
+      return NetResourceProvider(resource_id);
+      
+    default:
+      break;
+  }
+  
+  return base::StringPiece();
+}
+
+void DidLoadPlugin(const std::string& filename) {
+}
+
+void DidUnloadPlugin(const std::string& filename) {
+}
+  
+}  // namespace webkit_glue
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_webkit_glue.h cef/libcef/browser_webkit_glue.h
--- libcef/browser_webkit_glue.h	2012-05-09 11:27:19.061674203 +0200
+++ libcef/browser_webkit_glue.h	2012-05-09 11:32:01.627658222 +0200
@@ -29,8 +29,12 @@
 // Save a bitmap image to file, providing optional alternative data in |lpBits|
 BOOL SaveBitmapToFile(HBITMAP hBmp, HDC hDC, LPCTSTR file, LPBYTE lpBits);
 #endif
-  
-#if defined(OS_MACOSX)
+ 
+#if defined(OS_LINUX)
+void InitializeDataPak();
+#endif
+
+#if defined(OS_MACOSX) 
 void InitializeDataPak();
 FilePath GetResourcesFilePath();
 #endif
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_webkit_init.cc cef/libcef/browser_webkit_init.cc
--- libcef/browser_webkit_init.cc	2012-05-09 11:27:19.088674201 +0200
+++ libcef/browser_webkit_init.cc	2012-05-09 11:32:01.627658222 +0200
@@ -42,11 +42,17 @@
   WebKit::WebRuntimeFeatures::enableDeviceMotion(false);
   WebKit::WebRuntimeFeatures::enableDeviceOrientation(false);
 
+#ifdef OS_LINUX
+    // Load only the libraries we want Desura to use
+    media::InitializeMediaLibrary(FilePath("./cefmedia/"));
+    WebKit::WebRuntimeFeatures::enableMediaPlayer(true);
+#else
   // Load libraries for media and enable the media player.
   FilePath module_path;
   WebKit::WebRuntimeFeatures::enableMediaPlayer(
       PathService::Get(base::DIR_MODULE, &module_path) &&
       media::InitializeMediaLibrary(module_path));
+#endif
 
   // Construct and initialize an appcache system for this scope.
   // A new empty temp directory is created to house any cached
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_webview_delegate_gtk.cc cef/libcef/browser_webview_delegate_gtk.cc
--- libcef/browser_webview_delegate_gtk.cc	2012-05-09 11:27:19.063674202 +0200
+++ libcef/browser_webview_delegate_gtk.cc	2012-05-09 11:32:01.628658222 +0200
@@ -10,30 +10,47 @@
 #include <gtk/gtk.h>
 
 #include "base/message_loop.h"
+#include "base/string_util.h"
+#include "net/base/net_errors.h"
+#include "third_party/WebKit/Source/WebKit/chromium/public/WebContextMenuData.h"
 #include "third_party/WebKit/Source/WebKit/chromium/public/WebCursorInfo.h"
+#include "third_party/WebKit/Source/WebKit/chromium/public/WebPopupMenu.h"
+#include "third_party/WebKit/Source/WebKit/chromium/public/WebDragData.h"
 #include "third_party/WebKit/Source/WebKit/chromium/public/WebFrame.h"
+#include "third_party/WebKit/Source/WebKit/chromium/public/WebImage.h"
+#include "third_party/WebKit/Source/WebKit/chromium/public/WebPoint.h"
 #include "third_party/WebKit/Source/WebKit/chromium/public/WebRect.h"
-#include "third_party/WebKit/Source/WebKit/chromium/public/WebString.h"
 #include "third_party/WebKit/Source/WebKit/chromium/public/WebView.h"
+#include "ui/gfx/native_widget_types.h"
 #include "ui/gfx/gtk_util.h"
 #include "ui/gfx/point.h"
-#include "webkit/glue/webcursor.h"
 #include "webkit/glue/webdropdata.h"
 #include "webkit/glue/webpreferences.h"
+#include "webkit/glue/webkit_glue.h"
 #include "webkit/glue/window_open_disposition.h"
-#include "webkit/plugins/npapi/gtk_plugin_container_manager.h"
 #include "webkit/plugins/npapi/plugin_list.h"
 #include "webkit/plugins/npapi/webplugin.h"
 #include "webkit/plugins/npapi/webplugin_delegate_impl.h"
 
+using webkit::npapi::WebPluginDelegateImpl;
+using WebKit::WebContextMenuData;
 using WebKit::WebCursorInfo;
+using WebKit::WebDragData;
+using WebKit::WebDragOperationsMask;
+using WebKit::WebExternalPopupMenu;
+using WebKit::WebExternalPopupMenuClient;
 using WebKit::WebFrame;
+using WebKit::WebImage;
 using WebKit::WebNavigationPolicy;
+using WebKit::WebPoint;
 using WebKit::WebPopupMenuInfo;
 using WebKit::WebRect;
 using WebKit::WebWidget;
 using WebKit::WebView;
 
+#define AddMenuItem(unused_0, menu, unused_1, id, label, enabled, unused_2) MenuItemCreate(menu, label, id, enabled, this)
+#define AddMenuSeparator(menu, id) MenuItemCreateSeperator(menu)
+
 namespace {
 
 enum SelectionClipboardType {
@@ -80,25 +97,299 @@
 
 // WebViewClient --------------------------------------------------------------
 
-WebWidget* BrowserWebViewDelegate::createPopupMenu(
-    const WebPopupMenuInfo& info) {
+WebExternalPopupMenu* BrowserWebViewDelegate::createExternalPopupMenu(
+    const WebPopupMenuInfo& info,
+    WebExternalPopupMenuClient* client)  {
   NOTREACHED();
   return NULL;
 }
 
-void BrowserWebViewDelegate::showContextMenu(
-    WebKit::WebFrame* frame, const WebKit::WebContextMenuData& data) {
-  NOTIMPLEMENTED();
+static gboolean MenuItemHandle(GtkWidget* menu_item, gpointer data)
+{
+  if (!data)
+    return FALSE;
+
+  BrowserWebViewDelegate* webViewDelegate = (BrowserWebViewDelegate*)data;
+  int id = GPOINTER_TO_INT(g_object_get_data(G_OBJECT(menu_item), "menu_id"));
+
+  webViewDelegate->handleContextMenu(id);
+
+  return FALSE;
+}
+
+static GtkWidget* MenuItemCreate(GtkWidget* parent_menu, const char* name, int id, bool is_enabled, BrowserWebViewDelegate* webViewDelegate)
+{
+  GtkWidget* menu_item = gtk_menu_item_new_with_label(name);
+
+  g_object_set_data(G_OBJECT(menu_item), "menu_id", (gpointer)id);
+  g_signal_connect(G_OBJECT(menu_item), "activate", G_CALLBACK(MenuItemHandle), (gpointer)webViewDelegate);
+  gtk_menu_shell_append(GTK_MENU_SHELL(parent_menu), menu_item);
+  gtk_widget_set_sensitive(menu_item, is_enabled);
+
+  gtk_widget_show(menu_item);
+
+  return menu_item;
+}
+
+static GtkWidget* MenuItemCreateSeperator(GtkWidget* parent_menu)
+{
+  GtkWidget* menu_item = gtk_menu_item_new();
+
+  gtk_menu_shell_append(GTK_MENU_SHELL(parent_menu), menu_item);
+  gtk_widget_show(menu_item);
+
+  return menu_item;
+}
+
+void BrowserWebViewDelegate::showContextMenu(WebKit::WebFrame* frame, const WebKit::WebContextMenuData& data) {
+  GtkWidget* menu = NULL;
+  GdkPoint screen_pt = { data.mousePosition.x, data.mousePosition.y };
+
+  std::list<std::wstring> label_list;
+
+  // Enable recursive tasks on the message loop so we can get updates while
+  // the context menu is being displayed.
+  bool old_state = MessageLoop::current()->NestableTasksAllowed();
+  MessageLoop::current()->SetNestableTasksAllowed(true);
+
+  int edit_flags = data.editFlags;
+  if(browser_->UIT_CanGoBack())
+    edit_flags |= MENU_CAN_GO_BACK;
+  if(browser_->UIT_CanGoForward())
+    edit_flags |= MENU_CAN_GO_FORWARD;
+
+  int type_flags = MENUTYPE_NONE;
+  if(!data.pageURL.isEmpty())
+    type_flags |= MENUTYPE_PAGE;
+  if(!data.frameURL.isEmpty())
+    type_flags |= MENUTYPE_FRAME;
+  if(!data.linkURL.isEmpty())
+    type_flags |= MENUTYPE_LINK;
+  if(data.mediaType == WebContextMenuData::MediaTypeImage)
+    type_flags |= MENUTYPE_IMAGE;
+  if(!data.selectedText.isEmpty())
+    type_flags |= MENUTYPE_SELECTION;
+  if(data.isEditable)
+    type_flags |= MENUTYPE_EDITABLE;
+  if(data.isSpellCheckingEnabled && !data.misspelledWord.isEmpty())
+    type_flags |= MENUTYPE_MISSPELLED_WORD;
+  if(data.mediaType == WebContextMenuData::MediaTypeVideo)
+    type_flags |= MENUTYPE_VIDEO;
+  if(data.mediaType == WebContextMenuData::MediaTypeAudio)
+    type_flags |= MENUTYPE_AUDIO;
+  
+  CefRefPtr<CefClient> client = browser_->GetClient();
+  CefRefPtr<CefMenuHandler> handler;
+  if (client.get())
+    handler = client->GetMenuHandler();
+
+  if (handler.get()) {
+    // Gather menu information
+    cef_handler_menuinfo_t menuInfo;
+    memset(&menuInfo, 0, sizeof(menuInfo));
+
+    CefString linkStr(std::string(data.linkURL.spec()));
+    CefString imageStr(std::string(data.srcURL.spec()));
+    CefString pageStr(std::string(data.pageURL.spec()));
+    CefString frameStr(std::string(data.frameURL.spec()));
+    CefString selectedTextStr(string16(data.selectedText));
+    CefString misspelledWordStr(string16(data.misspelledWord));
+    CefString securityInfoStr(std::string(data.securityInfo));
+    
+    menuInfo.typeFlags = type_flags;
+    menuInfo.x = screen_pt.x;
+    menuInfo.y = screen_pt.y;
+    cef_string_set(linkStr.c_str(), linkStr.length(), &menuInfo.linkUrl, false);
+    cef_string_set(imageStr.c_str(), imageStr.length(), &menuInfo.imageUrl,
+        false);
+    cef_string_set(pageStr.c_str(), pageStr.length(), &menuInfo.pageUrl, false);
+    cef_string_set(frameStr.c_str(), frameStr.length(), &menuInfo.frameUrl,
+        false);
+    cef_string_set(selectedTextStr.c_str(), selectedTextStr.length(),
+        &menuInfo.selectionText, false);
+    cef_string_set(misspelledWordStr.c_str(), misspelledWordStr.length(),
+        &menuInfo.misspelledWord, false);
+    menuInfo.editFlags = edit_flags;
+    cef_string_set(securityInfoStr.c_str(), securityInfoStr.length(),
+        &menuInfo.securityInfo, false);
+   
+
+	std::vector<std::string> customItemLabel;
+	std::vector<cef_handler_menuitem_t> customItems;
+
+
+  for (size_t x=0; x<data.customItems.size(); x++) {
+	  WebKit::WebMenuItemInfo info = data.customItems[x];
+
+	  std::string label = CefStringUTF8(info.label);
+
+		if (label.size() == 0 && info.type != WebKit::WebMenuItemInfo::Separator)
+			continue;
+
+		cef_handler_menuitem_t item;
+
+		item.action = info.action;
+
+		switch (info.type) {
+		case WebKit::WebMenuItemInfo::Option:
+			item.type = MENUITEMTYPE_OPTION;
+			break;
+
+		case WebKit::WebMenuItemInfo::CheckableOption:
+			item.type = MENUITEMTYPE_CHECKABLEOPTION;
+			break;
+
+		case WebKit::WebMenuItemInfo::Separator:
+			item.type = MENUITEMTYPE_SEPERATOR;
+			break;
+
+		case WebKit::WebMenuItemInfo::Group:
+			item.type = MENUITEMTYPE_GROUP;
+			break;
+
+		default:
+			continue;
+		}
+
+		item.enabled = info.enabled;
+		item.checked = info.checked;
+
+		customItemLabel.push_back(label);
+
+		cef_string_utf8_set(customItemLabel.back().c_str(), customItemLabel.back().size(), &item.label, 0);
+		customItems.push_back(item);
+  }
+
+    menuInfo.customSize = customItems.size();
+    menuInfo.customItems = new cef_handler_menuitem_t[menuInfo.customSize];
+  
+  for (size_t x=0; x<customItems.size(); x++) {
+    menuInfo.customItems[x] = customItems[x];
+  }
+
+    // Notify the handler that a context menu is requested
+    bool res = handler->OnBeforeMenu(browser_, menuInfo);
+	delete [] menuInfo.customItems;
+	
+	if (res)
+      goto end;
+  }
+
+  // Build the correct default context menu
+  if (type_flags &  MENUTYPE_EDITABLE) {
+    menu = gtk_menu_new();
+    AddMenuItem(browser_, menu, -1, MENU_ID_UNDO, "Undo",
+      !!(edit_flags & MENU_CAN_UNDO), label_list);
+    AddMenuItem(browser_, menu, -1, MENU_ID_REDO, "Redo",
+      !!(edit_flags & MENU_CAN_REDO), label_list);
+    AddMenuSeparator(menu, -1);
+    AddMenuItem(browser_, menu, -1, MENU_ID_CUT, "Cut",
+      !!(edit_flags & MENU_CAN_CUT), label_list);
+    AddMenuItem(browser_, menu, -1, MENU_ID_COPY, "Copy",
+      !!(edit_flags & MENU_CAN_COPY), label_list);
+    AddMenuItem(browser_, menu, -1, MENU_ID_PASTE, "Paste",
+      !!(edit_flags & MENU_CAN_PASTE), label_list);
+    AddMenuItem(browser_, menu, -1, MENU_ID_DELETE, "Delete",
+      !!(edit_flags & MENU_CAN_DELETE), label_list);
+    AddMenuSeparator(menu, -1);
+    AddMenuItem(browser_, menu, -1, MENU_ID_SELECTALL, "Select All",
+      !!(edit_flags & MENU_CAN_SELECT_ALL), label_list);
+  } else if(type_flags & MENUTYPE_SELECTION) {
+    menu = gtk_menu_new();
+    AddMenuItem(browser_, menu, -1, MENU_ID_COPY, "Copy",
+      !!(edit_flags & MENU_CAN_COPY), label_list);
+  } else if(type_flags & (MENUTYPE_PAGE | MENUTYPE_FRAME)) {
+    menu = gtk_menu_new();
+    AddMenuItem(browser_, menu, -1, MENU_ID_NAV_BACK, "Back",
+      !!(edit_flags & MENU_CAN_GO_BACK), label_list);
+    AddMenuItem(browser_, menu, -1, MENU_ID_NAV_FORWARD, "Forward",
+      !!(edit_flags & MENU_CAN_GO_FORWARD), label_list);
+    AddMenuSeparator(menu, -1);
+    AddMenuItem(browser_, menu, -1, MENU_ID_PRINT, "Print",
+      true, label_list);
+    AddMenuItem(browser_, menu, -1, MENU_ID_VIEWSOURCE, "View Source",
+      true, label_list);
+  }
+
+  for (size_t x=0; x<data.customItems.size(); x++) {
+	  WebKit::WebMenuItemInfo info = data.customItems[x];
+
+      std::string label = CefStringUTF8(info.label);
+
+		if (label.size() == 0 && info.type != WebKit::WebMenuItemInfo::Separator)
+			continue;
+
+		switch (info.type) {
+		case WebKit::WebMenuItemInfo::Option:
+			AddMenuItem(browser_, menu, -1, (cef_handler_menuid_t)(MENU_ID_CUSTOM+info.action), label.c_str(), info.enabled, label_list);
+			break;
+
+		case WebKit::WebMenuItemInfo::CheckableOption:
+			AddMenuItem(browser_, menu, -1, (cef_handler_menuid_t)(MENU_ID_CUSTOM+info.action), label.c_str(), info.enabled, label_list);
+			break;
+
+		case WebKit::WebMenuItemInfo::Separator:
+			AddMenuSeparator(menu, -1);
+			break;
+	
+		case WebKit::WebMenuItemInfo::Group:
+			AddMenuSeparator(menu, -1);
+			break;
+		}
+  }
+
+
+  if (menu)
+   gtk_menu_popup(GTK_MENU(menu), NULL, NULL, NULL, NULL, 3, gtk_get_current_event_time());
+
+end:
+  MessageLoop::current()->SetNestableTasksAllowed(old_state);
+}
+
+void BrowserWebViewDelegate::handleContextMenu(int selected_id)
+{
+    if (selected_id != 0) {
+    
+      CefRefPtr<CefClient> client = browser_->GetClient();
+      CefRefPtr<CefMenuHandler> handler;
+      if (client.get())
+        handler = client->GetMenuHandler();
+    
+      // An action was chosen
+      cef_handler_menuid_t menuId =
+          static_cast<cef_handler_menuid_t>(selected_id);
+      bool handled = false;
+      if (handler.get()) {
+        // Ask the handler if it wants to handle the action
+        handled = handler->OnMenuAction(browser_, menuId);
+      }
+
+      if(!handled) {
+        // Execute the action
+        browser_->UIT_HandleAction(menuId, browser_->GetFocusedFrame());
+      }
+
+	  if (!handled) {
+		browser_->UIT_GetWebViewHost()->webview()->performCustomContextMenuAction(menuId - MENU_ID_CUSTOM);
+	  }
+    }
 }
 
 // WebWidgetClient ------------------------------------------------------------
 
 void BrowserWebViewDelegate::show(WebNavigationPolicy policy) {
   WebWidgetHost* host = GetWidgetHost();
+  if (!host)
+  	return;
+  	
   GtkWidget* drawing_area = host->view_handle();
-  GtkWidget* window =
-      gtk_widget_get_parent(gtk_widget_get_parent(drawing_area));
-  gtk_widget_show_all(window);
+  if (!drawing_area)
+  	return;
+  	
+  GtkWidget* window = gtk_widget_get_parent(gtk_widget_get_parent(drawing_area));
+  	
+  if (window)
+  	gtk_widget_show_all(window);
 }
 
 void BrowserWebViewDelegate::didChangeCursor(const WebCursorInfo& cursor_info) {
@@ -127,10 +418,55 @@
 }
 
 WebRect BrowserWebViewDelegate::windowRect() {
-  WebWidgetHost* host = GetWidgetHost();
+  // TODO(fix)
+  // In full screen mode, this positions the webwidget 4px to the left, and 1px
+  // too high. Mouse functions on large <select>'s work fine though.
+  // In restored mode, thks positions the webwidget perfectly (with my WM at
+  // least), although mouse positions on long <select>'s are off by the offset
+  // of the webwidget (sometimes webkit draws it starting from the top of the
+  // host) - Keith
+  
+  if (WebWidgetHost* host = GetWidgetHost()) {
+    GtkWidget* drawing_area = host->view_handle();
+    
+    if (!drawing_area)
+      return WebRect();
+      
+    GtkWidget* next = gtk_widget_get_parent(drawing_area);
+    
+    if (!next)
+      return WebRect();
+      
+    gint x, x1, y, y1;
+    
+    x = drawing_area->allocation.x;
+    y = drawing_area->allocation.y + 25;
+    
+    do {
+      x += next->allocation.x; 
+      y += next->allocation.y;
+    
+      next = gtk_widget_get_parent(next);
+    } while (next && (next != browser_->UIT_GetMainWndHandle()));
+    
+    if (next) // top window
+    {
+      gtk_window_get_position(GTK_WINDOW(next), &x1, &y1);
+      x += x1;
+      y += y1;
+    }
+
+  return WebRect(x, y,
+                 drawing_area->allocation.width,
+                 drawing_area->allocation.height);
+  }
+  return WebRect();
+  
+/*  WebWidgetHost* host = GetWidgetHost();
   GtkWidget* drawing_area = host->view_handle();
   GtkWidget* vbox = gtk_widget_get_parent(drawing_area);
-  GtkWidget* window = gtk_widget_get_parent(vbox);
+//GtkWidget* window = gtk_widget_get_parent(vbox);
+  GtkWidget* window = browser_->UIT_GetMainWndHandle();
 
   gint x, y;
   gtk_window_get_position(GTK_WINDOW(window), &x, &y);
@@ -139,7 +475,7 @@
 
   return WebRect(x, y,
                  drawing_area->allocation.width,
-                 drawing_area->allocation.height);
+                 drawing_area->allocation.height);*/
 }
 
 void BrowserWebViewDelegate::setWindowRect(const WebRect& rect) {
@@ -147,24 +483,30 @@
     // TODO(port): Set the window rectangle.
   } else if (this == browser_->UIT_GetPopupDelegate()) {
     WebWidgetHost* host = GetWidgetHost();
+    if (!host)
+    	return;
+    	
     GtkWidget* drawing_area = host->view_handle();
-    GtkWidget* window =
-        gtk_widget_get_parent(gtk_widget_get_parent(drawing_area));
+    if (!drawing_area)
+      return;
+    	
+    GtkWidget* window = gtk_widget_get_parent(gtk_widget_get_parent(drawing_area));
+    if (!window)
+      return;
+    	
     gtk_window_resize(GTK_WINDOW(window), rect.width, rect.height);
     gtk_window_move(GTK_WINDOW(window), rect.x, rect.y);
   }
 }
 
 WebRect BrowserWebViewDelegate::rootWindowRect() {
-  if (WebWidgetHost* host = GetWidgetHost()) {
+  if (GtkWidget* window = browser_->UIT_GetMainWndHandle()) {
     // We are being asked for the x/y and width/height of the entire browser
     // window.  This means the x/y is the distance from the corner of the
     // screen, and the width/height is the size of the entire browser window.
     // For example, this is used to implement window.screenX and window.screenY.
-    GtkWidget* drawing_area = host->view_handle();
-    GtkWidget* window =
-        gtk_widget_get_parent(gtk_widget_get_parent(drawing_area));
     gint x, y, width, height;
+    
     gtk_window_get_position(GTK_WINDOW(window), &x, &y);
     gtk_window_get_size(GTK_WINDOW(window), &width, &height);
     return WebRect(x, y, width, height);
@@ -226,13 +568,23 @@
 
 void BrowserWebViewDelegate::ShowJavaScriptAlert(
     WebKit::WebFrame* webframe, const CefString& message) {
-  NOTIMPLEMENTED();
+	GtkWidget* dialog = gtk_message_dialog_new(
+	  GTK_WINDOW(browser_->UIT_GetMainWndHandle()), GTK_DIALOG_MODAL, GTK_MESSAGE_INFO,
+	  GTK_BUTTONS_OK, "%s", message.c_str());
+	gtk_window_set_title(GTK_WINDOW(dialog), "JavaScript Alert");
+	gtk_dialog_run(GTK_DIALOG(dialog));  // Runs a nested message loop.
+	gtk_widget_destroy(dialog);
 }
 
 bool BrowserWebViewDelegate::ShowJavaScriptConfirm(
     WebKit::WebFrame* webframe, const CefString& message) {
-  NOTIMPLEMENTED();
-  return false;
+	GtkWidget* dialog = gtk_message_dialog_new(
+	  GTK_WINDOW(browser_->UIT_GetMainWndHandle()), GTK_DIALOG_MODAL, GTK_MESSAGE_QUESTION,
+	  GTK_BUTTONS_OK_CANCEL, "%s", message.c_str());
+	gtk_window_set_title(GTK_WINDOW(dialog), "JavaScript Confirm");
+	int ret = gtk_dialog_run(GTK_DIALOG(dialog));
+	gtk_widget_destroy(dialog);
+	return (ret == GTK_RESPONSE_OK);
 }
 
 bool BrowserWebViewDelegate::ShowJavaScriptPrompt(
@@ -242,11 +594,46 @@
   return false;
 }
 
+static void parseGSList(gpointer data, gpointer user_data) {
+  if (!data || !user_data)
+    return;
+    
+  std::vector<FilePath> *file_names = (std::vector<FilePath>*)user_data;
+  
+  file_names->push_back(FilePath((char*)data));
+  g_free(data);
+}
+
 // Called to show the file chooser dialog.
 bool BrowserWebViewDelegate::ShowFileChooser(std::vector<FilePath>& file_names,
                                              const bool multi_select,
                                              const WebKit::WebString& title,
                                              const FilePath& default_file) {
-  NOTIMPLEMENTED();
-  return false;
+  GtkWidget *dialog;
+  dialog = gtk_file_chooser_dialog_new ("SelectFile",
+				      GTK_WINDOW(browser_->UIT_GetMainWndHandle()),
+				      GTK_FILE_CHOOSER_ACTION_OPEN,
+				      GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
+				      GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
+				      NULL);
+  gtk_file_chooser_set_select_multiple(GTK_FILE_CHOOSER(dialog), (gboolean)multi_select);
+  
+  if (!default_file.empty())
+    gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(dialog), default_file.MaybeAsASCII().c_str());
+  
+  if (gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_ACCEPT) {
+    if (multi_select) {
+      GSList *selected_files = gtk_file_chooser_get_filenames(GTK_FILE_CHOOSER(dialog));
+      g_slist_foreach(selected_files, parseGSList, (gpointer)&file_names);
+      g_slist_free(selected_files);
+    } else {
+      file_names.push_back(FilePath(gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog))));
+    }
+  } else {
+    gtk_widget_destroy(dialog);
+    return false;
+  }
+  
+  gtk_widget_destroy(dialog);
+  return true;
 }
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_webview_delegate.h cef/libcef/browser_webview_delegate.h
--- libcef/browser_webview_delegate.h	2012-05-09 11:27:19.081674201 +0200
+++ libcef/browser_webview_delegate.h	2012-05-09 11:32:01.628658222 +0200
@@ -97,6 +97,9 @@
       OVERRIDE;
   virtual bool runModalBeforeUnloadDialog(
       WebKit::WebFrame* frame, const WebKit::WebString& message) OVERRIDE;
+#ifdef OS_LINUX
+  void handleContextMenu(int selected_id);
+#endif
   virtual void showContextMenu(
       WebKit::WebFrame* frame, const WebKit::WebContextMenuData& data) OVERRIDE;
   virtual void setStatusText(const WebKit::WebString& text) OVERRIDE;
@@ -251,6 +254,11 @@
 
   CefBrowserImpl* GetBrowser() { return browser_; }
 
+#if defined(OS_WIN)
+  bool WndProc(UINT message, WPARAM wparam, LPARAM lparam);
+#endif
+
+
 #if defined(OS_MACOSX)
   // Called after the external popup menu has been dismissed.
   void ClosePopupMenu();
diff '--exclude=.svn' -aurN cef.ori/libcef/browser_webview_delegate_win.cc cef/libcef/browser_webview_delegate_win.cc
--- libcef/browser_webview_delegate_win.cc	2012-05-09 11:27:19.046674203 +0200
+++ libcef/browser_webview_delegate_win.cc	2012-05-09 11:32:01.628658222 +0200
@@ -448,6 +448,66 @@
   if (client.get())
     handler = client->GetMenuHandler();
 
+  if(handler.get()) {
+	std::vector<std::string> customItemLabel;
+	std::vector<cef_handler_menuitem_t> customItems;
+
+
+  for (size_t x=0; x<data.customItems.size(); x++) {
+	  WebKit::WebMenuItemInfo info = data.customItems[x];
+
+	  std::string label = CefStringUTF8(info.label);
+
+		if (label.size() == 0 && info.type != WebKit::WebMenuItemInfo::Separator)
+			continue;
+
+		cef_handler_menuitem_t item;
+
+		item.action = info.action;
+
+		switch (info.type) {
+		case WebKit::WebMenuItemInfo::Option:
+			item.type = MENUITEMTYPE_OPTION;
+			break;
+
+		case WebKit::WebMenuItemInfo::CheckableOption:
+			item.type = MENUITEMTYPE_CHECKABLEOPTION;
+			break;
+
+		case WebKit::WebMenuItemInfo::Separator:
+			item.type = MENUITEMTYPE_SEPERATOR;
+			break;
+
+		case WebKit::WebMenuItemInfo::Group:
+			item.type = MENUITEMTYPE_GROUP;
+			break;
+
+		default:
+			continue;
+		}
+
+		item.enabled = info.enabled;
+		item.checked = info.checked;
+
+		customItemLabel.push_back(label);
+
+		cef_string_utf8_set(customItemLabel.back().c_str(), customItemLabel.back().size(), &item.label, 0);
+		customItems.push_back(item);
+  }
+
+	menuInfo.customSize = customItems.size();
+    menuInfo.customItems = new cef_handler_menuitem_t[menuInfo.customSize];
+	
+	for (size_t x=0; x<customItems.size(); x++) {
+		menuInfo.customItems[x] = customItems[x];
+	}
+	
+	
+    bool res = handler->OnBeforeMenu(browser_, menuInfo);
+	delete [] menuInfo.customItems;
+	
+	if (res)
+    return;
   if (client.get() && browser_->IsWindowRenderingDisabled()) {
     // Retrieve the screen coordinates.
     CefRefPtr<CefRenderHandler> render_handler = client->GetRenderHandler();
@@ -494,6 +554,28 @@
       true, label_list);
   }
 
+  for (size_t x=0; x<data.customItems.size(); x++) {
+	  WebKit::WebMenuItemInfo info = data.customItems[x];
+
+	  std::wstring label = info.label;
+
+		if (label.size() == 0 && info.type != WebKit::WebMenuItemInfo::Separator)
+			continue;
+
+		switch (info.type) {
+		case WebKit::WebMenuItemInfo::Option:
+			AddMenuItem(browser_, menu, -1, (cef_handler_menuid_t)(MENU_ID_CUSTOM+info.action), label.c_str(), info.enabled, label_list);
+			break;
+
+		case WebKit::WebMenuItemInfo::CheckableOption:
+			AddMenuItem(browser_, menu, -1, (cef_handler_menuid_t)(MENU_ID_CUSTOM+info.action), label.c_str(), info.enabled, label_list);
+			break;
+
+		case WebKit::WebMenuItemInfo::Separator:
+			AddMenuSeparator(menu, -1);
+			break;
+		}
+  }
   if (!menu)
     return;
 
@@ -516,6 +598,9 @@
       // Execute the action
       browser_->UIT_HandleAction(menuId, browser_->GetFocusedFrame());
     }
+  if (!handled) {
+    browser_->UIT_GetWebViewHost()->webview()->performCustomContextMenuAction(menuId - MENU_ID_CUSTOM);
+  }
   }
 
   DestroyMenu(menu);
@@ -731,3 +814,18 @@
   return result;
 }
 
+bool BrowserWebViewDelegate::WndProc(UINT message, WPARAM wparam, LPARAM lparam)
+{
+  CefRefPtr<CefClient> client = browser_->GetClient();
+
+  if (!client.get())
+    return false;
+
+  CefRefPtr<CefWinEventHandler> win_handler = client->GetWinEventHandler();
+  
+  if (!win_handler.get())
+    return false;
+
+  win_handler->OnWndProc(browser_, message, wparam, lparam);
+  return false;
+}
diff '--exclude=.svn' -aurN cef.ori/libcef/cef_context.cc cef/libcef/cef_context.cc
--- libcef/cef_context.cc	2012-05-09 11:27:17.883674268 +0200
+++ libcef/cef_context.cc	2012-05-09 11:32:01.628658222 +0200
@@ -8,6 +8,7 @@
 #include "cef_thread.h"
 #include "cef_time_util.h"
 #include "cef_process.h"
+#include "cef_paths.h"
 #include "../include/cef_nplugin.h"
 
 #include "base/file_util.h"
@@ -96,6 +97,16 @@
   }
 }
 
+void UIT_RegisterFlashPlugin(const std::string& dllName)
+{
+  FilePath path;
+
+  // Register the internal Flash and PDF, if available.
+  if (cef::GetFlashPluginPath(&path, dllName.size()>0?dllName.c_str():NULL)) {
+    webkit::npapi::PluginList::Singleton()->AddExtraPluginPath(path);
+  }
+}
+
 void IOT_VisitAllCookies(CefRefPtr<CefCookieVisitor> visitor)
 {
   REQUIRE_IOT();
@@ -219,6 +230,12 @@
   _Context->process()->RunMessageLoop();
 }
 
+void CefRegisterFlashPlugin(const std::string& dllName)
+{
+  CefThread::PostTask(CefThread::UI, FROM_HERE,
+      NewRunnableFunction(UIT_RegisterFlashPlugin, dllName));
+}
+
 bool CefRegisterPlugin(const CefPluginInfo& plugin_info)
 {
   // Verify that the context is in a valid state.
diff '--exclude=.svn' -aurN cef.ori/libcef/cef_paths.cc cef/libcef/cef_paths.cc
--- libcef/cef_paths.cc	1970-01-01 01:00:00.000000000 +0100
+++ libcef/cef_paths.cc	2012-05-09 11:32:01.629658221 +0200
@@ -0,0 +1,65 @@
+// Copyright (c) 2006-2010 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "cef_paths.h"
+#include "include/internal/cef_string.h"
+
+#include "base/command_line.h"
+#include "base/file_util.h"
+#include "base/logging.h"
+#include "base/path_service.h"
+#include "base/string_util.h"
+#include "base/sys_info.h"
+#include "chrome/common/chrome_constants.h"
+#include "chrome/common/chrome_paths_internal.h"
+#include "chrome/common/chrome_switches.h"
+
+
+namespace {
+
+// File name of the internal Flash plugin on different platforms.
+const FilePath::CharType kInternalFlashPluginFileName[] =
+#if defined(OS_MACOSX)
+    FILE_PATH_LITERAL("Flash Player Plugin for Chrome.plugin");
+#elif defined(OS_WIN)
+    FILE_PATH_LITERAL("gcswf32.dll");
+#else  // OS_LINUX, etc.
+    FILE_PATH_LITERAL("libgcflashplayer.so");
+#endif
+
+}  // namespace
+
+namespace cef {
+
+// Gets the path for internal plugins.
+bool GetInternalPluginsDirectory(FilePath* result) {
+  // The rest of the world expects plugins in the module directory.
+
+  bool res = PathService::Get(base::DIR_MODULE, result);
+  return res;
+}
+
+bool GetFlashPluginPath(FilePath* result, const char* dllName)
+{
+  FilePath cur;
+
+  if (!GetInternalPluginsDirectory(&cur))
+    return false;
+
+  if (dllName)
+	cur = cur.Append(CefStringUTF16(dllName));
+  else
+	cur = cur.Append(kInternalFlashPluginFileName);
+
+  if (!file_util::PathExists(cur))
+    return false;
+
+  *result = cur;
+  return true;
+}
+
+
+
+
+}  // namespace chrome
diff '--exclude=.svn' -aurN cef.ori/libcef/cef_paths.h cef/libcef/cef_paths.h
--- libcef/cef_paths.h	1970-01-01 01:00:00.000000000 +0100
+++ libcef/cef_paths.h	2012-05-09 11:32:01.629658221 +0200
@@ -0,0 +1,20 @@
+// Copyright (c) 2006-2010 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CEF_COMMON_CHROME_PATHS_H__
+#define CEF_COMMON_CHROME_PATHS_H__
+#pragma once
+
+#include "build/build_config.h"
+
+class FilePath;
+
+namespace cef {
+
+  bool GetInternalPluginsDirectory(FilePath* result);
+  bool GetFlashPluginPath(FilePath* result, const char* dllName);
+
+}  // namespace cef
+
+#endif  // CEF_COMMON_CHROME_PATHS_H__
diff '--exclude=.svn' -aurN cef.ori/libcef/cef_process_ui_thread.cc cef/libcef/cef_process_ui_thread.cc
--- libcef/cef_process_ui_thread.cc	2012-05-09 11:27:19.045674203 +0200
+++ libcef/cef_process_ui_thread.cc	2012-05-09 11:32:01.629658221 +0200
@@ -144,7 +144,11 @@
   // Flush any remaining messages.  This ensures that any accumulated
   // Task objects get destroyed before we exit, which avoids noise in
   // purify leak-test results.
+  //
+  // On linux this seems to dead lock if its called after gtk has stopped
+#ifndef OS_LINUX
   MessageLoop::current()->RunAllPending();
+#endif
 
   // Destroy the storage context object.
   _Context->set_storage_context(NULL);
diff '--exclude=.svn' -aurN cef.ori/libcef/cef_process_ui_thread_gtk.cc cef/libcef/cef_process_ui_thread_gtk.cc
--- libcef/cef_process_ui_thread_gtk.cc	2012-05-09 11:27:19.065674201 +0200
+++ libcef/cef_process_ui_thread_gtk.cc	2012-05-09 11:32:01.629658221 +0200
@@ -4,9 +4,10 @@
 
 #include "cef_process_ui_thread.h"
 #include "browser_impl.h"
+#include "browser_webkit_glue.h"
 
 void CefProcessUIThread::PlatformInit() {
-  
+  webkit_glue::InitializeDataPak();
 }
 
 void CefProcessUIThread::PlatformCleanUp() {
diff '--exclude=.svn' -aurN cef.ori/libcef/cef_string_map.cc cef/libcef/cef_string_map.cc
--- libcef/cef_string_map.cc	2012-05-09 11:27:19.064674202 +0200
+++ libcef/cef_string_map.cc	2012-05-09 11:32:01.629658221 +0200
@@ -30,7 +30,7 @@
   StringMap* impl = (StringMap*)map;
   StringMap::const_iterator it = impl->find(CefString(key));
   if(it == impl->end())
-    return NULL;
+    return 0;
   const CefString& val = it->second;
   return cef_string_set(val.c_str(), val.length(), value, true);
 }
@@ -43,7 +43,7 @@
   StringMap* impl = (StringMap*)map;
   DCHECK(index >= 0 && index < (int)impl->size());
   if(index < 0 || index >= (int)impl->size())
-    return NULL;
+    return 0;
   StringMap::const_iterator it = impl->begin();
   for(int ct = 0; it != impl->end(); ++it, ct++) {
     if(ct == index)
@@ -60,7 +60,7 @@
   StringMap* impl = (StringMap*)map;
   DCHECK(index >= 0 && index < (int)impl->size());
   if(index < 0 || index >= (int)impl->size())
-    return NULL;
+    return 0;
   StringMap::const_iterator it = impl->begin();
   for(int ct = 0; it != impl->end(); ++it, ct++) {
     if(ct == index) {
diff '--exclude=.svn' -aurN cef.ori/libcef/v8_impl.cc cef/libcef/v8_impl.cc
--- libcef/v8_impl.cc	2012-05-09 11:27:19.082674201 +0200
+++ libcef/v8_impl.cc	2012-05-09 11:32:01.633658222 +0200
@@ -736,7 +736,7 @@
     return NULL;
   if(!GetHandle()->IsObject()) {
     NOTREACHED();
-    return false;
+    return NULL;
   }
  
   v8::HandleScope handle_scope;
@@ -749,7 +749,7 @@
   CEF_REQUIRE_UI_THREAD(NULL);
   if(!GetHandle()->IsObject()) {
     NOTREACHED();
-    return false;
+    return NULL;
   }
 
   v8::HandleScope handle_scope;
diff '--exclude=.svn' -aurN cef.ori/libcef/webview_host.cc cef/libcef/webview_host.cc
--- libcef/webview_host.cc	2012-05-09 11:27:19.085674199 +0200
+++ libcef/webview_host.cc	2012-05-09 11:32:01.634658222 +0200
@@ -4,8 +4,9 @@
 
 #include "webview_host.h"
 
-WebViewHost::WebViewHost()
+WebViewHost::WebViewHost(BrowserWebViewDelegate* delegate)
 {
+  delegate_ = delegate;
 }
 
 #if !defined(OS_MACOSX)
diff '--exclude=.svn' -aurN cef.ori/libcef/webview_host_gtk.cc cef/libcef/webview_host_gtk.cc
--- libcef/webview_host_gtk.cc	2012-05-09 11:27:19.057674203 +0200
+++ libcef/webview_host_gtk.cc	2012-05-09 11:32:01.634658222 +0200
@@ -20,9 +20,7 @@
 
 // static
 WebViewHost* WebViewHost::Create(GtkWidget* parent_view,
-                                 const gfx::Rect& rect,
                                  BrowserWebViewDelegate* delegate,
-                                 PaintDelegate* paint_delegate,
                                  WebDevToolsAgentClient* dev_tools_client,
                                  const WebPreferences& prefs) {
   WebViewHost* host = new WebViewHost();
@@ -30,11 +28,7 @@
   host->view_ = WebWidgetHost::CreateWidget(parent_view, host);
   host->plugin_container_manager_.set_host_widget(host->view_);
 
-#if defined(WEBKIT_HAS_WEB_AUTO_FILL_CLIENT)
-  host->webwidget_ = WebView::create(delegate, NULL);
-#else
   host->webwidget_ = WebView::create(delegate);
-#endif
   host->webview()->setDevToolsAgentClient(dev_tools_client);
   prefs.Apply(host->webview());
   host->webview()->initializeMainFrame(delegate);
@@ -43,6 +37,11 @@
   return host;
 }
 
+WebViewHost::~WebViewHost() {
+  //have issue when the map gets unloaded that it causes DestoryPluginContainer to be called. Make sure we do it before we are invalid.
+  plugin_container_manager_ = webkit::npapi::GtkPluginContainerManager();
+}
+
 WebView* WebViewHost::webview() const {
   return static_cast<WebView*>(webwidget_);
 }
diff '--exclude=.svn' -aurN cef.ori/libcef/webview_host.h cef/libcef/webview_host.h
--- libcef/webview_host.h	2012-05-09 11:27:19.076674202 +0200
+++ libcef/webview_host.h	2012-05-09 11:32:01.634658222 +0200
@@ -7,6 +7,7 @@
 
 #include "base/basictypes.h"
 #include "ui/gfx/native_widget_types.h"
+#include "ui/gfx/rect.h"
 #include "webwidget_host.h"
 
 #if defined(TOOLKIT_USES_GTK)
@@ -27,18 +28,24 @@
   // The new instance is deleted once the associated NativeView is destroyed.
   // The newly created window should be resized after it is created, using the
   // MoveWindow (or equivalent) function.
+#ifdef OS_WIN
   static WebViewHost* Create(gfx::NativeView parent_view,
-                             const gfx::Rect& rect,
-                             BrowserWebViewDelegate* delegate,
-                             PaintDelegate* paint_delegate,
-                             WebKit::WebDevToolsAgentClient* devtools_client,
-                             const WebPreferences& prefs);
-
-  virtual ~WebViewHost();
-
+                                 const gfx::Rect&,
+                                 BrowserWebViewDelegate* delegate,
+                                 PaintDelegate* paint_delegate,
+								 WebKit::WebDevToolsAgentClient* dev_tools_client,
+                                 const WebPreferences& prefs);
+#else                                 
+  static WebViewHost* Create(gfx::NativeView parent_view,
+	                             BrowserWebViewDelegate* delegate,
+	                             WebKit::WebDevToolsAgentClient* devtools_client,
+	                             const WebPreferences& prefs);
+#endif
   WebKit::WebView* webview() const;
 
 #if defined(TOOLKIT_USES_GTK)
+  ~WebViewHost();
+
   // Create a new plugin parent container for a given plugin XID.
   void CreatePluginContainer(gfx::PluginWindowHandle id);
 
@@ -50,22 +57,27 @@
   }
 #elif defined(OS_MACOSX)
   void SetIsActive(bool active);
-  virtual void MouseEvent(NSEvent *);
-  virtual void SetFocus(bool enable);
 #endif
 
- protected:
-   WebViewHost();
+#ifdef OS_WIN
+ ~WebViewHost();
+#endif
 
-#if defined(OS_WIN)
+ protected:
+#ifdef OS_WIN
+  WebViewHost(BrowserWebViewDelegate* delegate);
   virtual bool WndProc(UINT message, WPARAM wparam, LPARAM lparam);
-  virtual void MouseEvent(UINT message, WPARAM wparam, LPARAM lparam);
+  void MouseEvent(UINT message, WPARAM wparam, LPARAM lparam);
 #endif
 
 #if defined(TOOLKIT_USES_GTK)
   // Helper class that creates and moves plugin containers.
   webkit::npapi::GtkPluginContainerManager plugin_container_manager_;
 #endif
+
+#ifdef OS_WIN
+  BrowserWebViewDelegate* delegate_;
+ #endif
 };
 
 #endif  // _WEBVIEW_HOST_H
diff '--exclude=.svn' -aurN cef.ori/libcef/webview_host_win.cc cef/libcef/webview_host_win.cc
--- libcef/webview_host_win.cc	2012-05-09 11:27:19.089674201 +0200
+++ libcef/webview_host_win.cc	2012-05-09 11:32:01.634658222 +0200
@@ -17,13 +17,13 @@
 static const wchar_t kWindowClassName[] = L"WebViewHost";
 
 /*static*/
-WebViewHost* WebViewHost::Create(HWND parent_view,
+WebViewHost* WebViewHost::Create(gfx::NativeView parent_view,
                                  const gfx::Rect&,
                                  BrowserWebViewDelegate* delegate,
                                  PaintDelegate* paint_delegate,
                                  WebDevToolsAgentClient* dev_tools_client,
                                  const WebPreferences& prefs) {
-  WebViewHost* host = new WebViewHost();
+  WebViewHost* host = new WebViewHost(delegate);
 
   if (!paint_delegate) {
     static bool registered_class = false;
@@ -65,6 +65,11 @@
 }
 
 bool WebViewHost::WndProc(UINT message, WPARAM wparam, LPARAM lparam) {
+
+  if (delegate_->WndProc(message, wparam, lparam)){
+    return false;
+  }
+
   switch (message) {
   case WM_SETFOCUS:
     // Set the current WebViewHost in case a drag action is started before mouse
@@ -75,7 +80,9 @@
   return false;
 }
 
+
 void WebViewHost::MouseEvent(UINT message, WPARAM wparam, LPARAM lparam) {
   _Context->set_current_webviewhost(this);
   WebWidgetHost::MouseEvent(message, wparam, lparam);
 }
+
diff '--exclude=.svn' -aurN cef.ori/libcef/webwidget_host_gtk.cc cef/libcef/webwidget_host_gtk.cc
--- libcef/webwidget_host_gtk.cc	2012-05-09 11:27:19.078674202 +0200
+++ libcef/webwidget_host_gtk.cc	2012-05-09 11:32:01.635658222 +0200
@@ -20,6 +22,11 @@
 #include "third_party/WebKit/Source/WebKit/chromium/public/WebScreenInfo.h"
 #include "third_party/WebKit/Source/WebKit/chromium/public/WebSize.h"
 
+#ifndef NDEBUG
+	#define PAUSE_DEBUGGER() asm("int $3")#else
+	#define PAUSE_DEBUGGER()
+#endif
+
 using WebKit::WebInputEventFactory;
 using WebKit::WebKeyboardEvent;
 using WebKit::WebMouseEvent;
@@ -64,8 +71,24 @@
   // our GtkDrawingAreaContainer here, for the reasons mentioned above.
   static GtkWidget* CreateNewWidget(GtkWidget* parent_view,
                                     WebWidgetHost* host) {
+    if(!parent_view || !host)
+      return NULL;
+     
     GtkWidget* widget = gtk_fixed_new();
     gtk_fixed_set_has_window(GTK_FIXED(widget), true);
+    
+    GdkColor black, green;
+	gdk_color_parse("black", &black);
+	gdk_color_parse("green", &green);
+    
+#if defined(NDEBUG)
+    gtk_widget_modify_bg(widget, GTK_STATE_NORMAL, &black);
+#else
+    gtk_widget_modify_bg(widget, GTK_STATE_NORMAL, &green);
+#endif
+
+    // Allow the browser window to be resized freely.
+    gtk_widget_set_size_request(widget, 0, 0);
 
     gtk_box_pack_start(GTK_BOX(parent_view), widget, TRUE, TRUE, 0);
 
@@ -107,6 +131,72 @@
 
     g_object_set_data(G_OBJECT(widget), kWebWidgetHostKey, host);
     return widget;
+    
+
+// the following is newer code from Chrome's implementation 
+// and requires some extras, including the two commented out
+// includes at the top. Should work though.    
+/*    GtkWidget* widget = gtk_preserve_window_new();
+    
+    GdkColor blackCol;
+	gdk_color_parse("black", &blackCol);
+	GdkColor greenCol;
+	gdk_color_parse("green", &greenCol);
+    
+#if defined(NDEBUG)
+    gtk_widget_modify_bg(widget, GTK_STATE_NORMAL, &blackCol);
+#else
+    gtk_widget_modify_bg(widget, GTK_STATE_NORMAL, &greenCol);
+#endif
+    // Allow the browser window to be resized freely.
+    gtk_widget_set_size_request(widget, 0, 0);
+
+    gtk_widget_add_events(widget, GDK_EXPOSURE_MASK |
+                                  GDK_POINTER_MOTION_MASK |
+                                  GDK_BUTTON_PRESS_MASK |
+                                  GDK_BUTTON_RELEASE_MASK |
+                                  GDK_KEY_PRESS_MASK |
+                                  GDK_KEY_RELEASE_MASK |
+                                  GDK_FOCUS_CHANGE_MASK |
+                                  GDK_ENTER_NOTIFY_MASK |
+                                  GDK_LEAVE_NOTIFY_MASK);
+    GTK_WIDGET_SET_FLAGS(widget, GTK_CAN_FOCUS);
+
+    g_signal_connect(widget, "size-request",
+                     G_CALLBACK(&HandleSizeRequest), host);
+    g_signal_connect(widget, "size-allocate",
+                     G_CALLBACK(&HandleSizeAllocate), host);
+    g_signal_connect(widget, "configure-event",
+                     G_CALLBACK(&HandleConfigure), host);
+    g_signal_connect(widget, "expose-event",
+                     G_CALLBACK(&HandleExpose), host);
+    g_signal_connect(widget, "destroy",
+                     G_CALLBACK(&HandleDestroy), host);
+    g_signal_connect(widget, "key-press-event",
+                     G_CALLBACK(&HandleKeyPress), host);
+    g_signal_connect(widget, "key-release-event",
+                     G_CALLBACK(&HandleKeyRelease), host);
+    g_signal_connect(widget, "focus",
+                     G_CALLBACK(&HandleFocus), host);
+    g_signal_connect(widget, "focus-in-event",
+                     G_CALLBACK(&HandleFocusIn), host);
+    g_signal_connect(widget, "focus-out-event",
+                     G_CALLBACK(&HandleFocusOut), host);
+    g_signal_connect(widget, "button-press-event",
+                     G_CALLBACK(&HandleButtonPress), host);
+    g_signal_connect(widget, "button-release-event",
+                     G_CALLBACK(&HandleButtonRelease), host);
+    g_signal_connect(widget, "motion-notify-event",
+                     G_CALLBACK(&HandleMotionNotify), host);
+
+    // Connect after so that we are called after the handler installed by the
+    // TabContentsView which handles zoom events.
+    g_signal_connect_after(widget, "scroll-event",
+                           G_CALLBACK(HandleScroll), host);
+
+    g_object_set_data(G_OBJECT(widget), kWebWidgetHostKey, host);
+
+    return widget;*/
   }
 
  private:
@@ -286,12 +374,35 @@
 WebWidgetHost* WebWidgetHost::Create(GtkWidget* parent_view,
                                      WebWidgetClient* client,
                                      PaintDelegate* paint_delegate) {
+  if (!parent_view || !client)
+    return NULL;
+    
+  GtkWidget* popupwindow = gtk_window_new(GTK_WINDOW_POPUP);
+  GtkWidget* vbox = gtk_vbox_new(FALSE, 0);
+  
   WebWidgetHost* host = new WebWidgetHost();
-  host->view_ = CreateWidget(parent_view, host);
+
+  host->view_ = CreateWidget(vbox, host);
   host->webwidget_ = WebPopupMenu::create(client);
+  
+  gtk_container_add(GTK_CONTAINER(popupwindow), vbox);
+
   // We manage our own double buffering because we need to be able to update
   // the expose area in an ExposeEvent within the lifetime of the event handler.
   gtk_widget_set_double_buffered(GTK_WIDGET(host->view_), false);
+  
+  // Grab all input to the test shell and funnel it to the popup.
+  // The popup will detect if mouseclicks are outside its bounds and destroy
+  // itself if so. Clicks that are outside the test_shell window will destroy
+  // the popup by taking focus away from the main window.
+  gtk_grab_add(host->view_);
+
+	GdkGeometry geom;
+	geom.min_width = 1;
+	geom.min_height = 1;
+
+	gtk_window_set_geometry_hints(GTK_WINDOW(popupwindow), GTK_WIDGET(popupwindow),
+		   &geom, GDK_HINT_MIN_SIZE);
 
   return host;
 }
@@ -301,7 +412,7 @@
 
   UpdatePaintRect(damaged_rect);
 
-  if (!g_handling_expose) {
+  if (view_ && !g_handling_expose) {
     gtk_widget_queue_draw_area(GTK_WIDGET(view_), damaged_rect.x(),
         damaged_rect.y(), damaged_rect.width(), damaged_rect.height());
   }
@@ -344,12 +455,17 @@
   g_object_set_data(G_OBJECT(view_), kWebWidgetHostKey, NULL);
   g_signal_handlers_disconnect_matched(view_,
       G_SIGNAL_MATCH_DATA, 0, 0, NULL, NULL, this);
-  webwidget_->close();
+      
+  if (webwidget_)
+    webwidget_->close();
 }
 
 void WebWidgetHost::Resize(const gfx::Size &newsize) {
+  // The pixel buffer backing us is now the wrong size
+  canvas_.reset();
   logical_size_ = newsize;
-  SetSize(newsize.width(), newsize.height());
+  //SetSize(newsize.width(), newsize.height());
+  webwidget_->resize(newsize); // TEST?
 }
 
 void WebWidgetHost::Paint() {
diff '--exclude=.svn' -aurN cef.ori/libcef_dll/cpptoc/domdocument_cpptoc.cc cef/libcef_dll/cpptoc/domdocument_cpptoc.cc
--- libcef_dll/cpptoc/domdocument_cpptoc.cc	2012-05-09 11:27:16.242674362 +0200
+++ libcef_dll/cpptoc/domdocument_cpptoc.cc	2012-05-09 11:32:01.636658222 +0200
@@ -110,7 +110,7 @@
 {
   DCHECK(self);
   if(!self)
-    return NULL;
+    return 0;
 
   return CefDOMDocumentCppToC::Get(self)->HasSelection();
 }
@@ -134,7 +134,7 @@
 {
   DCHECK(self);
   if(!self)
-    return NULL;
+    return 0;
 
   return CefDOMDocumentCppToC::Get(self)->GetSelectionStartOffset();
 }
@@ -158,7 +158,7 @@
 {
   DCHECK(self);
   if(!self)
-    return NULL;
+    return 0;
 
   return CefDOMDocumentCppToC::Get(self)->GetSelectionEndOffset();
 }
diff '--exclude=.svn' -aurN cef.ori/libcef_dll/ctocpp/browser_ctocpp.h cef/libcef_dll/ctocpp/browser_ctocpp.h
--- libcef_dll/ctocpp/browser_ctocpp.h	2012-05-09 11:27:16.668674338 +0200
+++ libcef_dll/ctocpp/browser_ctocpp.h	2012-05-09 11:32:01.641658222 +0200
@@ -55,6 +55,10 @@
   virtual void StopFinding(bool clearSelection) OVERRIDE;
   virtual double GetZoomLevel() OVERRIDE;
   virtual void SetZoomLevel(double zoomLevel) OVERRIDE;
+#ifndef IGNORE_DESURA
+  virtual void InspectElement(int x, int y) OVERRIDE; 
+  virtual void MouseWheelEvent(int x, int y, int delta, unsigned int flags) OVERRIDE;
+#endif
   virtual void ShowDevTools() OVERRIDE;
   virtual void CloseDevTools() OVERRIDE;
   virtual bool IsWindowRenderingDisabled() OVERRIDE;
diff '--exclude=.svn' -aurN cef.ori/libcef_dll/ctocpp/frame_ctocpp.h cef/libcef_dll/ctocpp/frame_ctocpp.h
--- libcef_dll/ctocpp/frame_ctocpp.h	2012-05-09 11:27:16.683674337 +0200
+++ libcef_dll/ctocpp/frame_ctocpp.h	2012-05-09 11:32:01.663658220 +0200
@@ -55,6 +55,11 @@
   virtual CefString GetName() OVERRIDE;
   virtual CefString GetURL() OVERRIDE;
   virtual CefRefPtr<CefBrowser> GetBrowser() OVERRIDE;
+#ifndef IGNORE_DESURA
+  virtual void ZoomIn() OVERRIDE;
+  virtual void ZoomOut() OVERRIDE;
+  virtual void ZoomNormal() OVERRIDE;
+#endif
   virtual void VisitDOM(CefRefPtr<CefDOMVisitor> visitor) OVERRIDE;
 };
 
diff '--exclude=.svn' -aurN cef.ori/libcef_dll/ctocpp/v8value_ctocpp.cc cef/libcef_dll/ctocpp/v8value_ctocpp.cc
--- libcef_dll/ctocpp/v8value_ctocpp.cc	2012-05-09 11:27:16.683674337 +0200
+++ libcef_dll/ctocpp/v8value_ctocpp.cc	2012-05-09 11:32:01.666658218 +0200
@@ -297,7 +297,7 @@
 CefRefPtr<CefV8Value> CefV8ValueCToCpp::GetValue(const CefString& key)
 {
   if(CEF_MEMBER_MISSING(struct_, get_value_bykey))
-    return false;
+    return NULL;
 
   cef_v8value_t* valueStruct = struct_->get_value_bykey(struct_,
       key.GetStruct());
@@ -309,7 +309,7 @@
 CefRefPtr<CefV8Value> CefV8ValueCToCpp::GetValue(int index)
 {
   if(CEF_MEMBER_MISSING(struct_, get_value_byindex))
-    return false;
+    return NULL;
 
   cef_v8value_t* valueStruct = struct_->get_value_byindex(struct_, index);
   if(valueStruct)
@@ -363,7 +363,7 @@
 CefRefPtr<CefBase> CefV8ValueCToCpp::GetUserData()
 {
   if(CEF_MEMBER_MISSING(struct_, get_user_data))
-    return false;
+    return NULL;
 
   cef_base_t* baseStruct = struct_->get_user_data(struct_);
   if(baseStruct)
@@ -393,7 +393,7 @@
 CefRefPtr<CefV8Handler> CefV8ValueCToCpp::GetFunctionHandler()
 {
   if(CEF_MEMBER_MISSING(struct_, get_function_handler))
-    return false;
+    return NULL;
 
   cef_v8handler_t* handlerStruct = struct_->get_function_handler(struct_);
   if(handlerStruct)
diff '--exclude=.svn' -aurN cef.ori/libcef_dll/version.h cef/libcef_dll/version.h
--- libcef_dll/version.h	1970-01-01 01:00:00.000000000 +0100
+++ libcef_dll/version.h	2012-05-09 11:32:01.667658219 +0200
@@ -0,0 +1,11 @@
+// This file is generated by the make_version_header.py tool.
+#ifndef _VERSION_H
+#define _VERSION_H
+
+#define SVN_REVISION 1001
+#define COPYRIGHT_YEAR 2011
+
+#define DO_MAKE_STRING(p) #p
+#define MAKE_STRING(p) DO_MAKE_STRING(p)
+
+#endif
diff '--exclude=.svn' -aurN cef.ori/patch/patch.cfg cef/patch/patch.cfg
--- patch/patch.cfg	2012-05-09 11:27:15.411674409 +0200
+++ patch/patch.cfg	2012-05-09 11:32:01.667658219 +0200
@@ -6,4 +6,8 @@
   'build' : '../build/',
   # http://codereview.chromium.org/6730028/
   'base' : '../base/',
+  'webkit' : '../third_party/WebKit/Source/WebCore/',
+  'root' : '../',
+  'resources' : '../',
+  'desura': '../',
 }
diff '--exclude=.svn' -aurN cef.ori/patch/patches/desura.patch cef/patch/patches/desura.patch
--- patch/patches/desura.patch	1970-01-01 01:00:00.000000000 +0100
+++ patch/patches/desura.patch	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,27 @@
+Index: net/proxy/proxy_service.cc
+===================================================================
+--- net/proxy/proxy_service.cc	(revision 91424)
++++ net/proxy/proxy_service.cc	(working copy)
+@@ -478,7 +478,7 @@
+   DCHECK(proxy_config_service);
+ 
+   if (!ProxyResolverFactoryForSystem::IsSupported()) {
+-    LOG(WARNING) << "PAC support disabled because there is no "
++    DLOG(WARNING) << "PAC support disabled because there is no "
+                     "system implementation";
+     return CreateWithoutProxyResolver(proxy_config_service, net_log);
+   }
+Index: net/ocsp/nss_ocsp.cc
+===================================================================
+--- net/ocsp/nss_ocsp.cc	(revision 91424)
++++ net/ocsp/nss_ocsp.cc	(working copy)
+@@ -578,7 +578,7 @@
+   net::URLRequestContext* request_context = g_request_context;
+   pthread_mutex_unlock(&g_request_context_lock);
+   if (request_context == NULL) {
+-    LOG(ERROR) << "No URLRequestContext for OCSP handler.";
++    DLOG(ERROR) << "No URLRequestContext for OCSP handler.";
+     // The application failed to call SetURLRequestContextForOCSP, so we
+     // can't create and use net::URLRequest.  PR_NOT_IMPLEMENTED_ERROR is not an
+     // accurate error code for this error condition, but is close enough.
+
diff '--exclude=.svn' -aurN cef.ori/patch/patches/resources.patch cef/patch/patches/resources.patch
--- patch/patches/resources.patch	1970-01-01 01:00:00.000000000 +0100
+++ patch/patches/resources.patch	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,14 @@
+Index: tools/grit/resource_ids
+===================================================================
+--- tools/grit/resource_ids	(revision 91424)
++++ tools/grit/resource_ids	(working copy)
+@@ -41,6 +41,9 @@
+   "webkit/tools/test_shell/test_shell_resources.grd": {
+     "includes": [5000],
+   },
++  "cef/cef_resources.grd": {
++    "includes": [5000],
++  },
+   "ui/resources/ui_resources.grd": {
+     "includes": [5500],
+   },
diff '--exclude=.svn' -aurN cef.ori/patch/patches/root.patch cef/patch/patches/root.patch
--- patch/patches/root.patch	1970-01-01 01:00:00.000000000 +0100
+++ patch/patches/root.patch	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,12 @@
+Index: base/message_loop.h
+===================================================================
+--- base/message_loop.h	(revision 91424)
++++ base/message_loop.h	(working copy)
+@@ -671,7 +671,6 @@
+   // Returns the MessageLoopForIO of the current thread.
+   static MessageLoopForIO* current() {
+     MessageLoop* loop = MessageLoop::current();
+-    DCHECK_EQ(MessageLoop::TYPE_IO, loop->type());
+     return static_cast<MessageLoopForIO*>(loop);
+   }
+ 
diff '--exclude=.svn' -aurN cef.ori/patch/patches/webkit.patch cef/patch/patches/webkit.patch
--- patch/patches/webkit.patch	1970-01-01 01:00:00.000000000 +0100
+++ patch/patches/webkit.patch	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,95 @@
+Index: bindings/v8/custom/V8DOMWindowCustom.cpp
+===================================================================
+--- bindings/v8/custom/V8DOMWindowCustom.cpp	(revision 90274)
++++ bindings/v8/custom/V8DOMWindowCustom.cpp	(working copy)
+@@ -450,7 +450,12 @@
+ 
+     // FIXME: Handle exceptions properly.
+     String urlString = toWebCoreStringWithNullOrUndefinedCheck(args[0]);
++#if 0 //DESURA
+     AtomicString frameName = (args[1]->IsUndefined() || args[1]->IsNull()) ? "_blank" : AtomicString(toWebCoreString(args[1]));
++#else
++	AtomicString frameName = (args[1]->IsUndefined() || args[1]->IsNull()) ? "_self" : AtomicString(toWebCoreString(args[1]));
++#endif
++
+     String windowFeaturesString = toWebCoreStringWithNullOrUndefinedCheck(args[2]);
+ 
+     RefPtr<DOMWindow> openedWindow = impl->open(urlString, frameName, windowFeaturesString, activeWindow, firstWindow);
+Index: html/HTMLAnchorElement.cpp
+===================================================================
+--- html/HTMLAnchorElement.cpp	(revision 90274)
++++ html/HTMLAnchorElement.cpp	(working copy)
+@@ -296,7 +296,10 @@
+ 
+ String HTMLAnchorElement::target() const
+ {
+-    return getAttribute(targetAttr);
++    String res = getAttribute(targetAttr); 
++    if (res == "_blank")
++        res = "_self";
++    return res;
+ }
+ 
+ String HTMLAnchorElement::hash() const
+Index: html/HTMLViewSourceDocument.cpp
+===================================================================
+--- html/HTMLViewSourceDocument.cpp	(revision 90274)
++++ html/HTMLViewSourceDocument.cpp	(working copy)
+@@ -317,9 +317,20 @@
+         classValue = "webkit-html-attribute-value webkit-html-external-link";
+     else
+         classValue = "webkit-html-attribute-value webkit-html-resource-link";
++#if 0 //DESURA
+     attrs->addAttribute(Attribute::createMapped(classAttr, classValue));
+     attrs->addAttribute(Attribute::createMapped(targetAttr, "_blank"));
+     attrs->addAttribute(Attribute::createMapped(hrefAttr, url));
++#else
++	PassRefPtr<Attribute> att = Attribute::createMapped(targetAttr, "_self");
++
++	if (att->value() == "_blank")
++		att->setValue("_self");
++
++	attrs->addAttribute(Attribute::createMapped(classAttr, classValue));
++	attrs->addAttribute(att);
++    attrs->addAttribute(Attribute::createMapped(hrefAttr, url));
++#endif
+     anchor->setAttributeMap(attrs.release());
+     m_current->parserAddChild(anchor);
+     anchor->attach();
+Index: page/ContextMenuController.cpp
+===================================================================
+--- page/ContextMenuController.cpp	(revision 90274)
++++ page/ContextMenuController.cpp	(working copy)
+@@ -150,7 +150,8 @@
+     m_contextMenu = m_client->customizeMenu(m_contextMenu.release());
+ #else
+     PlatformMenuDescription customMenu = m_client->getCustomMenuFromDefaultItems(m_contextMenu.get());
+-    m_contextMenu->setPlatformDescription(customMenu);
++	if (m_contextMenu.get())
++        m_contextMenu->setPlatformDescription(customMenu);
+ #endif
+     event->setDefaultHandled();
+ }
+Index: svg/SVGAElement.cpp
+===================================================================
+--- svg/SVGAElement.cpp	(revision 90274)
++++ svg/SVGAElement.cpp	(working copy)
+@@ -175,6 +175,7 @@
+                     return;
+             }
+ 
++#if 0 //Desura
+             // FIXME: Why does the SVG anchor element have this special logic
+             // for middle click that the HTML anchor element does not have?
+             // Making a middle click open a link in a new window or tab is
+@@ -186,7 +186,9 @@
+             // helpful.
+             if (target.isEmpty())
+                 target = (fastGetAttribute(XLinkNames::showAttr) == "new") ? "_blank" : "_self";
+-
++#else
++			String target = "_self";
++#endif
+             handleLinkClick(event, document(), url, target);
+             return;
+         }
diff '--exclude=.svn' -aurN cef.ori/resources/AHEM____.TTF cef/resources/AHEM____.TTF
--- resources/AHEM____.TTF	1970-01-01 01:00:00.000000000 +0100
+++ resources/AHEM____.TTF	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,23 @@
+       0OS/2xPJ  8   `cmapÖF  l  rgasp  	  0°   glyfI³tÚ  à  dheadÖ¢N   ¼   6hhea
+   ô   $hmtx¹  }    Ôloca u'"  &D  ìmaxp ø 	      name~¸  (0  hpostÐ  .       BQg_<õ 	è    ³o_Y    À-«I  ÿ8è               ÿ8  è    è                õ    õ                        è   ¼   ¼  Å 2   	        ¯  H        W3C  @  ð ÿ8    È  @           è }    è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è  è          L          & 
+                                                                       	   
+                        ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ `   a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~   Û     Ý     ã   ê   è  ë ì   ä æ å Ô é   Ó      ç Ñ í Ò   Þ     Î Ï Õ Ö Ø Ù    î   Ð â ¡ à á     Ü ¢ × Ú ß £ ¤ ¥ ¦ § ¨ © ª « ¬ ­   ® ¯ ° ± ² ³ ´ µ ¶ · ¸ ¹ º » ¼ &   N @   & ~ ÿ1SxÇÉÝ©¼À     " & 0 : D!"!&"""""""+"H"`"e"ò%Êðÿÿ     (  1RxÆÉØ©¼À       & 0 9 D!"!&"""""""+"H"`"d"ò%Êð ÿÿÿãÿâ  ÿÿ|ÿXÿ?  ýì  ý>ý*üÓýßÿàÂ  à¼à»à¸à¯à§àßÁß­ÞâÞÌÞÖ    ÞÊÞ¾Þ¥ÞÞÝûÛ$ï      J                         þ                       ì î                       ¡  ½       Ä  µ   Ç È    ¢ ¹ Æ   Ê É Ë   ¥ £  a b  c § d ¤ ¦ « ¨ © ª ¾ e ® ¬ ­  f Å  ± ¯ ° g À Â  i h j l k m  n p o q r t s u v ¿ w y x z | {   ~ }   Á Ã   ³ ¼ ¶ · ¸ » ´ º   × æ Ä ¢ ç &   N @   & ~ ÿ1SxÇÉÝ©¼À     " & 0 : D!"!&"""""""+"H"`"e"ò%Êðÿÿ     (  1RxÆÉØ©¼À       & 0 9 D!"!&"""""""+"H"`"d"ò%Êð ÿÿÿãÿâ  ÿÿ|ÿXÿ?  ýì  ý>ý*üÓýßÿàÂ  à¼à»à¸à¯à§àßÁß­ÞâÞÌÞÖ    ÞÊÞ¾Þ¥ÞÞÝûÛ$ï      J                         þ                       ì î                       ¡  ½       Ä  µ   Ç È    ¢ ¹ Æ   Ê É Ë   ¥ £  a b  c § d ¤ ¦ « ¨ © ª ¾ e ® ¬ ­  f Å  ± ¯ ° g À Â  i h j l k m  n p o q r t s u v ¿ w y x z | {   ~ }   Á Ã   ³ ¼ ¶ · ¸ » ´ º   × æ Ä ¢ ç    }  k     3!%!!}îýôþ üà}&   ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è     1!!èüÈ    ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü       è    !!èü üà     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü     ÿ8è    !!èü ü         " 0 > L Z h v     ® ¼ Ê Ø æ ô,:HVdrª¸ÆÔâðþ(6DR`n|¦´ÂÐÞìú$2@N\jx¢°¾ÌÚèö .<JXdrª¸ÆÔâðþ(6DR`n|¦´ÂÐÞìú$2@N\jx¢°¾ÌÚèö .<JXft¬ºÈÖäò *88FTbp~¨¶ÄÒàîü	
+		&	4	B	P	^	l	z			¤	²	À	Î	Ü	ê	ø
+
+
+"
+0
+>
+L
+Z
+h
+v
+
+
+ 
+®
+¼
+Ê
+Ø
+æ
+ô,:HVdrª¸ÆÔâðþ(6DR`n|¦´ÂÐÞìú$2   J                          ¦         ´        Ô        Ü        ò        Ïú       É       Í       Ô       ä       è       ó       ÷       û         	    	  ¤  	  ¬  	   º  	  Ú  	  â  	  ø  	     	    	   M o s t   c h a r a c t e r s   a r e   t h e   e m   s q u a r e ,   e x c e p t   & E A c u t e   a n d   " p " ,   w h i c h   s h o w   a s c e n t / d e s c e n t   f r o m   t h e   b a s e l i n e .   U s e f u l   f o r   t e s t i n g   c o m p o s i t i o n   s y s t e m s .   P r o d u c e d   b y   T o d d   F a h r n e r   f o r   t h e   C S S   S a m u r a i ' s   b r o w s e r   t e s t i n g . A h e m R e g u l a r V e r s i o n   1 . 1   A h e m A h e m V e r s i o n   1 . 1 A h e mMost characters are the em square, except &EAcute and "p", which show ascent/descent from the baseline. Useful for testing composition systems. Produced by Todd Fahrner for the CSS Samurai's browser testing.AhemRegularVersion 1.1 AhemAhemVersion 1.1AhemAhemRegularAhem M o s t   c h a r a c t e r s   a r e   t h e   e m   s q u a r e ,   e x c e p t   & E A c u t e   a n d   " p " ,   w h i c h   s h o w   a s c e n t / d e s c e n t   f r o m   t h e   b a s e l i n e .   U s e f u l   f o r   t e s t i n g   c o m p o s i t i o n   s y s t e m s .   P r o d u c e d   b y   T o d d   F a h r n e r   f o r   t h e   C S S   S a m u r a i ' s   b r o w s e r   t e s t i n g . A h e m R e g u l a r V e r s i o n   1 . 1   A h e m A h e m V e r s i o n   1 . 1 A h e m A h e m R e g u l a r A h e m       ÿ{                     õ          	                        ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~                       ¡ ¢ £ ¤ © ª ¬ ­ ® ¯ ¶ · ¸ º ½ Ã Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ó Ô Õ Ö × Ø Ù Ú Û Ü Ý Þ ß à á è é ê ë ì í î ï ð ñ ò ó ô õ ö     ° ± » ¦ ¨   ² ³ Ä ´ µ Å  Â  « Æ ¾ ¿ ¼     ¥      § ¹ Ò À Á NULLHTDEL       ÿÿ 
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/resources/cef.ico cef/resources/cef.ico
--- resources/cef.ico	1970-01-01 01:00:00.000000000 +0100
+++ resources/cef.ico	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,19 @@
+           è          (  n  00    ¨          ¨  >      h  æ  00     ¨%  N!         ¨  öF       h  W  (       @                                                 ÀÀÀ   ÿ  ÿ   ÿÿ ÿ   ÿ ÿ ÿÿ  ÿÿÿ ªªªªªªªªªªªªªªªª                wwwwwwwwwwwwwwwpxpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxwwwwwwwwwwwwwxpxpxDDDDDDDDD@    pxDDDDDDDDDHpxDDDDDDDDDHpxDDDDDDDDDDDDDDpxpwwwwwwwwwwwwwwwpªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª                                                                                                                                (                                                        ÀÀÀ   ÿ  ÿ   ÿÿ ÿ   ÿ ÿ ÿÿ  ÿÿÿ ªªªªªªªª        wwwwwwwpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxwwwwwwpxDDDðððpxDDDDDDpxpwwwwwwwwªªªªªªªª                                                                (   0   `                             qj {r     ¥R' £Q' ¢P' H# §S$ §S% ¥R& ¥S& ¤R& ¤R' ®hC ¬W! «V" ªV" ¨U# ¨U$ iP ±Z ±Z ®Y ¯X  ­X  ¸^ µ] µ] ³[ ³\ ¼a º` ¹` ¸_ Äg Äg Àd ¾c Íl
+ Ëk Èi Éi Æh Æi ¤e) ÊP ¹b  ¹b ¸b Ùt Øs ²_ «[ ª[ ¹c Ör Ùv Ôp µb Óq Òo Ñp Úx
+ Ïn	 ¼h	 Öw Âo Æt Èy" Ë}' ß, È3 êE Ö@ í¤U ø¼| ù¾ Ös  Òq  ½f  ¹c  ¸b  ¸c  Ùt Ùu Öt Ôr Âj ¼e ¹c ¸c ­] ª[ ª\ Ùu Ùv Øt Øu Öt ¼e ­] «\ Ùv Øu Øv Öu Ðq Ên Êo ª\ Ùv Ùw Øu Øv ×u Ùw ×v Øw Ùw Õv ×w ×x	 Ùx
+ Úy Úz Ùz Øz Ú{ Ñy Ìw Ý Ät Ât ë' ê( ë, ë, ì- ë- ë. í0 ì0 ì0 ì0 ì1 ì3 Û1 ì6 í7 í8 ì8 ì8 í: í= í> ì= î@ í? îB îD íE ï¢I î¡I î¢I ã S ê©^ ÞÜÇ þüç íÿÿ ðÿÿ ôÿÿ øÿÿ ùÿÿ úÿÿ ûÿÿ üÿÿ ýÿÿ þÿÿ Fpã cqµ ÿÿÿ sss ppp iii aaa ``` ___ ]]] [[[ YYY XXX                                                                                                                                                                                                                                                                     ¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿µ¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¶¿¾¿¾¿	§«««¬««««¨©©¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬ª«§
+¾¿«««¬¬¬¬¬««¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¾¿¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¾¿­¬¬­¬­¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬«¾¿­­­¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¾¿®­­¬­­®®­­¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬­¾¿®®®¬®®®¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬­¾¿®®®¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬®¾¿¯®¯¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬®¾¿°¯°¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬®!¾¿ °°°¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿%±°°¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°±%¾¿$´´±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬±±$¾¿"´´´¬¬´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´#¾¿"´´´¬¬´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´#¾¿"´´´¬¬´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´#¾¿*´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´+¾¿(´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´)¼¿'´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´¬¬´¬¬´´´'º¿&´´´¬´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´&¸¿?´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´?¸¿<´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´´=¸¿9´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´;¸¿7¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦A¹¿63[4]5mm]5\]m]mm5\mm5555555\\\5\\\5m\55\\5ed:»¿cOXY/P.Z0.0.QR00/ZPP0000000/0PPZR.BI@/DE0, C½¿WkV21TSav^8{|}>qooggggggg1`_fhsnHK{JLp²³G·¿l¤¥ ¢£¡-Fj¿¿¿Nw~ytMMMMMMUbbrrrrrxxxxxxxxrriUMMMMMMMMMUuzt¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ                                                                                                                                                                                                                                                                                 ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  (       @                             ~r     YRO ¢M" ¡M"  M" ¤O$ ¦S( ¤S) xH0 ~L3 wG0 wH0 rE. xI1 YB \TP XRO ¡K ¢N! ¤O" ¢N" ¡N" ¡O$ xI0 pE. ZSO ³h: ´lA ²j@ Ès Çz  B  @  µi7 Ìq Êr YSO b_] ¢F   E  C  D  E  C  »n5 ·l6 f> În És [TO ©L  ¦I  ¦J  ¤I  Æs- Ãr. Áp0 ¾o1 ×j À_ Õk Òl Ðm ZTO ºY   K  I Ëw* Év, Ûh Ùi Ïi  ³Y  ªS  Ò{$ Ðz& Íx' ß¢e Ý¡f Òm  Ñk  Ñl  Ñm  Ñn  Ño  Ðn  Ïj  Ïm  Ëk  Ñq Ô} ×$ Þ* Ý* è7 ð? ö¢D Õ; å@ ì¡Q ð«b ç©c â£b à£b Ïo  ¾f  Òq Òr Ùx å è ã Ú{ Ùz Ù{ Õz Ðu Û Ü Ü Ü Ü Ü Ü Ü Ý Ý Ü Ý Ý í! Ý í$ Ý! ï& í' ð* ð+ ï- Û* î/ î/ ò3 ð3 õ5 ð6 î5 ñ7 ð7 ð8 ð; ð= ñ? Ô7 í§V â®p ¨¤ ^][ ãÒª ÝÑ´ ØÏ¶ ØÏ´ ØÏµ ÖÍ³ ÙÑ· ÚÒ¹ ÚÓ¹ ÙÒ¹ ÙÓ¸ ÙÓ¹ ÚÕ½ ÞÜÃ ÜßÎ ÷ÿÿ ùÿÿ úÿÿ ûÿÿ üÿÿ ýÿÿ þÿÿ .jý ÿÿÿ  ttt ```                                                                                                                                                                                                                                                                                         ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº·····························ºº		
+&·º·º¶¶¶¶¶¶°®±¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶³¶1·º¶¶´´´´¶¶¶´´´´´´´´´´´´´´´´¶¶·º¶²²±°°°°°°°°°°°°°°°°°°°°°²¶·º"¶³°¯±±°°°°°°°°°°°°°°°°°°°±¶$·º.¶´±²²±°°°°°°°°°°°°°°°°°°°±¶#%·º-¶´¯¯¯°°°°°°°°°°°°°°°°°°°°±¶0%·º:¶¶¯°°°°°°°°°°°°°°°°°°°°°°±¶?%·º9¶¶¯°°°°°°°°°°°°°°°°°°°°°°±¶>%·º8¶¶¯°°°°°°°°°°°°°°°°°°°°°°±¶=%·º7¶¶¯°°¯¯°°°°°°°°°°°°°°°°°°°¶;·ºE¶¶°¯±²²±°°°°°°°°°°°°°°°°°²¶G@·ºD¶¶¯²²±±°°°°°°°°°°°°°°°°°¯¶¶F@·ºM¶´¯¯¯°°°°°°°°°°°°°°°°°°¯¯¶¶O@·ºL¶¶¯¯¯°°°°°°°°°¯¯°°°°±³±´¯¶¶N2·ºK¶¶°¶¶¯°°°°°°°¯¶²¯°°°°±¯±¯±¶h2·º\¶¶°°°°°°°°°°°°°°°°°°°°°°³¶¶g2·º]¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶f2·º[­«¨¨§§¦§§§§¨ª¨¦¦¦¨©¡¤¥£¢ ¬·ºI3')+*+)))*))()*+++,6J!54 CBA¹·ºjYPQTVTSkllZTTXRTUiHceWda/µ i¸·ºu`_<bmºººt^}zy|yx~{|yvrrwsqponººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººÿÿÿÿÿÿÿÿÿÿÿÿà   À                                                                    À  ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ(                                        |WR úõó Q3 O1 ºb sP? Q2 Q2 Y9 ^G ×² `E Û¹£ cE bE Ý¹ ùõò ³o7 f@ gD eD ã¼ à» íÃ å¾ ¼b ¼c ¼c ½d ¼c ½d ½d Ês  Èx( Î> zZ ç¿ øõò ¼g à´ ®x ä$ æ& é* ç+ æ+ æ, ç- æ- æ/ ç0 ã4 å6 àI åÜÐ çÛÉ äÜÐ ÷õò ìÚ½ ãÚÌ åÝÐ äÜÏ ãÚË åà× äÝÐ þÿý ýÿþ üÿþ úÿÿ ûÿÿ üÿÿ ýÿÿ þÿÿ ÿÿÿ    ~~~ }}}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 PPPPPPPPPPPPPPPPPKMNNNNNNNNNNOLO	O&:
+OJHHGGGGGGGGHI
+OJEEEEEEEEEEFCOJEEEEEEEEEEFCOJEEEEEEEEEEFDOJEFEEEEEEEEEBO%JEEEEEEEEEFFBOJJIIIIJIIIIJJO(@>=77A779?<8;$O' "!)O6530./21+*-,4#4PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPÿÿ¶² °°  °°  °°  °°  °°  °²  ·  ¶³  ±±  °°  °°  °° °°ÿÿ°±ÿÿ·(   0   `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §      £Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿH#ÿ¢P'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ   §   ¢Q&Ý¤R&ÿ¤R&ÿ¥R'ÿ¤R&ÿ¤R&ÿ¤R&ÿ¤R&ÿ¤R&ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ¤R'ÿ   §   ¥R&ÿþüçÿøÿÿÿøÿÿÿøÿÿÿùÿÿÿøÿÿÿøÿÿÿøÿÿÿøÿÿÿíÿÿÿðÿÿÿðÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿôÿÿÿøÿÿÿþüçÿ¥S&ÿ   §   §S%ÿøÿÿÿøÿÿÿøÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿøÿÿÿøÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿ§S$ÿ   §   ¨U$ÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿ¨U#ÿ   §   ªV"ÿúÿÿÿùÿÿÿùÿÿÿúÿÿÿùÿÿÿúÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿøÿÿÿ«V"ÿ   §   ¬W!ÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿ­X ÿ   §   ®Yÿûÿÿÿúÿÿÿúÿÿÿùÿÿÿúÿÿÿúÿÿÿûÿÿÿûÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿ¯X ÿ   §   ±Zÿûÿÿÿûÿÿÿûÿÿÿùÿÿÿûÿÿÿûÿÿÿûÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿ±Zÿ   §   ³\ÿûÿÿÿûÿÿÿûÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿûÿÿÿ³[ÿ   §   µ]ÿüÿÿÿûÿÿÿüÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿûÿÿÿµ]ÿ   §   ¸^ÿýÿÿÿüÿÿÿýÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿûÿÿÿ¸_ÿ   §   ¹`ÿýÿÿÿýÿÿÿýÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿº`ÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¾cÿþÿÿÿýÿÿÿýÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿþÿÿÿ¾cÿ   §   ÀdÿÿÿÿÿÿÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿþÿÿÿþÿÿÿÀdÿ   §   ÄgÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÄgÿ   §   ÄgÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÄgÿ   §   ÄgÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÄgÿ   §   ÆhÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÆiÿ©   ÈiÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÉiÿ¬   !ËkÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿËkÿ®   "Íl
+ÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÍl
+ÿ®   "Ïn	ÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÏn	ÿ®   "ÒoÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÑpÿ®   "ÔpÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÓqÿ®   !ÖrÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÖwÿ­   ¹cÿ²_ÿ­]ÿ«[ÿª\ÿª[ÿª\ÿª\ÿª\ÿª[ÿª[ÿª\ÿª\ÿª\ÿª\ÿª\ÿª[ÿª[ÿª\ÿª\ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª\ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿ«\ÿ­]ÿµbÿÄtÿª   ¼eÿ½f ÿ¼eÿ¹cÿ¹bÿ¹c ÿ¹b ÿ¸cÿ¸bÿ¹b ÿ¸bÿ¹b ÿ¸b ÿ¸c ÿ¸bÿ¸bÿ¹bÿ¸cÿ¹c ÿ¹c ÿ¸bÿ¸bÿ¸bÿ¸bÿ¸bÿ¸bÿ¸bÿ¹bÿ¸bÿ¹c ÿ¹c ÿ¸cÿ¸c ÿ¹b ÿÂoÿÖ@ÿ¼h	ÿ¹bÿÈy"ÿË}'ÿ¸bÿ¤e)ÿqjÿiPÿÂtÿÆtÿ¨   ÂjÿÊnÿÔrÿØsÿÙtÿÙuÿÙtÿØuÿÙwÿÙuÿÙvÿÚyÿÚ{ÿÚzÿÚ{ÿÙzÿÚx
+ÿØvÿÙwÿÙwÿØuÿØuÿØuÿØuÿØuÿØuÿØuÿÙtÿØtÿÙvÿÙvÿØvÿÙwÿÙvÿêEÿø¼|ÿÝÿÚyÿí¤Uÿù¾ÿØuÿ{rÿFpãÿcqµÿÈ3ÿÌwÿ      ÊoÿÑyÿã Sÿê©^ÿíEÿîDÿî¡Iÿî¢IÿîDÿí:ÿîBÿï¢Iÿì6ÿì3ÿì8ÿí?ÿî@ÿì=ÿí>ÿí>ÿí=ÿí=ÿí=ÿí=ÿí=ÿí=ÿí=ÿì8ÿë,ÿì0ÿí0ÿë-ÿë.ÿê(ÿë'ÿë,ÿì0ÿì-ÿì0ÿì1ÿí7ÿí8ÿÊPÿß,ÿÛ1ÿÐqÿ   J   Ýw 1Òq ÿÕvÿØzÿ×x	ÿ×vÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖtÿÖtÿÖtÿ×uÿ×uÿ×uÿ×uÿ×uÿ×wÿ×wÿ×wÿ×wÿ×wÿ×wÿ×wÿ×wÿ×uÿ×uÿÖuÿÖtÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖtÿØwÿÙx
+ÿ×vÿ²` W                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ                                                                                                                                                                                                                                                                                                                               ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  (       @                                                                                                                                                                                                                                                                                                                                                                                                     ^                                             ¢   §   §   §   §   §   §   §   §   §   §   §   §      i   G >ê:ð9ð8ð8ð8ð9ð:ð:ð:ð:ð:ð:ð:ð:ð:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñi2å	£   ,¡Kÿ¦S(ÿ¤O$ÿ¢N!ÿ¢N!ÿ¢N!ÿ¢N!ÿ¡N"ÿ M"ÿ¡M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢N"ÿ M"ÿ M"ÿ¡O$ÿ¤S)ÿ¤O"ÿ¶   1´lAÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿúÿÿÿ÷ÿÿÿûÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿýÿÿÿÿÿÿÿÉsÿ#·   -²j@ÿÿÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿÿÿÿÿÇzÿ
+´   +³h:ÿÿÿÿÿüÿÿÿüÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿüÿÿÿÿÿÿÿÈsÿ	 ´   +µi7ÿÿÿÿÿýÿÿÿúÿÿÿùÿÿÿûÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÊrÿ
+ ´   +·l6ÿÿÿÿÿþÿÿÿûÿÿÿüÿÿÿüÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÌqÿ
+ ´   +»n5ÿÿÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÎnÿ
+ ´   +¾o1ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÐmÿ ´   +Áp0ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÒlÿ ´   *Ãr.ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÕkÿ ³   #Ãr.ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÕkÿ ®   "Æs-ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿÿÿÿÿ×jÿ ®   "Év,ÿÿÿÿÿÿÿÿÿúÿÿÿùÿÿÿûÿÿÿüÿÿÿüÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿüÿÿÿÿÿÿÿÙiÿ ®   "Ëw*ÿÿÿÿÿÿÿÿÿùÿÿÿüÿÿÿüÿÿÿûÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÛhÿ ®   "Íx'ÿÿÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÝ¡fÿ ®   "Ðz&ÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿýÿÿÿûÿÿÿþÿÿÿùÿÿÿÿÿÿÿÿÿÿÿß¢eÿ ®   "Ò{$ÿÿÿÿÿÿÿÿÿúÿÿÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿÿÿÿÿüÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿùÿÿÿûÿÿÿùÿÿÿûÿÿÿÿÿÿÿà£bÿ ®   "×$ÿÿÿÿÿÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿýÿÿÿÿÿÿÿÿÿÿÿâ£bÿ ®   "Þ*ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿç©cÿ ®   "Ô}ÿÜßÎÿÚÕ½ÿÙÒ¹ÿÙÒ¹ÿÚÓ¹ÿÚÓ¹ÿÚÒ¹ÿÚÓ¹ÿÚÓ¹ÿÚÓ¹ÿÚÓ¹ÿÙÒ¹ÿÙÓ¹ÿÙÒ¹ÿÙÒ¹ÿÚÒ¹ÿÚÒ¹ÿÚÒ¹ÿÙÒ¹ÿÙÓ¸ÿØÏ¶ÿÖÍ³ÿÙÑ·ÿØÏµÿØÏ´ÿÝÑ´ÿãÒªÿÞÜÃÿÔ7ÿ®   "³Y ÿ©L ÿ¢F ÿC ÿE ÿD ÿE ÿC ÿC ÿC ÿD ÿC ÿC ÿ E ÿC ÿC ÿD ÿE ÿE ÿE ÿC ÿ¤I ÿªS ÿ@ ÿ¦J ÿ¦I ÿ B ÿIÿ K ÿºY ÿ®   $¾f ÿËk ÿÒm ÿÑk ÿÑn ÿÐn ÿÑn ÿÑm ÿÒqÿÒrÿÒrÿÑqÿÑn ÿÑn ÿÏm ÿÏm ÿÑl ÿÑn ÿÑo ÿÏo ÿÏi ÿå@ÿð«bÿÏj ÿì¡Qÿö¢Dÿf>ÿ.jýÿ~rÿÏo ÿ¥   Ín òÛ*ÿí§Vÿð=ÿð;ÿð?ÿñ7ÿð3ÿñ?ÿî/ÿî/ÿð8ÿð7ÿî5ÿð6ÿð6ÿï-ÿï&ÿð*ÿí'ÿí!ÿð+ÿð3ÿí$ÿò3ÿõ5ÿè7ÿÀ_ÿÕ;ÿÙxÿh   Út bÕxýÜÿÜþÛ}þÛ{þÛzþÛz
+þÛ|þÛz	þÛy
+þÜ|þÜ}þÜ}þÜþÛòÛ~òÚ{òÚ|òÚz	òÙyò×s ò×s òÚyò×t òØt òá{ òç} ôä|úÌm                                                                                                                                                                                                                                                                                                                                                                                                        ÿÿÿÿÿÿÿÿ                                                                                                          ÿÿÿÿÿÿÿÿÿÿÿÿ(                                                                                      
+      k                                       {   OO&¸F#åC!ìC!ìC!ìC!ìC!ìC!ìC!ìC!ìC!ìC!ìA ìE$îR(Ï   pÖ°úúõóÿùõòÿøõòÿ÷õòÿùõòÿùõòÿùõòÿùõòÿùõòÿùõòÿùõòÿúõóÿùõòÿrE+Ý   pÙµñÿÿÿÿýÿÿÿýÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿýÿÿÿþÿÿÿqD)Û   pÛµñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿýÿþÿtF'Û   pÞ·ñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿýÿþÿwH'Û   pá¸ñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿüÿþÿzI&Û   päºñÿÿÿÿúÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿþÿýÿ}L%Û   pæ»ñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿûÿÿÿþÿýÿN%Û   pìÀñÿÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿÿÿÿÿM!Û   pÞ°}ñåà×ÿäÜÏÿåÝÐÿåÜÐÿåÜÐÿäÝÐÿåÜÐÿåÜÐÿäÜÐÿãÚËÿãÚÌÿçÛÉÿìÚ½ÿc>Ú   pºcø½dÿ¼cÿ½dÿ½dÿ½dÿ¼cÿ¼bÿ¼cÿ¼cÿÈx(ÿÊs ÿ³o7ÿ|WRÿzWÍ   RÖyÀä*ñåëåëäëäëäëäëäëâëåëçëá$ìË1ï¿mp   	                                                                                                                                 :ÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿÿÿÿÿÿÿÿÿ
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/resources/cef.rc cef/resources/cef.rc
--- resources/cef.rc	1970-01-01 01:00:00.000000000 +0100
+++ resources/cef.rc	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,140 @@
+//Microsoft Visual C++ generated resource script.
+//
+#include "tools/test_shell/resource.h"
+
+#define APSTUDIO_READONLY_SYMBOLS
+/////////////////////////////////////////////////////////////////////////////
+//
+// Generated from the TEXTINCLUDE 2 resource.
+//
+#define APSTUDIO_HIDDEN_SYMBOLS
+#include "windows.h"
+#undef APSTUDIO_HIDDEN_SYMBOLS
+/////////////////////////////////////////////////////////////////////////////
+#undef APSTUDIO_READONLY_SYMBOLS
+
+#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
+LANGUAGE 9, 1
+#pragma code_page(1252)
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Icon
+//
+
+// Icon with lowest ID value placed first to ensure application icon
+// remains consistent on all systems.
+
+IDI_TESTSHELL           ICON         "test_shell.ico"
+IDI_SMALL               ICON         "small.ico"
+
+IDR_AHEM_FONT           BINDATA      "AHEM____.TTF"
+
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Menu
+//
+
+IDC_TESTSHELL MENU 
+BEGIN
+    POPUP "&File"
+    BEGIN
+        MENUITEM "E&xit",                IDM_EXIT
+    END
+    POPUP "&Debug"
+    BEGIN
+        MENUITEM "Dump body text...",     IDM_DUMP_BODY_TEXT
+        MENUITEM "Dump render tree...",   IDM_DUMP_RENDER_TREE
+        MENUITEM SEPARATOR
+        MENUITEM "Enable images",         IDM_ENABLE_IMAGES, CHECKED
+        MENUITEM "Enable plugins",        IDM_ENABLE_PLUGINS, CHECKED
+        MENUITEM "Enable scripts",        IDM_ENABLE_SCRIPTS, CHECKED
+        MENUITEM SEPARATOR
+        MENUITEM "Show developer tools...",  IDM_SHOW_DEV_TOOLS
+    END
+    POPUP "&Help"
+    BEGIN
+        MENUITEM "&About ...",           IDM_ABOUT
+    END
+END
+
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Accelerator
+//
+
+IDC_TESTSHELL ACCELERATORS
+BEGIN
+    "?",            IDM_ABOUT,              ASCII,  ALT
+    "/",            IDM_ABOUT,              ASCII,  ALT
+END
+
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// Dialog
+//
+
+IDD_ABOUTBOX DIALOG   22, 17, 230, 75
+STYLE DS_MODALFRAME | WS_CAPTION | WS_SYSMENU
+CAPTION "About"
+FONT 8, "System"
+BEGIN
+    ICON            IDI_TESTSHELL,IDC_MYICON,14,9,16,16
+    LTEXT           "TestShell Version 1.0",IDC_STATIC,49,10,119,8,SS_NOPREFIX
+    LTEXT           "Copyright (C) 2006",IDC_STATIC,49,20,119,8
+    DEFPUSHBUTTON   "OK",IDOK,195,6,30,11,WS_GROUP
+END
+
+#ifdef APSTUDIO_INVOKED
+/////////////////////////////////////////////////////////////////////////////
+//
+// TEXTINCLUDE
+//
+1 TEXTINCLUDE  
+BEGIN
+    "resource.h\0"
+END
+
+2 TEXTINCLUDE  
+BEGIN
+    "#define APSTUDIO_HIDDEN_SYMBOLS\r\n"
+    "#include ""windows.h""\r\n"
+    "#undef APSTUDIO_HIDDEN_SYMBOLS\r\n"
+    "\0"
+END
+
+3 TEXTINCLUDE  
+BEGIN
+    "\r\n"
+    "\0"
+END
+
+#endif    // APSTUDIO_INVOKED
+
+/////////////////////////////////////////////////////////////////////////////
+//
+// String Table
+//
+
+STRINGTABLE  
+BEGIN
+   IDC_TESTSHELL       "TESTSHELL"
+   IDS_APP_TITLE       "TestShell"
+END
+
+#endif
+/////////////////////////////////////////////////////////////////////////////
+
+
+
+#ifndef APSTUDIO_INVOKED
+/////////////////////////////////////////////////////////////////////////////
+//
+// Generated from the TEXTINCLUDE 3 resource.
+//
+
+/////////////////////////////////////////////////////////////////////////////
+#endif    // not APSTUDIO_INVOKED
diff '--exclude=.svn' -aurN cef.ori/resources/fonts.conf cef/resources/fonts.conf
--- resources/fonts.conf	1970-01-01 01:00:00.000000000 +0100
+++ resources/fonts.conf	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,229 @@
+<?xml version="1.0"?>
+<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
+<!-- /etc/fonts/fonts.conf file to configure system font access -->
+<fontconfig>
+  <match target="font">
+    <edit name="embeddedbitmap" mode="assign"><bool>false</bool></edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>Times</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Times New Roman</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>sans</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>sans serif</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+  </match>
+
+  <!-- Some layout tests specify Helvetica as a family and we need to make sure
+       that we don't fallback to Times New Roman for them -->
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>Helvetica</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>sans-serif</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>serif</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Times New Roman</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>mono</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Courier New</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>monospace</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Courier New</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>Courier</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Courier New</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>cursive</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Comic Sans MS</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>fantasy</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Impact</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test qual="any" name="family">
+      <string>Monaco</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Times New Roman</string>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>NonAntiAliasedSans</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+    <edit name="antialias" mode="assign">
+      <bool>false</bool>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>SlightHintedGeorgia</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Georgia</string>
+    </edit>
+    <edit name="hintstyle" mode="assign">
+      <const>hintslight</const>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>NonHintedSans</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Verdana</string>
+    </edit>
+    <!-- These deliberately contradict each other. The 'hinting' preference
+         should take priority -->
+    <edit name="hintstyle" mode="assign">
+      <const>hintfull</const>
+    </edit>
+   <edit name="hinting" mode="assign">
+      <bool>false</bool>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>AutohintedSerif</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+    <edit name="autohint" mode="assign">
+      <bool>true</bool>
+    </edit>
+    <edit name="hintstyle" mode="assign">
+      <const>hintmedium</const>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>HintedSerif</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+    <edit name="autohint" mode="assign">
+      <bool>false</bool>
+    </edit>
+    <edit name="hintstyle" mode="assign">
+      <const>hintmedium</const>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>FullAndAutoHintedSerif</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+    <edit name="autohint" mode="assign">
+      <bool>true</bool>
+    </edit>
+    <edit name="hintstyle" mode="assign">
+      <const>hintfull</const>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>SubpixelEnabledArial</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+    <edit name="rgba" mode="assign">
+      <const>rgb</const>
+    </edit>
+  </match>
+
+  <match target="pattern">
+    <test name="family" compare="eq">
+      <string>SubpixelDisabledArial</string>
+    </test>
+    <edit name="family" mode="assign">
+      <string>Arial</string>
+    </edit>
+    <edit name="rgba" mode="assign">
+      <const>none</const>
+    </edit>
+  </match>
+
+</fontconfig>
diff '--exclude=.svn' -aurN cef.ori/resources/missingImage.gif cef/resources/missingImage.gif
--- resources/missingImage.gif	1970-01-01 01:00:00.000000000 +0100
+++ resources/missingImage.gif	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,3 @@
+GIF89a  Õ   h°pÀ(x¸ p¸¸ØxÈ(ÀøøøððøàèðÐàð¸ÐèÀØèÀàhÀpÀ0À(À0x¸¸àx È p°¨Ð¨ÐpÈ°Ð È(È x¸@ÈPÈ(xÀPÈ                                                                                             ,       ÀpH,f,¤r¹´ 7Ð¨z°\Qv=\®v2Y4:°WsØÎ!ñÑ4ì­ vxm  ¨
+
+©§©«­¯½ À ¾¼ÃÉ½ÇLÏIÍÒÓÔÒA ;
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/resources/missingImage.png cef/resources/missingImage.png
--- resources/missingImage.png	1970-01-01 01:00:00.000000000 +0100
+++ resources/missingImage.png	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,6 @@
+PNG
+
+   IHDR         h6   	pHYs    ÒÝ~ü  MIDAT(ÏRA+Da=ß{O,d+%~À¤¤$ñ,4K¥²±ò7L£Ø!{+vÊÎÙi²0£isÏ±øÞ7ccÜÕ÷{Ï=§{¯Û>ºÁ""±ÍtY½uX(Ï_üY}½>I)2
+(²i  øç0sþgTd$ ¾ZÆÙ ¡þÚÇÁåócõ3ìíIÌ¼EJ\^Ü)ÞçOÊËÓÃ{cq`Ö²d ÓyùLµÆ¾HdõÆARé©^zªÊÍßUóÇeZ¦1V`yZf¨ÿíý{i÷
+¶+tXJUyiT^2QJÐoK4K	fû¹) ÙÂ\Ç*RKí
+2ú2Êu0±*%HóÅøÝ·Æ..YnÚµ÷-Ýæº9>£Üêæi§êãÎ h_Þ­    IEND®B`
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/resources/README.txt cef/resources/README.txt
--- resources/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ resources/README.txt	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,26 @@
+missingImage.gif was created from Webkit data: WebCore/Resources/missingImage.tiff
+
+Licence text for missingImage.tiff from which missingImage.gif was generated:
+
+Copyright (C) 2003, 2004, 2005, 2006 Apple Computer, Inc.  All rights reserved.
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
+EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+missingImage.png is the same as WebCore/Resources/missingImage.png and carries exactly the same license.
diff '--exclude=.svn' -aurN cef.ori/resources/small.ico cef/resources/small.ico
--- resources/small.ico	1970-01-01 01:00:00.000000000 +0100
+++ resources/small.ico	2012-05-09 11:32:01.668658220 +0200
@@ -0,0 +1,19 @@
+           è          (  n  00    ¨          ¨  >      h  æ  00     ¨%  N!         ¨  öF       h  W  (       @                                                 ÀÀÀ   ÿ  ÿ   ÿÿ ÿ   ÿ ÿ ÿÿ  ÿÿÿ ªªªªªªªªªªªªªªªª                wwwwwwwwwwwwwwwpxpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxÿÿÿÿÿÿÿÿÿÿÿÿøpxwwwwwwwwwwwwwxpxpxDDDDDDDDD@    pxDDDDDDDDDHpxDDDDDDDDDHpxDDDDDDDDDDDDDDpxpwwwwwwwwwwwwwwwpªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªªª                                                                                                                                (                                                        ÀÀÀ   ÿ  ÿ   ÿÿ ÿ   ÿ ÿ ÿÿ  ÿÿÿ ªªªªªªªª        wwwwwwwpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxÿÿÿÿÿÿpxwwwwwwpxDDDðððpxDDDDDDpxpwwwwwwwwªªªªªªªª                                                                (   0   `                             qj {r     ¥R' £Q' ¢P' H# §S$ §S% ¥R& ¥S& ¤R& ¤R' ®hC ¬W! «V" ªV" ¨U# ¨U$ iP ±Z ±Z ®Y ¯X  ­X  ¸^ µ] µ] ³[ ³\ ¼a º` ¹` ¸_ Äg Äg Àd ¾c Íl
+ Ëk Èi Éi Æh Æi ¤e) ÊP ¹b  ¹b ¸b Ùt Øs ²_ «[ ª[ ¹c Ör Ùv Ôp µb Óq Òo Ñp Úx
+ Ïn	 ¼h	 Öw Âo Æt Èy" Ë}' ß, È3 êE Ö@ í¤U ø¼| ù¾ Ös  Òq  ½f  ¹c  ¸b  ¸c  Ùt Ùu Öt Ôr Âj ¼e ¹c ¸c ­] ª[ ª\ Ùu Ùv Øt Øu Öt ¼e ­] «\ Ùv Øu Øv Öu Ðq Ên Êo ª\ Ùv Ùw Øu Øv ×u Ùw ×v Øw Ùw Õv ×w ×x	 Ùx
+ Úy Úz Ùz Øz Ú{ Ñy Ìw Ý Ät Ât ë' ê( ë, ë, ì- ë- ë. í0 ì0 ì0 ì0 ì1 ì3 Û1 ì6 í7 í8 ì8 ì8 í: í= í> ì= î@ í? îB îD íE ï¢I î¡I î¢I ã S ê©^ ÞÜÇ þüç íÿÿ ðÿÿ ôÿÿ øÿÿ ùÿÿ úÿÿ ûÿÿ üÿÿ ýÿÿ þÿÿ Fpã cqµ ÿÿÿ sss ppp iii aaa ``` ___ ]]] [[[ YYY XXX                                                                                                                                                                                                                                                                     ¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿µ¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¾¶¿¾¿¾¿	§«««¬««««¨©©¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬ª«§
+¾¿«««¬¬¬¬¬««¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¾¿¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¾¿­¬¬­¬­¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬«¾¿­­­¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¾¿®­­¬­­®®­­¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬­¾¿®®®¬®®®¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬­¾¿®®®¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬®¾¿¯®¯¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬®¾¿°¯°¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬®!¾¿ °°°¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿°°±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°¾¿%±°°¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬°±%¾¿$´´±¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬±±$¾¿"´´´¬¬´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´#¾¿"´´´¬¬´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´#¾¿"´´´¬¬´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´#¾¿*´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´+¾¿(´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´)¼¿'´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´¬¬´¬¬´´´'º¿&´´´¬´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´&¸¿?´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´?¸¿<´´´¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬´´´´=¸¿9´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´;¸¿7¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦A¹¿63[4]5mm]5\]m]mm5\mm5555555\\\5\\\5m\55\\5ed:»¿cOXY/P.Z0.0.QR00/ZPP0000000/0PPZR.BI@/DE0, C½¿WkV21TSav^8{|}>qooggggggg1`_fhsnHK{JLp²³G·¿l¤¥ ¢£¡-Fj¿¿¿Nw~ytMMMMMMUbbrrrrrxxxxxxxxrriUMMMMMMMMMUuzt¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ                                                                                                                                                                                                                                                                                 ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  (       @                             ~r     YRO ¢M" ¡M"  M" ¤O$ ¦S( ¤S) xH0 ~L3 wG0 wH0 rE. xI1 YB \TP XRO ¡K ¢N! ¤O" ¢N" ¡N" ¡O$ xI0 pE. ZSO ³h: ´lA ²j@ Ès Çz  B  @  µi7 Ìq Êr YSO b_] ¢F   E  C  D  E  C  »n5 ·l6 f> În És [TO ©L  ¦I  ¦J  ¤I  Æs- Ãr. Áp0 ¾o1 ×j À_ Õk Òl Ðm ZTO ºY   K  I Ëw* Év, Ûh Ùi Ïi  ³Y  ªS  Ò{$ Ðz& Íx' ß¢e Ý¡f Òm  Ñk  Ñl  Ñm  Ñn  Ño  Ðn  Ïj  Ïm  Ëk  Ñq Ô} ×$ Þ* Ý* è7 ð? ö¢D Õ; å@ ì¡Q ð«b ç©c â£b à£b Ïo  ¾f  Òq Òr Ùx å è ã Ú{ Ùz Ù{ Õz Ðu Û Ü Ü Ü Ü Ü Ü Ü Ý Ý Ü Ý Ý í! Ý í$ Ý! ï& í' ð* ð+ ï- Û* î/ î/ ò3 ð3 õ5 ð6 î5 ñ7 ð7 ð8 ð; ð= ñ? Ô7 í§V â®p ¨¤ ^][ ãÒª ÝÑ´ ØÏ¶ ØÏ´ ØÏµ ÖÍ³ ÙÑ· ÚÒ¹ ÚÓ¹ ÙÒ¹ ÙÓ¸ ÙÓ¹ ÚÕ½ ÞÜÃ ÜßÎ ÷ÿÿ ùÿÿ úÿÿ ûÿÿ üÿÿ ýÿÿ þÿÿ .jý ÿÿÿ  ttt ```                                                                                                                                                                                                                                                                                         ººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº·····························ºº		
+&·º·º¶¶¶¶¶¶°®±¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶³¶1·º¶¶´´´´¶¶¶´´´´´´´´´´´´´´´´¶¶·º¶²²±°°°°°°°°°°°°°°°°°°°°°²¶·º"¶³°¯±±°°°°°°°°°°°°°°°°°°°±¶$·º.¶´±²²±°°°°°°°°°°°°°°°°°°°±¶#%·º-¶´¯¯¯°°°°°°°°°°°°°°°°°°°°±¶0%·º:¶¶¯°°°°°°°°°°°°°°°°°°°°°°±¶?%·º9¶¶¯°°°°°°°°°°°°°°°°°°°°°°±¶>%·º8¶¶¯°°°°°°°°°°°°°°°°°°°°°°±¶=%·º7¶¶¯°°¯¯°°°°°°°°°°°°°°°°°°°¶;·ºE¶¶°¯±²²±°°°°°°°°°°°°°°°°°²¶G@·ºD¶¶¯²²±±°°°°°°°°°°°°°°°°°¯¶¶F@·ºM¶´¯¯¯°°°°°°°°°°°°°°°°°°¯¯¶¶O@·ºL¶¶¯¯¯°°°°°°°°°¯¯°°°°±³±´¯¶¶N2·ºK¶¶°¶¶¯°°°°°°°¯¶²¯°°°°±¯±¯±¶h2·º\¶¶°°°°°°°°°°°°°°°°°°°°°°³¶¶g2·º]¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶f2·º[­«¨¨§§¦§§§§¨ª¨¦¦¦¨©¡¤¥£¢ ¬·ºI3')+*+)))*))()*+++,6J!54 CBA¹·ºjYPQTVTSkllZTTXRTUiHceWda/µ i¸·ºu`_<bmºººt^}zy|yx~{|yvrrwsqponººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººÿÿÿÿÿÿÿÿÿÿÿÿà   À                                                                    À  ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ(                                        |WR úõó Q3 O1 ºb sP? Q2 Q2 Y9 ^G ×² `E Û¹£ cE bE Ý¹ ùõò ³o7 f@ gD eD ã¼ à» íÃ å¾ ¼b ¼c ¼c ½d ¼c ½d ½d Ês  Èx( Î> zZ ç¿ øõò ¼g à´ ®x ä$ æ& é* ç+ æ+ æ, ç- æ- æ/ ç0 ã4 å6 àI åÜÐ çÛÉ äÜÐ ÷õò ìÚ½ ãÚÌ åÝÐ äÜÏ ãÚË åà× äÝÐ þÿý ýÿþ üÿþ úÿÿ ûÿÿ üÿÿ ýÿÿ þÿÿ ÿÿÿ    ~~~ }}}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 PPPPPPPPPPPPPPPPPKMNNNNNNNNNNOLO	O&:
+OJHHGGGGGGGGHI
+OJEEEEEEEEEEFCOJEEEEEEEEEEFCOJEEEEEEEEEEFDOJEFEEEEEEEEEBO%JEEEEEEEEEFFBOJJIIIIJIIIIJJO(@>=77A779?<8;$O' "!)O6530./21+*-,4#4PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPÿÿ¶² °°  °°  °°  °°  °°  °²  ·  ¶³  ±±  °°  °°  °° °°ÿÿ°±ÿÿ·(   0   `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §   §      £Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿH#ÿ¢P'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ   §   ¢Q&Ý¤R&ÿ¤R&ÿ¥R'ÿ¤R&ÿ¤R&ÿ¤R&ÿ¤R&ÿ¤R&ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ£Q'ÿ¤R'ÿ   §   ¥R&ÿþüçÿøÿÿÿøÿÿÿøÿÿÿùÿÿÿøÿÿÿøÿÿÿøÿÿÿøÿÿÿíÿÿÿðÿÿÿðÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿôÿÿÿøÿÿÿþüçÿ¥S&ÿ   §   §S%ÿøÿÿÿøÿÿÿøÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿøÿÿÿøÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿ§S$ÿ   §   ¨U$ÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿ¨U#ÿ   §   ªV"ÿúÿÿÿùÿÿÿùÿÿÿúÿÿÿùÿÿÿúÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿøÿÿÿ«V"ÿ   §   ¬W!ÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿ­X ÿ   §   ®Yÿûÿÿÿúÿÿÿúÿÿÿùÿÿÿúÿÿÿúÿÿÿûÿÿÿûÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿ¯X ÿ   §   ±Zÿûÿÿÿûÿÿÿûÿÿÿùÿÿÿûÿÿÿûÿÿÿûÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿ±Zÿ   §   ³\ÿûÿÿÿûÿÿÿûÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿûÿÿÿ³[ÿ   §   µ]ÿüÿÿÿûÿÿÿüÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿûÿÿÿµ]ÿ   §   ¸^ÿýÿÿÿüÿÿÿýÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿûÿÿÿ¸_ÿ   §   ¹`ÿýÿÿÿýÿÿÿýÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿº`ÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¼aÿýÿÿÿýÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿ¼aÿ   §   ¾cÿþÿÿÿýÿÿÿýÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿýÿÿÿþÿÿÿ¾cÿ   §   ÀdÿÿÿÿÿÿÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿþÿÿÿþÿÿÿÀdÿ   §   ÄgÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÄgÿ   §   ÄgÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÄgÿ   §   ÄgÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÄgÿ   §   ÆhÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÆiÿ©   ÈiÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÉiÿ¬   !ËkÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿËkÿ®   "Íl
+ÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÍl
+ÿ®   "Ïn	ÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÏn	ÿ®   "ÒoÿÿÿÿÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÑpÿ®   "ÔpÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÓqÿ®   !ÖrÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÞÜÇÿÖwÿ­   ¹cÿ²_ÿ­]ÿ«[ÿª\ÿª[ÿª\ÿª\ÿª\ÿª[ÿª[ÿª\ÿª\ÿª\ÿª\ÿª\ÿª[ÿª[ÿª\ÿª\ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿª\ÿª[ÿª[ÿª[ÿª[ÿª[ÿª[ÿ«\ÿ­]ÿµbÿÄtÿª   ¼eÿ½f ÿ¼eÿ¹cÿ¹bÿ¹c ÿ¹b ÿ¸cÿ¸bÿ¹b ÿ¸bÿ¹b ÿ¸b ÿ¸c ÿ¸bÿ¸bÿ¹bÿ¸cÿ¹c ÿ¹c ÿ¸bÿ¸bÿ¸bÿ¸bÿ¸bÿ¸bÿ¸bÿ¹bÿ¸bÿ¹c ÿ¹c ÿ¸cÿ¸c ÿ¹b ÿÂoÿÖ@ÿ¼h	ÿ¹bÿÈy"ÿË}'ÿ¸bÿ¤e)ÿqjÿiPÿÂtÿÆtÿ¨   ÂjÿÊnÿÔrÿØsÿÙtÿÙuÿÙtÿØuÿÙwÿÙuÿÙvÿÚyÿÚ{ÿÚzÿÚ{ÿÙzÿÚx
+ÿØvÿÙwÿÙwÿØuÿØuÿØuÿØuÿØuÿØuÿØuÿÙtÿØtÿÙvÿÙvÿØvÿÙwÿÙvÿêEÿø¼|ÿÝÿÚyÿí¤Uÿù¾ÿØuÿ{rÿFpãÿcqµÿÈ3ÿÌwÿ      ÊoÿÑyÿã Sÿê©^ÿíEÿîDÿî¡Iÿî¢IÿîDÿí:ÿîBÿï¢Iÿì6ÿì3ÿì8ÿí?ÿî@ÿì=ÿí>ÿí>ÿí=ÿí=ÿí=ÿí=ÿí=ÿí=ÿí=ÿì8ÿë,ÿì0ÿí0ÿë-ÿë.ÿê(ÿë'ÿë,ÿì0ÿì-ÿì0ÿì1ÿí7ÿí8ÿÊPÿß,ÿÛ1ÿÐqÿ   J   Ýw 1Òq ÿÕvÿØzÿ×x	ÿ×vÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖtÿÖtÿÖtÿ×uÿ×uÿ×uÿ×uÿ×uÿ×wÿ×wÿ×wÿ×wÿ×wÿ×wÿ×wÿ×wÿ×uÿ×uÿÖuÿÖtÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖs ÿÖtÿØwÿÙx
+ÿ×vÿ²` W                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ                                                                                                                                                                                                                                                                                                                               ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿÿ  (       @                                                                                                                                                                                                                                                                                                                                                                                                     ^                                             ¢   §   §   §   §   §   §   §   §   §   §   §   §      i   G >ê:ð9ð8ð8ð8ð9ð:ð:ð:ð:ð:ð:ð:ð:ð:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñ:ñi2å	£   ,¡Kÿ¦S(ÿ¤O$ÿ¢N!ÿ¢N!ÿ¢N!ÿ¢N!ÿ¡N"ÿ M"ÿ¡M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢M"ÿ¢N"ÿ M"ÿ M"ÿ¡O$ÿ¤S)ÿ¤O"ÿ¶   1´lAÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿúÿÿÿ÷ÿÿÿûÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿýÿÿÿÿÿÿÿÉsÿ#·   -²j@ÿÿÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿÿÿÿÿÇzÿ
+´   +³h:ÿÿÿÿÿüÿÿÿüÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿüÿÿÿÿÿÿÿÈsÿ	 ´   +µi7ÿÿÿÿÿýÿÿÿúÿÿÿùÿÿÿûÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÊrÿ
+ ´   +·l6ÿÿÿÿÿþÿÿÿûÿÿÿüÿÿÿüÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÌqÿ
+ ´   +»n5ÿÿÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÎnÿ
+ ´   +¾o1ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÐmÿ ´   +Áp0ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÒlÿ ´   *Ãr.ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÕkÿ ³   #Ãr.ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿÿÿÿÿÕkÿ ®   "Æs-ÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿÿÿÿÿ×jÿ ®   "Év,ÿÿÿÿÿÿÿÿÿúÿÿÿùÿÿÿûÿÿÿüÿÿÿüÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿüÿÿÿÿÿÿÿÙiÿ ®   "Ëw*ÿÿÿÿÿÿÿÿÿùÿÿÿüÿÿÿüÿÿÿûÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÛhÿ ®   "Íx'ÿÿÿÿÿþÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿÿÿÿÿÿÿÿÿÝ¡fÿ ®   "Ðz&ÿÿÿÿÿÿÿÿÿùÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿýÿÿÿûÿÿÿþÿÿÿùÿÿÿÿÿÿÿÿÿÿÿß¢eÿ ®   "Ò{$ÿÿÿÿÿÿÿÿÿúÿÿÿÿÿÿÿÿÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿùÿÿÿùÿÿÿÿÿÿÿüÿÿÿùÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿùÿÿÿûÿÿÿùÿÿÿûÿÿÿÿÿÿÿà£bÿ ®   "×$ÿÿÿÿÿÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿýÿÿÿÿÿÿÿÿÿÿÿâ£bÿ ®   "Þ*ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿç©cÿ ®   "Ô}ÿÜßÎÿÚÕ½ÿÙÒ¹ÿÙÒ¹ÿÚÓ¹ÿÚÓ¹ÿÚÒ¹ÿÚÓ¹ÿÚÓ¹ÿÚÓ¹ÿÚÓ¹ÿÙÒ¹ÿÙÓ¹ÿÙÒ¹ÿÙÒ¹ÿÚÒ¹ÿÚÒ¹ÿÚÒ¹ÿÙÒ¹ÿÙÓ¸ÿØÏ¶ÿÖÍ³ÿÙÑ·ÿØÏµÿØÏ´ÿÝÑ´ÿãÒªÿÞÜÃÿÔ7ÿ®   "³Y ÿ©L ÿ¢F ÿC ÿE ÿD ÿE ÿC ÿC ÿC ÿD ÿC ÿC ÿ E ÿC ÿC ÿD ÿE ÿE ÿE ÿC ÿ¤I ÿªS ÿ@ ÿ¦J ÿ¦I ÿ B ÿIÿ K ÿºY ÿ®   $¾f ÿËk ÿÒm ÿÑk ÿÑn ÿÐn ÿÑn ÿÑm ÿÒqÿÒrÿÒrÿÑqÿÑn ÿÑn ÿÏm ÿÏm ÿÑl ÿÑn ÿÑo ÿÏo ÿÏi ÿå@ÿð«bÿÏj ÿì¡Qÿö¢Dÿf>ÿ.jýÿ~rÿÏo ÿ¥   Ín òÛ*ÿí§Vÿð=ÿð;ÿð?ÿñ7ÿð3ÿñ?ÿî/ÿî/ÿð8ÿð7ÿî5ÿð6ÿð6ÿï-ÿï&ÿð*ÿí'ÿí!ÿð+ÿð3ÿí$ÿò3ÿõ5ÿè7ÿÀ_ÿÕ;ÿÙxÿh   Út bÕxýÜÿÜþÛ}þÛ{þÛzþÛz
+þÛ|þÛz	þÛy
+þÜ|þÜ}þÜ}þÜþÛòÛ~òÚ{òÚ|òÚz	òÙyò×s ò×s òÚyò×t òØt òá{ òç} ôä|úÌm                                                                                                                                                                                                                                                                                                                                                                                                        ÿÿÿÿÿÿÿÿ                                                                                                          ÿÿÿÿÿÿÿÿÿÿÿÿ(                                                                                      
+      k                                       {   OO&¸F#åC!ìC!ìC!ìC!ìC!ìC!ìC!ìC!ìC!ìC!ìA ìE$îR(Ï   pÖ°úúõóÿùõòÿøõòÿ÷õòÿùõòÿùõòÿùõòÿùõòÿùõòÿùõòÿùõòÿúõóÿùõòÿrE+Ý   pÙµñÿÿÿÿýÿÿÿýÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿüÿÿÿýÿÿÿþÿÿÿqD)Û   pÛµñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿýÿþÿtF'Û   pÞ·ñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿýÿþÿwH'Û   pá¸ñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿüÿþÿzI&Û   päºñÿÿÿÿúÿÿÿûÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿþÿýÿ}L%Û   pæ»ñÿÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿúÿÿÿûÿÿÿûÿÿÿþÿýÿN%Û   pìÀñÿÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿþÿÿÿþÿÿÿþÿÿÿþÿÿÿÿÿÿÿÿÿÿÿM!Û   pÞ°}ñåà×ÿäÜÏÿåÝÐÿåÜÐÿåÜÐÿäÝÐÿåÜÐÿåÜÐÿäÜÐÿãÚËÿãÚÌÿçÛÉÿìÚ½ÿc>Ú   pºcø½dÿ¼cÿ½dÿ½dÿ½dÿ¼cÿ¼bÿ¼cÿ¼cÿÈx(ÿÊs ÿ³o7ÿ|WRÿzWÍ   RÖyÀä*ñåëåëäëäëäëäëäëâëåëçëá$ìË1ï¿mp   	                                                                                                                                 :ÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿ  ÿÿÿÿÿÿÿÿÿÿ
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/resources/textAreaResizeCorner.png cef/resources/textAreaResizeCorner.png
--- resources/textAreaResizeCorner.png	1970-01-01 01:00:00.000000000 +0100
+++ resources/textAreaResizeCorner.png	2012-05-09 11:32:01.669658220 +0200
@@ -0,0 +1,3 @@
+PNG
+
+   IHDR         Ä¾   	pHYs        gAMA  ±|ûQ    cHRM  z%    ùÿ  é  u0  ê`  :  o_ÅF   9IDATxÚ|±  Ãå¦^¶J Ð¬%Ãe5ÁÉ,tj|Ê6vjHf7hª8 @3=XWk³    IEND®B`
\ Kein Zeilenumbruch am Dateiende.
diff '--exclude=.svn' -aurN cef.ori/tests/cefclient/cefclient_gtk.cpp cef/tests/cefclient/cefclient_gtk.cpp
--- tests/cefclient/cefclient_gtk.cpp	1970-01-01 01:00:00.000000000 +0100
+++ tests/cefclient/cefclient_gtk.cpp	2012-05-09 11:32:01.669658220 +0200
@@ -0,0 +1,397 @@
+#include "include/cef.h"
+#include "cefclient.h"
+#include "client_handler.h"
+
+#include "binding_test.h"
+#include "extension_test.h"
+#include "scheme_test.h"
+
+#include <gtk/gtk.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include "string_util.h"
+#include <iostream>
+
+#include "ui/base/resource/resource_bundle.h"
+#include "base/path_service.h"
+
+using namespace std;
+
+char szWorkingDir[512]; // The current working directory
+
+// The global ClientHandler reference.
+extern CefRefPtr<ClientHandler> g_handler;
+
+void destroy(void) {
+    CefShutdown();
+    exit(0);
+}
+
+// Callback for Debug > Get Source... menu item.
+gboolean GetSourceActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunGetSourceTest(g_handler->GetBrowser());  
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Get Source... menu item.
+gboolean GetTextActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunGetTextTest(g_handler->GetBrowser());  
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > JS Binding... menu item.
+gboolean JSBindngActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunBindingTest(g_handler->GetBrowser());  
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > JS Extension... menu item.
+gboolean JSExtensionActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunExtensionTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > JS Execute... menu item.
+gboolean JSExecuteActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunJavaScriptExecuteTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Request... menu item.
+gboolean RequestActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunRequestTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Local Storage... menu item.
+gboolean LocalStorageActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunLocalStorageTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > XMLHttpRequest... menu item.
+gboolean XMLHttpRequestActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunXMLHTTPRequestTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > WebURLRequest... menu item.
+gboolean WebURLRequestActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunWebURLRequestTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > DOM Access... menu item.
+gboolean DOMAccessActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunDOMAccessTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Scheme Handler... menu item.
+gboolean SchemeHandlerActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunSchemeTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Popup Window... menu item.
+gboolean PopupWindowActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunPopupTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Accelerated 2D Canvas:... menu item.
+gboolean Accelerated2DCanvasActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunAccelerated2DCanvasTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Accelerated Layers:... menu item.
+gboolean AcceleratedLayersActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunAcceleratedLayersTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > WebGL:... menu item.
+gboolean WebGLActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunWebGLTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > HTML5 Video... menu item.
+gboolean HTML5VideoActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	RunHTML5VideoTest(g_handler->GetBrowser());
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Zoom In... menu item.
+gboolean ZoomInActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	CefRefPtr<CefBrowser> browser = g_handler->GetBrowser();
+    	browser->SetZoomLevel(browser->GetZoomLevel() + 0.5);
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Zoom Out... menu item.
+gboolean ZoomOutActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	CefRefPtr<CefBrowser> browser = g_handler->GetBrowser();
+    	browser->SetZoomLevel(browser->GetZoomLevel() - 0.5);
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for Debug > Zoom Reset... menu item.
+gboolean ZoomResetActivated(GtkWidget* widget) {
+ 	if(g_handler.get() && g_handler->GetBrowserHwnd()) {
+    	CefRefPtr<CefBrowser> browser = g_handler->GetBrowser();
+    	browser->SetZoomLevel(0.0);
+	}
+	
+	return FALSE;  // Don't stop this message.
+}
+
+// Callback for when you click the back button.
+void BackButtonClicked(GtkButton* button) {
+  	if (g_handler.get() && g_handler->GetBrowserHwnd())
+	{
+    	g_handler->GetBrowser()->GoBack();
+	}
+}
+
+// Callback for when you click the forward button.
+void ForwardButtonClicked(GtkButton* button) {
+	if (g_handler.get() && g_handler->GetBrowserHwnd())
+	{
+    	g_handler->GetBrowser()->GoForward();
+	}
+}
+
+// Callback for when you click the stop button.
+void StopButtonClicked(GtkButton* button) {
+  	if (g_handler.get() && g_handler->GetBrowserHwnd())
+	{
+    	g_handler->GetBrowser()->StopLoad();
+	}
+}
+
+// Callback for when you click the reload button.
+void ReloadButtonClicked(GtkButton* button) {
+    if (g_handler.get() && g_handler->GetBrowserHwnd())
+	{
+    	g_handler->GetBrowser()->Reload();
+	}
+}
+
+// Callback for when you press enter in the URL box.
+void URLEntryActivate(GtkEntry* entry) {
+  	if (!g_handler.get() || !g_handler->GetBrowserHwnd())
+	{
+    	return;
+	}
+  
+  	const gchar* url = gtk_entry_get_text(entry);
+  	g_handler->GetBrowser()->GetMainFrame()->LoadURL(std::string(url).c_str());
+}
+
+// GTK utility functions ----------------------------------------------
+
+GtkWidget* AddMenuEntry(GtkWidget* menu_widget, const char* text,
+        GCallback callback) {
+    GtkWidget* entry = gtk_menu_item_new_with_label(text);
+    gtk_menu_shell_append(GTK_MENU_SHELL(menu_widget), entry);
+    return entry;
+}
+
+GtkWidget* CreateMenu(GtkWidget* menu_bar, const char* text) {
+    GtkWidget* menu_widget = gtk_menu_new();
+    GtkWidget* menu_header = gtk_menu_item_new_with_label(text);
+    gtk_menu_item_set_submenu(GTK_MENU_ITEM(menu_header), menu_widget);
+    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), menu_header);
+    return menu_widget;
+}
+
+GtkWidget* CreateMenuBar() {
+    GtkWidget* menu_bar = gtk_menu_bar_new();
+  	GtkWidget* debug_menu = CreateMenu(menu_bar, "Tests");
+  	
+	AddMenuEntry(debug_menu, "Get Source",
+               G_CALLBACK(GetSourceActivated));
+  	AddMenuEntry(debug_menu, "Get Text",
+               G_CALLBACK(GetTextActivated));
+  	AddMenuEntry(debug_menu, "JS Binding",
+               G_CALLBACK(JSBindngActivated));
+	AddMenuEntry(debug_menu, "JS Extension",
+               G_CALLBACK(JSExtensionActivated));
+	AddMenuEntry(debug_menu, "JS Execute",
+               G_CALLBACK(JSExecuteActivated));
+	AddMenuEntry(debug_menu, "Request",
+               G_CALLBACK(RequestActivated));
+	AddMenuEntry(debug_menu, "Local Storage",
+               G_CALLBACK(LocalStorageActivated));
+	AddMenuEntry(debug_menu, "XMLHttpRequest",
+               G_CALLBACK(XMLHttpRequestActivated));
+	AddMenuEntry(debug_menu, "DOM Access",
+               G_CALLBACK(DOMAccessActivated));
+	AddMenuEntry(debug_menu, "Scheme Handler",
+               G_CALLBACK(SchemeHandlerActivated));
+	AddMenuEntry(debug_menu, "Popup Window",
+               G_CALLBACK(PopupWindowActivated));
+	AddMenuEntry(debug_menu, "Accelerated 2D Canvas",
+               G_CALLBACK(Accelerated2DCanvasActivated));
+	AddMenuEntry(debug_menu, "Accelerated Layers",
+               G_CALLBACK(AcceleratedLayersActivated));
+	AddMenuEntry(debug_menu, "WebGL",
+               G_CALLBACK(WebGLActivated));
+	AddMenuEntry(debug_menu, "HTML5 Video",
+               G_CALLBACK(HTML5VideoActivated));
+	AddMenuEntry(debug_menu, "Zoom In",
+               G_CALLBACK(ZoomInActivated));
+	AddMenuEntry(debug_menu, "Zoom Out",
+               G_CALLBACK(ZoomOutActivated));
+	AddMenuEntry(debug_menu, "Zoom Reset",
+               G_CALLBACK(ZoomResetActivated));
+  	
+	return menu_bar;
+}
+
+int main(int argc, char *argv[]) {
+    getcwd(szWorkingDir, sizeof (szWorkingDir));
+
+    GtkWidget *window;
+
+    gtk_init(&argc, &argv);
+
+    CefSettings settings;
+    CefInitialize(settings);
+	
+	FilePath data_path;
+  	PathService::Get(base::DIR_EXE, &data_path);
+  	data_path = data_path.Append("chrome.pak");
+  	ResourceBundle::InitSharedInstanceForTest(data_path);
+
+    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+    gtk_window_set_default_size(GTK_WINDOW(window), 800, 600);
+    gtk_window_set_title(GTK_WINDOW(window), "CEF Client");
+
+    GtkWidget* vbox = gtk_vbox_new(FALSE, 0);
+
+    GtkWidget* menu_bar = CreateMenuBar();
+
+    gtk_box_pack_start(GTK_BOX(vbox), menu_bar, FALSE, FALSE, 0);
+
+    GtkWidget* toolbar = gtk_toolbar_new();
+    // Turn off the labels on the toolbar buttons.
+    gtk_toolbar_set_style(GTK_TOOLBAR(toolbar), GTK_TOOLBAR_ICONS);
+
+    GtkToolItem* back = gtk_tool_button_new_from_stock(GTK_STOCK_GO_BACK);
+  	g_signal_connect(back, "clicked",
+                   G_CALLBACK(BackButtonClicked), NULL);
+  	gtk_toolbar_insert(GTK_TOOLBAR(toolbar), back, -1 /* append */);
+
+  	GtkToolItem* forward = gtk_tool_button_new_from_stock(GTK_STOCK_GO_FORWARD);
+  	g_signal_connect(forward, "clicked",
+                   G_CALLBACK(ForwardButtonClicked), NULL);
+  	gtk_toolbar_insert(GTK_TOOLBAR(toolbar), forward, -1 /* append */);
+
+  	GtkToolItem* reload = gtk_tool_button_new_from_stock(GTK_STOCK_REFRESH);
+  	g_signal_connect(reload, "clicked",
+                   G_CALLBACK(ReloadButtonClicked), NULL);
+  	gtk_toolbar_insert(GTK_TOOLBAR(toolbar), reload, -1 /* append */);
+
+  	GtkToolItem* stop = gtk_tool_button_new_from_stock(GTK_STOCK_STOP);
+  	g_signal_connect(stop, "clicked",
+                   G_CALLBACK(StopButtonClicked), NULL);
+  	gtk_toolbar_insert(GTK_TOOLBAR(toolbar), stop, -1 /* append */);
+
+    GtkWidget* m_editWnd = gtk_entry_new();
+	g_signal_connect(G_OBJECT(m_editWnd), "activate",
+                   G_CALLBACK(URLEntryActivate), NULL);
+    gtk_entry_set_text(GTK_ENTRY(m_editWnd), "http://www.google.com");
+
+    GtkToolItem* tool_item = gtk_tool_item_new();
+    gtk_container_add(GTK_CONTAINER(tool_item), m_editWnd);
+    gtk_tool_item_set_expand(tool_item, TRUE);
+    gtk_toolbar_insert(GTK_TOOLBAR(toolbar), tool_item, -1); //append
+
+    gtk_box_pack_start(GTK_BOX(vbox), toolbar, FALSE, FALSE, 0);
+
+    gtk_signal_connect(GTK_OBJECT(window), "destroy", GTK_SIGNAL_FUNC(destroy), NULL);
+
+    // Create the handler.
+    g_handler = new ClientHandler();
+    g_handler->SetMainHwnd(vbox);
+
+    // Create the browser view.
+    CefWindowInfo window_info;
+    CefBrowserSettings browserSettings;
+    window_info.SetAsChild(vbox);
+
+	//bool success = CefBrowser::CreateBrowser(window_info, static_cast<CefRefPtr<CefClient> >(g_handler), "http://www.google.com", browserSettings);
+	//cout << "Created browser: " <<  success << endl;
+
+	CefBrowser::CreateBrowserSync(window_info, static_cast<CefRefPtr<CefClient> >(g_handler), "http://www.google.com", browserSettings);
+
+    gtk_container_add(GTK_CONTAINER(window), vbox);
+    gtk_widget_show_all(GTK_WIDGET(window));
+
+    CefRunMessageLoop();
+
+    return 0;
+}
+
+// Global functions
+
+std::string AppGetWorkingDirectory() {
+    return szWorkingDir;
+}
