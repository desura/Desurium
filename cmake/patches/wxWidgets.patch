
Index: include/msvc/wx/setup.h
===================================================================
--- include/msvc/wx/setup.h	(revision 68296)
+++ include/msvc/wx/setup.h	(working copy)
@@ -121,6 +121,7 @@
 // special version for regex as it does have a Unicode version
 #define wx3RD_PARTY_LIB_NAME_U(name) "wx" name wxSUFFIX_STR
 
+#ifndef WXUSINGDLL
 #pragma comment(lib, wxWX_LIB_NAME("base", ""))
 
 #ifndef wxNO_NET_LIB
@@ -188,6 +189,7 @@
         #pragma comment(lib, wx3RD_PARTY_LIB_NAME("scintilla"))
     #endif
 #endif // wxUSE_GUI
+#endif // WXUSINGDLL
 
 
 #ifndef WXUSINGDLL
Index: include/wx/event.h
===================================================================
--- include/wx/event.h	(revision 68296)
+++ include/wx/event.h	(working copy)
@@ -1875,7 +1875,8 @@
     #define wxHAS_PAINT_DEBUG
 
     // see comments in src/msw|os2/dcclient.cpp where g_isPainting is defined
-    extern WXDLLIMPEXP_CORE int g_isPainting;
+    extern WXDLLIMPEXP_CORE void IncreaseIsPainting();
+	extern WXDLLIMPEXP_CORE void DecreaseIsPainting();
 #endif // debug
 
 class WXDLLIMPEXP_CORE wxPaintEvent : public wxEvent
@@ -1886,7 +1887,7 @@
     {
 #ifdef wxHAS_PAINT_DEBUG
         // set the internal flag for the duration of redrawing
-        g_isPainting++;
+        IncreaseIsPainting();
 #endif // debug
     }
 
@@ -1896,12 +1897,12 @@
     wxPaintEvent(const wxPaintEvent& event)
             : wxEvent(event)
     {
-        g_isPainting++;
+        IncreaseIsPainting();
     }
 
     virtual ~wxPaintEvent()
     {
-        g_isPainting--;
+        DecreaseIsPainting();
     }
 #endif // debug
 
Index: include/wx/gdiobj.h
===================================================================
--- include/wx/gdiobj.h	(revision 68296)
+++ include/wx/gdiobj.h	(working copy)
@@ -47,7 +47,8 @@
     {
         // the cast here is safe because the derived classes always create
         // wxGDIRefData objects
-        return m_refData && static_cast<wxGDIRefData *>(m_refData)->IsOk();
+        wxGDIRefData* gdiRefData = dynamic_cast<wxGDIRefData*>(m_refData);
+        return gdiRefData && gdiRefData->IsOk();
     }
 
     // don't use in the new code, use IsOk() instead
Index: include/wx/msw/checkbox.h
===================================================================
--- include/wx/msw/checkbox.h	(revision 68296)
+++ include/wx/msw/checkbox.h	(working copy)
@@ -77,9 +77,11 @@
     // current state of the checkbox
     wxCheckBoxState m_state;
 
+protected:
     // true if the checkbox is currently pressed
     bool m_isPressed;
 
+private:
     // true if mouse is currently over the control
     bool m_isHot;
 
Index: include/wx/msw/taskbar.h
===================================================================
--- include/wx/msw/taskbar.h	(revision 68296)
+++ include/wx/msw/taskbar.h	(working copy)
@@ -56,11 +56,11 @@
 protected:
     friend class wxTaskBarIconWindow;
 
-    long WindowProc(unsigned int msg, unsigned int wParam, long lParam);
+    virtual long WindowProc(unsigned int msg, unsigned int wParam, long lParam);
     void RegisterWindowMessages();
 
 
-    wxTaskBarIconWindow *m_win;
+    wxFrame *m_win;
     bool                 m_iconAdded;
     wxIcon               m_icon;
     wxString             m_strTooltip;
Index: include/wx/popupwin.h
===================================================================
--- include/wx/popupwin.h	(revision 68296)
+++ include/wx/popupwin.h	(working copy)
@@ -79,7 +79,24 @@
 // when the user clicks mouse outside it or if it loses focus in any other way
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_FWD_CORE wxPopupWindowHandler;
+class WXDLLIMPEXP_FWD_CORE wxPopupTransientWindow;
+class WXDLLIMPEXP_CORE wxPopupWindowHandler : public wxEvtHandler
+{
+public:
+    wxPopupWindowHandler(wxPopupTransientWindow *popup);
+
+protected:
+    // event handlers
+    void OnLeftDown(wxMouseEvent& event);
+    void OnCaptureLost(wxMouseCaptureLostEvent& event);
+
+private:
+    wxPopupTransientWindow *m_popup;
+
+    DECLARE_EVENT_TABLE()
+    wxDECLARE_NO_COPY_CLASS(wxPopupWindowHandler);
+};
+
 class WXDLLIMPEXP_FWD_CORE wxPopupFocusHandler;
 
 class WXDLLIMPEXP_CORE wxPopupTransientWindow : public wxPopupWindow
@@ -135,7 +152,7 @@
 #if defined(__WXMSW__) ||(defined(__WXMAC__) && wxOSX_USE_CARBON)
     // Check if the mouse needs to be captured or released: we must release
     // when it's inside our window if we want the embedded controls to work.
-    void OnIdle(wxIdleEvent& event);
+    virtual void OnIdle(wxIdleEvent& event);
 #endif
 
     // the child of this popup if any
Index: src/common/popupcmn.cpp
===================================================================
--- src/common/popupcmn.cpp	(revision 68296)
+++ src/common/popupcmn.cpp	(working copy)
@@ -68,22 +68,6 @@
 
 // event handlers which we use to intercept events which cause the popup to
 // disappear
-class wxPopupWindowHandler : public wxEvtHandler
-{
-public:
-    wxPopupWindowHandler(wxPopupTransientWindow *popup) : m_popup(popup) {}
-
-protected:
-    // event handlers
-    void OnLeftDown(wxMouseEvent& event);
-    void OnCaptureLost(wxMouseCaptureLostEvent& event);
-
-private:
-    wxPopupTransientWindow *m_popup;
-
-    DECLARE_EVENT_TABLE()
-    wxDECLARE_NO_COPY_CLASS(wxPopupWindowHandler);
-};
 
 class wxPopupFocusHandler : public wxEvtHandler
 {
@@ -513,6 +497,12 @@
 // wxPopupWindowHandler
 // ----------------------------------------------------------------------------
 
+// event handlers which we use to intercept events which cause the popup to
+// disappear
+wxPopupWindowHandler::wxPopupWindowHandler(wxPopupTransientWindow *popup) : m_popup(popup) 
+{
+}
+
 void wxPopupWindowHandler::OnLeftDown(wxMouseEvent& event)
 {
     // let the window have it first (we're the first event handler in the chain
Index: src/msw/dcclient.cpp
===================================================================
--- src/msw/dcclient.cpp	(revision 68296)
+++ src/msw/dcclient.cpp	(working copy)
@@ -26,6 +26,8 @@
 
 #include "wx/dcclient.h"
 #include "wx/msw/dcclient.h"
+#include "wx/thread.h"
+#include <map>
 
 #ifndef WX_PRECOMP
     #include "wx/string.h"
@@ -65,14 +67,28 @@
 // global variables
 // ----------------------------------------------------------------------------
 
-static PAINTSTRUCT g_paintStruct;
-
+#include <map>
+
+static std::map<int, PAINTSTRUCT> g_paintStruct;
+
 #ifdef wxHAS_PAINT_DEBUG
     // a global variable which we check to verify that wxPaintDC are only
     // created in response to WM_PAINT message - doing this from elsewhere is a
     // common programming error among wxWidgets programmers and might lead to
     // very subtle and difficult to debug refresh/repaint bugs.
-    int g_isPainting = 0;
+    std::map<int,int> g_isPainting;
+
+
+	void IncreaseIsPainting()
+	{
+		g_isPainting[wxThread::GetCurrentId()] += 1;
+	}
+
+	void DecreaseIsPainting()
+	{
+		g_isPainting[wxThread::GetCurrentId()] -= 1;
+	}
+
 #endif // wxHAS_PAINT_DEBUG
 
 // ===========================================================================
@@ -204,8 +220,21 @@
 
 IMPLEMENT_ABSTRACT_CLASS(wxPaintDCImpl, wxClientDCImpl)
 
-wxArrayDCInfo wxPaintDCImpl::ms_cache;
 
+	
+
+//DESURA
+std::map<wxThreadIdType, wxArrayDCInfo> ms_cache;
+//DESURA
+
+//wxArrayDCInfo wxPaintDCImpl::ms_cache;
+
+wxArrayDCInfo& GetCache()
+{
+	return ms_cache[wxThread::GetCurrentId()];
+}
+
+
 wxPaintDCImpl::wxPaintDCImpl( wxDC *owner ) :
    wxClientDCImpl( owner )
 {
@@ -217,7 +246,7 @@
     wxCHECK_RET( window, wxT("NULL canvas in wxPaintDCImpl ctor") );
 
 #ifdef wxHAS_PAINT_DEBUG
-    if ( g_isPainting <= 0 )
+    if ( g_isPainting[wxThread::GetCurrentId()] <= 0 )
     {
         wxFAIL_MSG( wxT("wxPaintDCImpl may be created only in EVT_PAINT handler!") );
 
@@ -242,9 +271,9 @@
     }
     else // not in cache, create a new one
     {
-        m_hDC = (WXHDC)::BeginPaint(GetHwndOf(m_window), &g_paintStruct);
+        m_hDC = (WXHDC)::BeginPaint(GetHwndOf(m_window), &(g_paintStruct[wxThread::GetCurrentId()]));
         if (m_hDC)
-            ms_cache.Add(new wxPaintDCInfo(m_window, this));
+			GetCache().Add(new wxPaintDCInfo(m_window, this));
     }
 
     // Note: at this point m_hDC can be NULL under MicroWindows, when dragging.
@@ -272,14 +301,14 @@
 
         if ( --info->count == 0 )
         {
-            ::EndPaint(GetHwndOf(m_window), &g_paintStruct);
+            ::EndPaint(GetHwndOf(m_window), &(g_paintStruct[wxThread::GetCurrentId()]));
 
-            ms_cache.RemoveAt(index);
+            GetCache().RemoveAt(index);
 
             // Reduce the number of bogus reports of non-freed memory
             // at app exit
-            if (ms_cache.IsEmpty())
-                ms_cache.Clear();
+            if (GetCache().IsEmpty())
+                GetCache().Clear();
         }
         //else: cached DC entry is still in use
 
@@ -291,10 +320,10 @@
 wxPaintDCInfo *wxPaintDCImpl::FindInCache(size_t *index) const
 {
     wxPaintDCInfo *info = NULL;
-    size_t nCache = ms_cache.GetCount();
+    size_t nCache = GetCache().GetCount();
     for ( size_t n = 0; n < nCache; n++ )
     {
-        wxPaintDCInfo *info1 = &ms_cache[n];
+        wxPaintDCInfo *info1 = &(GetCache())[n];
         if ( info1->hwnd == m_window->GetHWND() )
         {
             info = info1;
@@ -310,10 +339,10 @@
 // find the entry for this DC in the cache (keyed by the window)
 WXHDC wxPaintDCImpl::FindDCInCache(wxWindow* win)
 {
-    size_t nCache = ms_cache.GetCount();
+    size_t nCache = GetCache().GetCount();
     for ( size_t n = 0; n < nCache; n++ )
     {
-        wxPaintDCInfo *info = &ms_cache[n];
+        wxPaintDCInfo *info = &(GetCache())[n];
         if ( info->hwnd == win->GetHWND() )
         {
             return info->hdc;
@@ -363,7 +392,7 @@
         else // not in cache, create a new one
         {
                 m_hDC = dc;
-                ms_cache.Add(new wxPaintDCInfo(m_window, this));
+                GetCache().Add(new wxPaintDCInfo(m_window, this));
                 m_saveState = SaveDC((HDC) dc);
         }
 }
@@ -378,12 +407,12 @@
         if ( --info->count == 0 )
         {
                 RestoreDC((HDC) m_hDC, m_saveState);
-                ms_cache.RemoveAt(index);
+                GetCache().RemoveAt(index);
 
                 // Reduce the number of bogus reports of non-freed memory
                 // at app exit
-                if (ms_cache.IsEmpty())
-                        ms_cache.Clear();
+                if (GetCache().IsEmpty())
+                        GetCache().Clear();
         }
         //else: cached DC entry is still in use
 
Index: src/msw/font.cpp
===================================================================
--- src/msw/font.cpp	(revision 68296)
+++ src/msw/font.cpp	(working copy)
@@ -535,6 +535,8 @@
     // versions by passing a negative value explicitly itself.
     lf.lfHeight = -abs(pixelSize.GetHeight());
     lf.lfWidth = pixelSize.GetWidth();
+	if (pixelSize.GetHeight() < 0)
+		lf.lfHeight = pixelSize.GetHeight()*-1;
 }
 
 void wxNativeFontInfo::SetStyle(wxFontStyle style)
Index: src/msw/window.cpp
===================================================================
--- src/msw/window.cpp	(revision 68296)
+++ src/msw/window.cpp	(working copy)
@@ -2661,20 +2661,22 @@
 // Main wxWidgets window proc and the window proc for wxWindow
 // ---------------------------------------------------------------------------
 
+#include <map>
+
 // Hook for new window just as it's being created, when the window isn't yet
 // associated with the handle
-static wxWindowMSW *gs_winBeingCreated = NULL;
+static std::map<int, wxWindowMSW*> gs_winBeingCreated;
 
 // implementation of wxWindowCreationHook class: it just sets gs_winBeingCreated to the
 // window being created and insures that it's always unset back later
 wxWindowCreationHook::wxWindowCreationHook(wxWindowMSW *winBeingCreated)
 {
-    gs_winBeingCreated = winBeingCreated;
+    gs_winBeingCreated[wxThread::GetCurrentId()] = winBeingCreated;
 }
 
 wxWindowCreationHook::~wxWindowCreationHook()
 {
-    gs_winBeingCreated = NULL;
+    gs_winBeingCreated[wxThread::GetCurrentId()] = NULL;
 }
 
 // Main window proc
@@ -2697,11 +2699,11 @@
 
     // when we get the first message for the HWND we just created, we associate
     // it with wxWindow stored in gs_winBeingCreated
-    if ( !wnd && gs_winBeingCreated )
+    if ( !wnd && gs_winBeingCreated[wxThread::GetCurrentId()] )
     {
-        wxAssociateWinWithHandle(hWnd, gs_winBeingCreated);
-        wnd = gs_winBeingCreated;
-        gs_winBeingCreated = NULL;
+        wxAssociateWinWithHandle(hWnd, gs_winBeingCreated[wxThread::GetCurrentId()]);
+        wnd = gs_winBeingCreated[wxThread::GetCurrentId()];
+        gs_winBeingCreated[wxThread::GetCurrentId()] = NULL;
         wnd->SetHWND((WXHWND)hWnd);
     }

Index: src/unix/snglinst.cpp
===================================================================
--- src/unix/snglinst.cpp	(revision 68963)
+++ src/unix/snglinst.cpp	(working copy)
@@ -137,7 +137,7 @@
     pid_t m_pidLocker;
 
     // the name of the lock file
-    wxString m_nameLock;
+    std::string m_nameLock;
 };
 
 // ============================================================================
@@ -147,7 +147,7 @@
 LockResult wxSingleInstanceCheckerImpl::CreateLockFile()
 {
     // try to open the file
-    m_fdLock = open(m_nameLock.fn_str(),
+    m_fdLock = open(m_nameLock.c_str(),
                     O_WRONLY | O_CREAT | O_EXCL,
                     S_IRUSR | S_IWUSR);
 
@@ -177,7 +177,7 @@
             fsync(m_fdLock);
 
             // change file's permission so that only this user can access it:
-            if ( chmod(m_nameLock.fn_str(), S_IRUSR | S_IWUSR) != 0 )
+            if ( chmod(m_nameLock.c_str(), S_IRUSR | S_IWUSR) != 0 )
             {
                 wxLogSysError(_("Failed to set permissions on lock file '%s'"),
                               m_nameLock.c_str());
@@ -199,7 +199,7 @@
                 wxLogSysError(_("Failed to lock the lock file '%s'"),
                               m_nameLock.c_str());
 
-                unlink(m_nameLock.fn_str());
+                unlink(m_nameLock.c_str());
 
                 return LOCK_ERROR;
             }
@@ -216,7 +216,7 @@
 
 bool wxSingleInstanceCheckerImpl::Create(const wxString& name)
 {
-    m_nameLock = name;
+    m_nameLock = name.fn_str();
 
     switch ( CreateLockFile() )
     {
@@ -293,9 +293,10 @@
                 }
                 else
                 {
+#ifdef __WXDEBUG__
                     wxLogMessage(_("Deleted stale lock file '%s'."),
                                  name.c_str());
-
+#endif
                     // retry now
                     (void)CreateLockFile();
                 }
@@ -318,10 +319,16 @@
 {
     if ( m_fdLock != -1 )
     {
-        if ( unlink(m_nameLock.fn_str()) != 0 )
+        if ( unlink(m_nameLock.c_str()) != 0 )
         {
+#ifdef __WXDEBUG__
             wxLogSysError(_("Failed to remove lock file '%s'"),
                           m_nameLock.c_str());
+#else
+            if (errno != 2) // Not complaining that the file doesn't exist
+                wxLogSysError(_("Failed to remove lock file '%s'"),
+                          m_nameLock.c_str());
+#endif
         }
 
         if ( wxLockFile(m_fdLock, UNLOCK) != 0 )
